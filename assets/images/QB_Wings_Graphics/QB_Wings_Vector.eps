%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: QB_Wings_Logo vector.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Dave Houle
%%CreationDate: 10/9/18
%%BoundingBox: 0 0 721 205
%%HiResBoundingBox: 0 0 720.0352 204.4571
%%CropBox: 0 0 720.0352 204.4571
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 36 8%%BeginData: 6506 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA9FFA8FD07FFA8FFA8FD07FFA8FFA8FD68FFA8FD05FFA8A8%A8FD07FFA8FFA8FD05FFA8FD66FFA8FFFFFF7D2752FD05FF765252FD05FF%522752FFFFFFA8FD5AFFA8FD09FFA8FFFFFF4BFD04F87D5227FD05F82752%7D20F8F8F84BFFFFFFA8FD54FF7D7DFD04522776A8FD05FFA8FFFFFF52FD%15F851FFFFFFA8FD06FFA87D7D7DFD46FF76524B7DA8FD05FF7C527DFFFF%FFA8FFFFFF27FD17F827FFFFFFA8FFFFFF524B2752527D5252527DA8FD3C%FF7DA15252277CA8FD0AFF7DA8FD05FF27FD19F827FD05FF527DFD08FF7D%524B7DA8FD34FFA8A7527D5252527DA1FD06FFA8767C52A8FFFF7D7CFFFF%A8FFA8FD0EF852FD0CF87DFFA8FF7D7DFD04FFA8FD06FFA852524B52277D%FD2CFFA852522752527DA8FD09FF7D7D277DA8A852A8FFA827A8FFFFAFFF%27FD05F852FFA852F8F8F87CFFFF7DFFFFFF27FD05F827FFA8FFFF767DFF%FF7D527D527DA8FD07FFA8A1527D527D7DA8FD23FF7D522727275252A8FD%04FF7D7D4B52527D5227277DFF52A8FFFFFF7DFFFF52F8A8FFA8A8FFFD04%F8A8FD04FFA1F8F8F8FD07FF27FD04F8A8FFFFFF7D27A8FFA87CFFFF7D27%7D527DA8FFFFFF7D7DFFFFFFA87652272727527DFD1AFF7D7D524B275252%7DA8FD05FFA8A17D7D7DA8A8A87D2752FFFF7D767D7D52A8FFA8FFFF5220%27277DFF52F8F87DFF7DF8F8A8FF76F8F87DFFA827F87DFFFFF8F8F851FF%A87D52F87DFFFFA8FFA8FFA851CAFF5227527D5252527D76A8FD05FF7D52%4B27274B7DA8FD0CFF4B7DFD09527DA8FFA8FFA8A8A87D277D7C7DA8FFA8%FFA87D525252FFFFFFA87D7D7627FFFFA8FD04FFA8FFA8FF52F8F8FFFFFD%04F8FFFFF8F852FFA8F8F8F8FFFFF8F8F852FF512727A1FD04FFA8275252%7DA8A1FF7D2752A8A8A87DA17D7D7DFFFFA8A8FFFFFF7D7D274B2752527D%7DA8A8FFA8A87DFF2727A8FD08FFA87D7DA8A7FFA8A8A87D27A8FFFFA8A8%7D7D7DFF52527D7D4B52FFFFA8767D7D27FD05FFA8A8FF52F87DFF7DFD04%F87DFF52F827FFFFF8F827FFFF20F8F852FD07FF7DFFFF527DFF7D7DFFFF%FF7D52767DA8FD04FFA8527D27A1A8FF7DA8A8FFFFFFA8A87D7D527D767D%7D7D27FF52F8F827A8A1A87DA87DA8FD05FFA87DA1A1527D7D52527DFFFF%FF7D7D7D522752A8FFA8A87D7D4B7652A127A1FFA87DFF27F8A8FF27FD04%F852FF7DF827FFFFF8F852FFFFF8F8F827FFA8FFFF7DFFCAF8525252A8A8%FF7620FD0452FFA8A87D7D7DFFFFFF27A17DA8A8FFA8A87D7D76A8A8FD05%FF7D52F827FFFFFF27F8277DA8FD05FFA87D767D7DA8FFFF7D765252FFFF%FFA87DA8FF7D527D7DFFFF5276FF7D7DA87D527D525252FFFF26F8FFFF27%FD04F827FFA8F8F8FFFF5227FFFFA8F8F8F826FFA8A17D277D277D52A8A8%7DFFFFFF7D5252FFA87DFD04FF7D5276527DA8A87DA8A8FD06FFA8FFFFCA%A8F8F84BA8FD05FF5227FD07F827527DA8FFFFA87DA8A152527D522776FF%FFA87DA87D52522727A8FF5252FF527DFFA87DFFFFA8F820FFFFFD05F827%FFFFF827FD06FF27FD04F8A8FF527DA852A1A85252FF7D277DFF527D7652%7DFF7D7D7DA87D5276A87DA8FFFFA17D5252527D527D7D7D4B27F8F87CFD%09FF27F87DA1A8A8FD07FF7DA87DA8CAFFA87D7DFFFFA87DA8A8FF527D7C%7D52FD047D7627A8527DFFFF7DF8F8FFFF27FD04F827FFFFF8F8FFFFFFA8%FFFFA8FD04F87DFF76A8FF7D52FF7D76A87D4B275252FFA8A8FFFFFFA84B%76A87D7D7DA8A8FD05FF7D522727FD05F87DFD0BFF7DF8F8517CA8A8FFA8%A85252527DA8FFA8A8767D27262752F827FFFFFF7D7DA87D7D7DA87DA8A8%52277D7DA8FF52F8F8FFFF20FD04F852FFA8F827FFFFF8F852FFFF52F8F8%F852FFA8525227FD047D5252FD047DFFFFA82752A8FF76527DA8FFFF7D7D%52A8FD09FF7DF827FD0EFF7DFD06F827527DFD04FF7D52A8A8764B52767D%27FF525276FFFF52A1FF527DFF7DA8A87DFFA8FF27F8F8FFFF52FD04F852%FF7DF827FFCAF8F8F8A8FF7DFD04F8FFFF7D527DA8FF7DA8A87D7DFFA87D%7DFFFF52F85227F827A87D7DA8FFFFA852524B52527D52522727F827A8FD%10FF27F84BFD06FFA852527DFFA17D7D527DFF27522752527D4B52527D51%267DFF52A8277DA8FFA8F8F8F852FF7DFD04F8A8FF52F852FFA7F8F8F87D%FF7DFD04F8A8FF527DA876FF7D27FFA8527DFFA85227A1277D7D5252767D%A87D767DFD04FF7D4B27FD04F851FFFFFFA8FD10FF27F8F85252522727F8%7DFFFFA8FF7D76A8FF7DCA7DA1FF5220A87D7D52277D7D5252277D5252FF%FFF8F8F827FFFF7DFFCA7DFFFFF8F87DFF7DF8F8F8A8FF52FD04F8FFFF7D%27A7527D7D5127767D7D522752A8527D51FFA8767DA8A1FFA87C277DA8FD%05FF52F87DFD16FF7D5227FD04F8FD05FF5152A8A8A8FF52A1FFA87DA8A8%A87DFF7DA87D7D527D7DA8A8FFFF27F8F8F87DFD06FF27F8F8FFFFFF5227%52FFFFFD05F8FFFF527D27525252A8527D527DA82776A8FF52A87DA8FF76%52FFCAFFFFA8F8F8F827FD04F852FD1AFFA87DF87DFFA87D52F852FFFFFF%7D27A8FFFF7D52CAA87DA8FFA8A8FF7DA8A87DFFA8FFFF27FD04F8A8FD05%FFF8F827FD07FF52FD04F827FFA8A87DA152FD04A8FFA8A8A1FF7DFFA8FF%52A1FFA8FF7D277DFD04FF27F8F8277DA8FD1DFFA820FD05F827FFA74BF8%F8FFFFFF52F8A8FFA87DFFFF52FFA87DFFA852FF52A8FF7DFD05F8527D7D%FFFF7DF8F8FF7D527DA87D27FD05F87DFFFFA87D7DA87DFFA8A8FFA876A8%FF7627FFFFFF27277DFFFFA8F8F827525252F87DFD23FF52277D52F8F8F8%27F8FFFFA727F827FFFF7DA8FF5252FF5252FF5276FF2752FFFF51FD07F8%52FFFFA8FD0CF827FFFFA8FF52A8FF7DA1FF52FFFF7DA8FFFF2727FFFFFF%27F8F8527D27FD04F82752A8FD27FFA8A8FF52F827F8F85227FFA827F8FF%4BF827FFF827A8F8F876F852FFFFFF26FD07F8277D27FD0CF8A8FF7D27FF%5227FF5227FF2720FFFF27A8FF52F8F84B7DFFF82727F8F87DFF7DA8FD2D%FFA8272752FF76F820F84B26F84B7DF8F87DF8F87D27F8FFA8A8FFFFFF27%FD13F827FFFFFFA82727F8275227F87D27F8F87DF8F852FF27A127F8F8F8%52FD39FF7DF84BA8FF7D7DFFFF2052FFA17DFFA8FFFFFFA8FD04FF7DFD11%F876FFFFFFA8A8FFF827A8F8F8FFF8F8A852F8277D20F8F852FFA87D52FD%54FFA8A8524BFD07F84B52A1A8FD0EFFA852FD06FFA876FD56FFA8FD07FF%A827F827A8FD07FFA8FF7D4B277DFD67FFA8FFA8FFA8FD0BFFA8FFA8FF7D%272752F87DFD69FFA8FFA8FFA8FFFFFFA8A8A8FFA8FD04FF2727F8F87D27%FD6EFFA8FFA8FD09FF274B27275252FD6FFFA8FD0AFFA8F85227F87DFD7B%FFCA4B52A8FDAFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2018-10-09T15:45:24-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-10-09T15:45:24-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-10-09T15:45:24-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>76</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgATAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FVOaYRAADlI20cY6k/08TirGfPPm3yn5M0CbX/ADXOnoKQsaFRI8kjfZht4z1Y0/ix&#xA;oNlWJflt+f8A5G88yPZaZqH6K1BDVNO1ZFErryoPRkWUJJ2+GvIfLFUz83fnJ+V/liAya55lt7qa&#xA;hK6dYuJ3Yinw+lAXIDV/3a3E4qkvk/8A5yL/ACe8yTfV7TV38vXRJCQakEtY2ABOzM0tsK0/mDH6&#xA;cVZL5y/NXyj5T0M6vq2v2bWzD9xDZKs1zPUlaQJ6rBtx9ojiO+KpX+Vf5wfl7+Y/1mPQxNYaxa/H&#xA;Ja3YRbsx1/vUcNL6iVNG3NOjChFVXpEMzFjFKAsyiu32XX+Zf4jt9xKqrirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVSnzH5t8s+WraK517U7fTYZ39OA3EgQyP/Ki/aY/IYqx9vzY0a7R&#xA;P8O6Vq/mKWVuEf1Kwnig5EAjld3i2tso+IV/ebYpp1tbfmprjCXULu08oWRIIsrBU1LUCKEEPdXC&#xA;fVYzXeiwSf63iqiW/LLQ7iBo9S1DWtRMlRK82r6hErg77w201vAOnaMYraCuPy6u9JD33lfzPqmm&#xA;TQRj07PULqbVtOKxgHhJDevLKqkL1ilRh2PbFWQ+VNfk1nT5DdQrbapZSm11O1Ri6JMqhw0bkLzi&#xA;ljdJY2purCtDUBQUD5q856L5P8qX3mvXZCILZTzjQVkLl+CW0QJFW5/D4ftGg6KvgX81PzU8x/mN&#xA;5jfVtWf0rWLkmm6ajExW0RP2V6cnag5vSrHwAACrDMVdiq/0pfSEvBvSLFRJQ8eQFSK9K0OKrMVR&#xA;2ia5q+harbato93JZalaP6lvcxGjK3T6QRsQdiNjir7s/Ir86rH8zfLs0V+osvMmkKjaiEoqEEEL&#xA;cwk1ABoeSnp0NVO6r0XVfMNto+hrqeoI5ciNEtIULTTXEtFSCGMmrSO54qCfmQKnFWMHTvzf1tRP&#xA;PrFj5RgY8o7CytV1K6CEDaa6uGWDmPCOEj/KbAlF23lr8xrR1aPzol7QEMmo6XA6Gvf/AEOSxbb/&#xA;AFsKqcvnDzjoZUeZfLUl3Z7BtW8vs18ikn7Utkyx3aCn++xL88VTXy9+YPknzEwj0bWrS7uTWtmJ&#xA;AlypHUPbycJkP+sgxRTIMVdirsVdirsVdirsVdiq2WWOKN5ZXWOKNSzuxAVVAqSSdgAMVYnq/wCb&#xA;v5ZaS5ju/Mtg04NDa20oup6/8Ybf1ZP+FxTSVTfm1qF65h8r+Sde1mRhyguri3Gk2Ui05chPftC9&#xA;COn7vfFaQF9qv53XUJuNQuPLfkTTHB5TXMsmpXcVBUmrG0tTQe5wKibf8vkurD9MeafPmra7ZPDz&#xA;leC8TSdMeFl2bhp/1f4Sp6mUg4qstpfLXluMy+UPLFpAX4xw6zcqLRJq1Yq08y/Xbgld0aFJgw6H&#xA;tilWHnfz7pmnSX2uWOjR2A+IaneXdzo0ALfZgWG4gu7h3HQMyR8+yDaqikJofnP8wPN1nNqcH6N8&#xA;reVImZBrZae9uLgI3F3tUu4LBYl5ApymibcbKwocVSTTrPyp/jW7n84WF1f2F9p8S6D+nlOpz3Ek&#xA;E8pvZRaATi35l4fSSONFZQSo64pZp5Ds/KUOnJ5i8jo0HlnVDI81hFFNHC7pIYhdW9s4BjP7s1CI&#xA;PUWjbkCqhjetQ+avIHnh/MOjaNd+YPKGrRLFqFjpiLNdWrIzSRtHCWVpFV5HK8f2XK/CscYKqOvL&#xA;/Q/zPtdY8m32ga1ptjqdg0rXeq2ElkgmieNY3g9Vld5Y2dG+zx+HrQ7lXxFpX5c+YtT/ADFHkK3R&#xA;f00L6XT5jUmONoHZZpWK1+CNUZyR2G2KH0prVh/zjN+TQs/LWv6OfMWtXkIN/cyW8V7NGr7erIJX&#xA;RIA25RYfjAFe4JUvPf8AnIH8jdA0HRrPz95DYzeUNREbTwKzSpb+uB6MsbvV/SkrSjmqsQO9FUPb&#xA;vydtvy/87/kVoT65o1jNZ6Jz+u2ogHppdWSlHnZIx8TyxESPseXLpilLPK2o/wDOMn5sS3vlXTPL&#xA;1rY3qxM8FLGHT7h0XZpLWaDeqVB4MQab8SAaKvk/8yvJVx5J886v5Ynk9b9HTcYJjSskEiiWFyBs&#xA;C0TqSOx2xQ+q/wDnH3y55U/Lz8udN1nzHqVnpd95v4301zfzRW6G1ReVtbo8rKDyV1lI78mB6Yqy&#xA;G286D8y/zDtrTyrNLJ5W8vo7XuuRrJHE9zMvpyC3l+Gsnos0KMNwJJXFCkZYJZn5mga8QGTXT5c8&#xA;raeEW5ubaSO2M8jNwWMXLH9zHG3FfgoWc8agCjKsZ1251jy15303T9L80XEWm6jZ3E8kGpxPqlrB&#xA;Os0SWwmnqtxDHOssoRmnVax/tYqmGr/m3ceVpLO383+X7uAXsiQ2mraWY73TpncVUCRmgmjdtyI2&#xA;j3/ZLY2tILzX5n8s6qYheeQX1e8crFD+nraysIjyNOCTakV5t1okasfGmK0t0jRfIENz9R8vz6n5&#xA;H1KZ0n/R9s0loJJX2Po6fepLbyhSKM0VuV260xVNJdK/O3SyDpuu6P5ihJq0Wr2klhOFHZZ7JnjJ&#xA;PvBhVQ/5Wf500xwvmb8u9WhRjxS50SSHWYzTqzJEYp0HzjriqO0f87/yr1WY28fmG2srxac7TUue&#xA;nzBjtx4Xaw8mB/lriimbQzQzRLLC6yxOOSSIQysD3BGxxVfirsVfPGsflV5j/L6wvb+w0HQPP/lu&#xA;09S6Nrq9jH+nEi5tIyJdLHILkqCTykHL+UdsCbX+SPPP5JearGCaPy35L06/ZQ0unX0kVvLG5/YB&#xA;m06NZCP+KyRir1rTNM1cWSnQToui2clfgs7drxGAqOSSRvYICPeNsVQ2qjy9pTJ/irznMppWKG5v&#xA;oNLAZqCqizFnI9egV2b78VQUUct5Ey+WbSdbe6UCW6trZNKilDAfFcXN4k11ICm6yW8TGp3buFLF&#xA;tB0XSvJXmq809NEm1uGF4p9G0/Sblbi307kvKea4g1G7UW05kJPrE8WSnDixdSqyzyzqPmbzlaQ6&#xA;9aNaeX9Lu0rBNbmLUNTliJ5LylZTb29RxPplJSO/E7BQlmueV9F1nTr4aPcNqGqywyW6eaJLlmWy&#xA;5Bg0i3zmQowNSYbTivLZggIYKWIah5p/MC30y30vyprdtJp9mFs9O1T9CfVo3lrHbwQ2nrXEiSqG&#xA;cR+oIlT4qK0j0Qq0z3XNO8v+XNPtdMvrx77UPMUq294Jn5ahrMypxW35bCOD4yX48Y40qtAGOKGF&#xA;eZ7HzhpejTeQrLXLS0FppF35iU2drIl1bNp9zFcxQWriYL9X9eVY4y0XLgjCvLFLMG/M7zOdS063&#xA;PlO7tokuTZ+YFmaCSRJjp5vwtkLeaVrjjGKn4AT9kfH8ONopPfL/AJn0vzRrcV/oxnl06zs5kluZ&#xA;rae2R5LmWPgsf1hImfh9WfnQUBoOu2FXhf8AzjDbWfmL83fzG87BRUXMiWaGjcU1G6lmJDbbqtuF&#xA;rTcE4q+cvzS8xTeY/wAxfMetSO0gu7+f0C1aiCNzHAu/8sSKv0YofS3/ADj5G/nf/nHDzF5RuuNx&#xA;JbPe2NlE3VBLCtzbtv8Ay3EjFflilv8A5wmvWufJvmbSZ1ElpDfRzemwDKTcwenICCNwRAOu2KGN&#xA;f84s/k35u0/8wrjzNrunXGmWWiLcW1r9ZRomnuZAYG4K1OUaIz1cbcqAd6KXnP8AzlBqdpqH52eY&#xA;GtWWSO2+r2ryKagyw28ayA+6PVD8sUPqX8s9R0DWfym8gajrUNtLaiz/AEXJ9bEbQL9XiaMu/qhl&#xA;5F7FQDXvilOm/N7yHbyajpsqTwWtkfq9kEtZWj1Clus7rp4iRhMFjkX7PY8vsEMQtMOt9Y8/ecPI&#xA;svlXWtHt7zU7uytNVurqK6jgSSxvbhrmCC1RY0ZblIoHij5UUNHzLnupZPoPk+FtEmuPLLWtvfLG&#xA;beO6eCP6rqUSVCw6tbqqOZonDpIaLJG1fF0Ki2J2vnvVfOOhp5M1PypptqNYtmjS2vNYlgVnRQ/G&#xA;29Sxm/eRNxZYl5NH8JpxoxU0yXyL5f1i00eCwt799P1WK2SPVdBuI/Vs1lAKyMllLI1IGLEK1pcR&#xA;wk/s7EYqUffXlr5ctHi80eX/AE/L7cUnudMVr7S+I+yZ9PKmW3+JQ37uJ1B+1J4qGNaxPPr7ponk&#xA;rXNabQ72SeDUILeGeKW0ktoi/CK+vYo+EbMoSSD10erLwZE5DFLKdHvkMsOlNffo/UI0W3hjSSex&#xA;uaIAKQ6dqP1mCULShlWRw25BrihM9Y8ua9eQC3uxpPmKxUnjZatacHYH+edDNFXt8NqMVY3D+Wfl&#xA;i3vPXHkeTSr0sK3HlnUTZQAUG4aGfSpK9iPR+/FUP5sXy35R0e51S/8ANPmmzsbWocGaaTkwr8KS&#xA;3sT8iabASb9q4pYXpOofmB50jtZ/y5XzHp9hM6uPN3mS/X6uED/G0Wmj1UuQwUhf2fEDFFvovCh4&#xA;T/zkL+QkXmqxttX8paJYnXbe59fU4Y6Wk99Ca8kEo4xepU1LSCp/m24speT6RZ/844aBLHY/mB5J&#xA;8w6FqpB5R6lJcSQ7N9qOS3a1eQe/o0+eBXqvlT8z/wDnFLy9Kv8AhYW0WofEYWttKvpLtiR9hJXt&#xA;2k36U5Uwq9Ai82eYPM9v6ej+VLy2s2LBr7XnOmREACnG2jM13Kp5bq8cat05eAVC+Y9L03SNIVfM&#xA;d0bjT3JQ6dbNHo2k8pCaI6LJ60okFeURkm5b/u9wMVeYfmYumw2+mRy+SLKSyu7u2jGmWlpDaXs8&#xA;Cy1MFtE0f11uXpcOciW4K1VVYstFLJJvzf8AMl7bWGnaP5RsrLSZr6y0i5uLy4S5gtPrF1FaLF9V&#xA;gWKGZ4/VHKKG4Pp0o/A0xRSfed5vJFpZny7qOtyXfmbVOGnxRW/oz6mFmHD07SBQIbIupoJeKKuz&#xA;OxK1xVjGueRZdF1mDUoXNr5n1eNLfTYhdS6jqNzNaSLcW0Cy3jSExpLGk97Ow4qiBFWhZ2Ush0zS&#xA;9Uh89qpvYZ/Mj2z3F1NLCjNNaW0Zt5qorxtGl1e3K+mnJV4Wy9SMVSKyXzt5fbVLS2u7K40zXdb+&#xA;qR65cSOL2HV754ra8nsYzH6brFzmWOP4eJiercaJirJ77Vb3yn+UfmXU7thFeaPa3llY3iVV5hZh&#xA;rWzlfwkkcAsd/iPhQAoeS/8AODd1GYPOFoSokVrCVR+0QRcKfmBQffih8z+bbC407zVrOn3I43Fn&#xA;fXNvMo7PFMyMPvGKl9Xf84dmPSPyr8y6/eMVtEv5pHAG/p2lrG7sKkA15kfRilR/5wgs508seZ70&#xA;qfQmvYIUahoXhiLOK9NhMuKE+/KX/nKjTvPPnJfLF9o/6KlvDKdKuVn9ZJDGpcRSApHxYopIau52&#xA;oMVeCf8AOUf5d2nk/wDMh7iwZzYeYEfUlVySY55JWE8YY9Ry+IeHKnbFXq//ADjdNB5q/IXzH5Tl&#xA;WOSfTbiVokuV9WALKFuYCyHsJ43JFPfvilmF35g81aneaLZ6JoTaZq9tqouNU1GQRrp1xfWME9jN&#xA;Z2tZGlWOeGylUS8fgUAULPgSmEthrNn53/SOm2MFvf2FlFp1pp6yk272CwmfTonaWOP0xLcR3cPO&#xA;gZH9P7QBR1Uh8v6V5rOsXHmfTL6/0wawks2qjTY457aS4kldizWV3HLI1zYMptp4UEcsiIHQ8uce&#xA;Ksq8seSLHUvKEbLLY63NLX9IvMTNaX06szvcI61ms5mkdulRCxekZJqVbSq2/Nf8u5LK60HzLZ6t&#xA;pkmiNcx/W5obq54fVJ2tZprK+tFa4McUqMnr0WlKMQdsUMc8ma/ovmDSNSt9U1TW9f0RrmfTrLVZ&#xA;b3UNM+swEsIgkjPa2c8rJIFdJHRyVJCMDil6Fb6NdyS/WLG5Gt3dpGI1e79bSNdWNKcRNOioLhf5&#xA;EmgRG2LOdyVCKn8/eTI4P0J51d9MM5MbQ+ZbeKCCbj8e9yoOnS9Ngkn44qx+98vflTccZND/ADBu&#xA;fLkJPL0NH19EtjX+WCd7iBB7RooxXd5h54m0fRoZGX/nILUWHEslraE6jOSOi8rOeMKSR+0VGKq/&#xA;5J/kTZ+cFu/NH5i2+s6nxum/Qx1mZ4Td2pHJJprblJMpJo39+yN/lAVYq+oLa2trS2itbWJILaBF&#xA;iggiUJGkaDiqIq0CqoFABihUxV2KsJ/Nn8qtD/MfyzJpF84s7xSHsdUSNZJYHX2PEsjftJyFfEHf&#xA;FXmdpbf85Hfl1pE8OneXvLev2FujSPNpds1tdSqleINtbi2DvToqRH54EpT5W/Nf/nI/z/5nn8r2&#xA;WlWXlF7MRTavqE9nMZ7KKUEpziundS8o3jQxgt1qFq2FXql3Y+TPIMC61r2twPrLo/qeY9emE15S&#xA;nxLaQ/CFU8qelbhB7MeoVI9N0tPM0R1v0L+HQdSBH1yZT+m9ZjboiCMRrp9lKAPsCMyLQt6Y3ZSo&#xA;65oOmeYb6Hy9Da2l9c6UIzD5dgYro2jKnIxS6k0PFZZl4/Bbrx5VI+x+8VVC6v5D+ofo3QPKGrvo&#xA;WpXl419LqNvBC1zdoqNFeXkiBES3t7eKZo7cIvHmUCBRRiqmOleV4n1iOew1jUrFTbXOs3mo+pHe&#xA;Xixusdnp4M9/Hdh0khhupFBHwlm40BxVj1t5Q83+V9N1bWbDUJX8xXWnXq69rkr/AFqaRrPT4pFM&#xA;DSkpzj1JngUcaenUU5KGCqo/lbzNPMtrZziKTRZ/MFz5StBUx+vb6pa+ld3HM1mlDXMykdCNqVLc&#xA;lU+/OWx1Kf8A5x68z2zTJeXsSyvcTQReijfV9R9SYrEGk4Kqo2xY0A3J64UPlv8A5xx/Ma18jfmV&#xA;a3OoyiHRtUjbT9RlY/DGsjBo5T2ASVF5HspbFD6r1f8A5xr/ACo8w+ZNW8zapazXs+t8ZRGlw8UE&#xA;TlFBmh9EoWaQjmS7MtT0xVhn5z3Wh/k5+RUPkPRHkkvNbWeyt55APUeKR+d9NKyqFJ4SiIDr8Qps&#xA;uKpz/wA4xeVbiL8g2iim+rXPmJ7+4jm48jE0g+qI5U05UEAancYpee/k5/zjB5+8u/mlY6v5iW3j&#xA;0bRJGuIrq3nD/WZApEQjWgkUByGb1FXYU74qwv8A5y484WmvfmmdPs5BJb+X7ZbCR1bkpuS7Sz0p&#xA;0KFxGw8VOKHon/OD1nIdM84zSLytp5bGEAj4SyJOXH3SLiqf2MnmqG1eybkLbzTqWiaqsqEfWdNv&#xA;r3UZS8irIrLNDx09P2hWteNGNAyXanqX5ia7c2HnTSY49N8x2mlWyRWcYNxZamtxZy6vRo3HPhzg&#xA;9KOj8lkrRyNyqnsdr5ysNd1K9N9ZaNqN5Jpt/qN1pYa5tLqC6Say5ehchask0EDuUPPgaB6tiqUe&#xA;X/J/mXVLzU7/AFH6t5c85NqUxe60O4vLa1nlSOMGz1FAQ9Ln/eiGQlyAyla/YZVFeWfLFvJBqGma&#xA;kbq/jivZL69spaR6/o1/cSNO95DJaBfrCPI5ZJ4V+IUUKQGAVRVtaWXlG9+sXVza22m6p+5/TyRj&#xA;9CakDWMQ6pBGQlnc1YgSp+5cknjyPphVmEnlHXLS0F35Kvl0O4UVXRbj/TNFm6sBHGpWW3Vi2zQF&#xA;B3MbYoeXa5/zlMfL2qT+WPzG8jz2d3GoW8S3miu4Zo2/3ZHHMsSvG+9PjPgTWuFWK6/beSvPSrL5&#xA;O/I/UppL+KtjqsofRbP4l+GX/R2+rOtf8sV8cCvU/wAh/wAhdJ8iaBDd65Y2V35vmb1Zr0KZTbgG&#xA;scUTyFlVk/aeNVqdvi4g4UPYMVdirsVdirsVdiryXzt/zjT5D8y6nqmtwT3uka9qayM93azuYvrD&#xA;rRZXhJ+IBqMUV1B9sU2821P/AJwzvLSxtbvSNch1rzFFexTT/phJILCS2QMzxtHD9ZlZnfiDV/s1&#xA;6HFWvzof/nIHQPKA1PzT51tbGwuby3svq+gQSJx9UMXkluOENwqKiNspbkaCmBU88l/mppdn5Yj8&#xA;sfk75Su9WgtUc3vmHVFWy00S8ay3l5cMayM3Es6koaCi7AAKqX5W+e9H8seX9X/ML8yNaivfM3mi&#xA;bhp0EVJLqbTreqW0dpaALJHHLIXYVVVpwLEHFUbo35+eToPKE/mOCD9JecPMUsz6f5Tsh69zBFp7&#xA;NFZwzCP+5ijSL12JA+27ICMVSm7/ADkstP8AJ35d2L3H1x9RuLHW/OepIhZLS3lv1mmM1A3D1Lxt&#xA;/ZSKfEuKpvdfnf8Al7Z/mzC7XAPk+w0u/s7XWY0D2L6m9xBf3McMiji/FIYuJU/bIA6g4qyn8oNU&#xA;1rzL5X1zQfO2mPY3V/JcXy2Mo4iTStbZ7hApqT8DSyROp+JKANvhV8a/mx+WGtfl35suNGvleWyY&#xA;mTS9QK8Uubcn4WHYOvR17H2oSoRvlb8/Pzb8r6RHpGjeYJItOhFLeCaK3ufSWlAsbXEcrKo7KDxH&#xA;hir2rV/z4/KH8yPyqurXz/aPD5k06D1YrOAMjy3YHBZLGcLIEDkjksg+EVqHC1xS8e0n/nIj81tI&#xA;8rWnlvTtVW2s9PeI2M8cMazxRwqwEPIDg8bcqt6isSQN+tVCM1D/AJyg/Oy+057GTX/RWVSklxb2&#xA;9vDOQRQ8ZI41KH/KShHY4q820nSdW1zVrfTdNt5L7U76QRwQRjk8jt/nUk9OpxV9x6Fp2kfkX+Sq&#xA;W2olru+lYy6gluCzyXVwo+sGIAGqW0CFidqrHU0rilHnzZ5ZvPznufKkeowSPqOi6be2xV0mpcWV&#xA;7PeoiFiy82huFlVabIAw2wKkVt+ZOnS+UPPkGlyRtq/5fXsrQwMwRJbLT7xrm1RW2bgEja2oG7f5&#xA;QxVONU/MDyLqPkvTvzBsr8XHlyyRtP162DVmhsdWeKCaGSOP94kkEwhfY1KK3HlyU4qlP5veYLrR&#xA;bfQ/zK8lG213Sr14NJ16xDobO+tJWP1WR5B+7ieCYlEl/ZZwD8NVxVC+YPzD/Lbz5ZrA+sy/l/8A&#xA;mNo6v+j5dVLafdWk5XeGWWT93LBL0dC1WG/EGmKsf8i/mx+cmu+UL+TUfItj520aV59P1ObT54bW&#xA;aWZVCSi4hHqrNyjI3ijClSN8VY35D/Kr/nJC10SfUfK2qXfliCK7lFl5Y1O4faAcWjZEdZIWNWKt&#xA;zjSvGu9aBV6non5I+edW8waB5r/MHzi2r3lhBW40QafaxQqZ4x69q8kTGOWPmKE+l8VKihNcK29n&#xA;tra2tbeO2tokgt4VCRQxqERFUUCqq0AA8BihUxV2KuxV2KuxV2KuxV2KuxVZPBBcRNDPGssLijxu&#xA;oZSPcHY4qoajpWn6jpVzpN5CJNPvIHtbi3BKBoZUMboChUrVTT4TirDfJH5Hflh5LulvtD0WNdSS&#xA;vHULl3uZ1rXdGlLCM0NKoF264qnPln8ufI/li8v7zQdGt7C71Nme9njUl35nkyAsW4pXfgtF9sVS&#xA;byv+R/5b+W/Lmr+XrLTPW0vXG5anHdO0ryqCTHHz2YLFX93Q1B3ry3xVOI/y38hpo2maKNCszpWj&#xA;zC506zaMNHHMoYepRq8nPMklqknc74qn88JkCsjcJUNY5KVp4gjaoPcfxpiqSeaPLvlXzVpbaN5q&#xA;06G6tZCCIZ6gc+gaGZeDK3upDYq8O1//AJwl8pXMxfQvMN7piEbxXUUd4oNf2SptmpTsSfniryjz&#xA;p/ziV+Z3l2wl1CyNtr1rCC0kdiZPrIVep9CRV5fJGY+2Ksd/Lz/nHv8AMvzyrXFhYrp2nIxQ6hqR&#xA;e3iLCtQihHkfpSqoQD1IxV7Jof8Azg/AFhk17zSzMd57axtgoG/RJpXau3cxfRir2n8vfyn/AC7/&#xA;AC6WSPy9ZGTVJVCz3kzCe9devEtRRGh2rxCr0riqBm/Oj8oZ72W31LV4ZkZn097l7W4k05TIeEkJ&#xA;vDEbZg9PibnxIGKaQUf/ADjL+VieXtT0i3guUXUrlLyHUPWDXVo0KcIEtZipIjjBbiH5faNSdqK2&#xA;lnmH/nF3yzd+VdL0Ty/qdxod1YRPZ3uqIoklvrOeX1p4boK0POsvxpU0XpSnRW0283/842flv5j1&#xA;CG+SKfR35RDUIdPcRw3kcJBVLiJldGNV+0BU96nFbSzzb/zjD5e1Bb5PKut33lG11TbU9Ks2MmnT&#xA;g9a2nKMA/JuI7KMVtnmoflf5O1vy9p2j+Z9Ph15tOtYrVb+7T/SW9JAhf1lIkUuRybi3XFCZ+UvJ&#xA;vlnyhpA0jy5YJp2nCRpTChd6yPQM7PIzuxIUCpPQYqnOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KtMqspVgCpFCDuCDiqH/RtkP7uL0fEwkxV+fpla/TirTQ3kQ5QzGYD/AHTNTceC&#xA;uoBB92r/ABxVsC9n3ZjaR/sqvBpSf8okOgHsK/Ptirv0dan+9DT+IlZpFr48GJQH5DFWO/mdpWrX&#xA;f5aeZdN8vIE1K4065jtYo03cvGeUaAftyLVVPia4q+S/LreU7TzEPM10sH+EJtSvrSby3HPEuqCB&#xA;rERW1vNaGTnJE0jtGUWLkCC24IwMn1n+U2l61pP5aeWtO1on9J2unwR3Ebgho6J8ELV/aiSiN7jC&#xA;xZZirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VYx/yDL/ABV/0pf8WV2/3k/SPKv/ACPrXFLJ8UOxV2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>18.000000</stDim:w>
            <stDim:h>12.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">QB_Wings_Banner.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:FB7F1174072068118083F1F5822C28AE</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FB7F1174072068118083F1F5822C28AE</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:ecf60a87-5d05-4f40-a934-02f2ed5f1be3</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:FA7F1174072068118083F1F5822C28AE</stRef:instanceID>
            <stRef:documentID>xmp.did:FA7F1174072068118083F1F5822C28AE</stRef:documentID>
            <stRef:originalDocumentID>uuid:ecf60a87-5d05-4f40-a934-02f2ed5f1be3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F1174072068118083F1F5822C28AE</stEvt:instanceID>
                  <stEvt:when>2018-10-09T15:28:34-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F1174072068118083F1F5822C28AE</stEvt:instanceID>
                  <stEvt:when>2018-10-09T15:45:24-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -204.457 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 204.457 li
720.035 204.457 li
720.035 0 li
cp
clp
700.382 72.3481 mo
676.502 76.2798 625.79 58.3325 572.55 49.0371 cv
572.058 48.0503 571.033 47.1909 569.346 46.5474 cv
568.901 46.3779 568.409 46.2222 567.87 46.0845 cv
567.369 45.9565 566.79 45.8364 566.129 45.7266 cv
566.069 45.7153 li
565.819 45.6992 li
555.042 45.8311 545.159 42.1265 534.981 38.312 cv
529.544 36.2739 524.022 34.2041 518.243 32.6538 cv
508.616 30.0488 498.155 28.4521 488.797 29.8887 cv
479.236 31.3569 470.846 35.9497 465.644 45.7524 cv
465.622 45.8022 li
465.548 45.9526 li
461.184 54.9922 458.276 61.0122 454.4 63.4331 cv
454.401 63.4365 li
452.769 64.4468 450.934 65.0435 448.979 65.2944 cv
446.443 65.6201 443.705 65.3657 440.926 64.6855 cv
440.799 71.188 442.073 79.8184 444.969 92.5474 cv
445.511 94.9292 li
448.74 109.11 450.688 117.671 450.98 124.97 cv
451.28 132.448 448.402 147.861 442.418 156.172 cv
441.528 157.41 li
441.27 157.771 441.019 158.121 440.77 158.468 cv
440.818 158.413 440.859 158.37 440.91 158.313 cv
440.907 158.312 li
442.218 156.861 444.05 154.831 446.2 153.421 cv
446.621 154.565 447.273 155.941 448.051 157.325 cv
449.089 159.169 450.377 161.098 451.665 162.568 cv
453.146 164.263 454.723 165.396 456.155 165.331 cv
456.576 165.313 456.973 165.205 457.338 164.998 cv
457.958 164.649 li
458.05 163.938 li
458.139 163.239 458.605 162.08 459.254 160.851 cv
459.888 159.65 460.677 158.436 461.45 157.555 cv
461.454 157.557 li
461.833 157.126 462.152 156.79 462.36 156.625 cv
462.583 156.917 462.831 157.252 463.099 157.613 cv
465.972 161.491 470.949 168.205 474.961 165.274 cv
475.411 164.72 li
475.903 163.648 476.65 162.436 477.394 161.229 cv
478.555 159.343 479.707 157.469 480.118 155.78 cv
482.413 159.672 486.007 165.44 489.591 168.438 cv
489.597 168.444 li
489.655 168.492 li
490.683 168.814 li
491.608 168.733 492.512 168.23 493.348 167.225 cv
493.494 167.046 493.634 166.863 493.764 166.676 cv
493.893 166.489 494.024 166.282 494.158 166.054 cv
494.188 166.005 li
494.198 165.993 li
495.744 163.297 495.881 159.304 495.956 157.063 cv
495.976 156.436 495.918 156.156 495.955 156.075 cv
495.953 156.073 li
495.979 156.022 496.001 155.972 496.024 155.918 cv
496.151 156.02 li
499.943 158.99 507.439 164.863 511.378 166.177 cv
511.386 166.18 li
512.203 166.201 li
512.394 166.149 512.628 166.092 512.837 166.04 cv
512.843 166.04 li
514.054 165.742 514.674 165.59 515.272 164.474 cv
515.699 163.678 515.896 162.521 516.301 160.15 cv
516.503 158.972 li
516.503 158.966 li
516.532 158.789 516.558 158.641 516.579 158.527 cv
517.648 158.696 519.45 159.85 521.62 161.238 cv
521.619 161.24 li
525.249 163.564 529.813 166.484 534.945 167.234 cv
534.952 167.234 li
535.052 167.25 li
535.068 167.25 li
538.093 167.653 540.342 167.472 541.407 166.092 cv
542.495 164.677 542.107 162.425 539.712 158.873 cv
539.705 158.867 li
538.197 156.65 536.463 153.142 535.203 149.498 cv
537.564 151.189 540.706 153.121 543.928 154.854 cv
545.087 155.476 546.305 156.104 547.548 156.713 cv
548.801 157.327 549.977 157.874 551.022 158.324 cv
551.028 158.324 li
551.108 158.357 li
551.109 158.355 li
553.107 159.222 557.009 160.806 560.64 161.532 cv
564.815 162.367 568.726 162.086 569.927 158.689 cv
569.927 158.684 li
571.056 155.453 568.182 151.316 565.252 147.988 cv
568.264 149.283 571.302 150.297 574.374 151.054 cv
579.095 152.222 583.901 152.789 588.824 152.865 cv
588.892 152.865 li
590.361 152.813 591.406 152.595 592.112 152.229 cv
593.148 151.695 593.589 150.928 593.577 149.958 cv
593.865 148.287 592.953 146.426 591.567 144.448 cv
593.121 145.322 594.714 146.129 596.342 146.842 cv
600.59 148.703 605.089 149.94 609.787 150.11 cv
609.988 147.284 li
608.555 147.128 606.809 146.577 604.886 145.747 cv
605.924 145.88 606.949 145.978 607.964 146.041 cv
612.014 146.297 615.891 146.017 619.813 145.279 cv
619.813 145.28 li
624.45 144.479 626.007 143.353 625.642 141.231 cv
625.417 139.925 624.222 138.613 622.528 136.753 cv
622.092 136.275 621.617 135.753 621.047 135.104 cv
620.811 134.776 620.385 134.303 619.844 133.749 cv
620.517 133.979 621.192 134.196 621.874 134.397 cv
625.328 135.417 628.92 136.057 632.746 136.189 cv
633.062 133.38 li
631.22 133.014 629.521 132.521 627.897 131.925 cv
634.233 132.259 642.136 131.724 648.696 129.47 cv
650.858 128.727 652.896 127.791 654.714 126.63 cv
656.558 125.452 658.158 124.047 659.413 122.381 cv
659.415 122.384 li
659.438 122.353 li
659.819 121.85 li
659.699 121.23 li
659.54 120.411 658.058 119.589 655.97 118.812 cv
658.613 118.661 661.241 118.222 663.88 117.348 cv
663.482 114.844 li
663.928 114.749 li
667.933 113.88 671.874 112.617 675.918 110.563 cv
675.919 110.566 li
679.154 109.209 682.087 107.444 683.515 105.808 cv
684.245 104.969 684.65 104.099 684.632 103.228 cv
684.609 102.209 684.081 101.344 682.927 100.715 cv
681.943 100.179 680.359 99.8003 678.04 99.6533 cv
681.177 99.1558 684.313 98.4028 687.479 97.3081 cv
687.481 97.312 li
692.167 95.6997 697.157 93.165 699.626 90.7832 cv
700.684 89.7637 701.352 88.7036 701.472 87.6519 cv
701.522 87.2061 701.488 86.7793 701.362 86.3799 cv
720.705 81.9321 731.66 70.0566 700.382 72.3481 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 1 1 1 cmyk
ef
273.158 124.97 mo
273.451 117.671 275.399 109.11 278.628 94.9292 cv
279.169 92.5474 li
279.404 91.5151 279.628 90.5107 279.841 89.5313 cv
279.979 88.9014 280.105 88.2988 280.234 87.6895 cv
280.305 87.3545 280.381 87.0063 280.449 86.6777 cv
280.585 86.0244 280.709 85.3984 280.834 84.7695 cv
280.887 84.5044 280.945 84.2266 280.996 83.9658 cv
281.129 83.2871 281.25 82.6343 281.371 81.9839 cv
281.406 81.793 281.446 81.5923 281.48 81.4038 cv
281.613 80.6729 281.735 79.9658 281.853 79.2695 cv
281.868 79.1753 281.887 79.0757 281.902 78.9824 cv
282.022 78.2622 282.132 77.5645 282.235 76.8794 cv
282.245 76.8164 282.256 76.749 282.266 76.6855 cv
282.375 75.9565 282.473 75.248 282.563 74.5571 cv
282.565 74.5444 282.567 74.5308 282.568 74.5176 cv
282.66 73.8149 282.741 73.1313 282.813 72.4663 cv
282.813 72.4648 282.813 72.4634 282.814 72.4619 cv
283.391 67.125 283.348 62.9692 282.744 59.4663 cv
278.749 60.9434 274.694 61.6631 271.056 61.1973 cv
269.101 60.9458 267.267 60.3477 265.635 59.3379 cv
265.635 59.3364 li
261.759 56.9136 258.852 50.8945 254.486 41.855 cv
254.413 41.7041 li
254.392 41.6543 li
249.189 31.8516 240.8 27.2588 231.239 25.7905 cv
221.879 24.3535 211.42 25.9512 201.793 28.5562 cv
196.013 30.1055 190.491 32.1758 185.053 34.2139 cv
174.876 38.0288 164.994 41.7344 154.217 41.6006 cv
153.966 41.6172 li
153.906 41.6279 li
153.906 41.6289 li
153.246 41.7383 152.667 41.8579 152.165 41.9873 cv
151.626 42.1245 151.136 42.2803 150.689 42.4497 cv
149.003 43.0938 147.978 43.9526 147.486 44.9385 cv
94.2441 54.2349 43.5322 72.1816 19.6533 68.25 cv
-11.625 65.9585 -.668945 77.8345 18.6729 82.2808 cv
18.5469 82.6812 18.5127 83.1069 18.5635 83.5537 cv
18.6846 84.605 19.3516 85.6655 20.4102 86.686 cv
22.8779 89.0664 27.8672 91.6025 32.5547 93.2148 cv
32.5557 93.209 li
35.7217 94.3047 38.8584 95.0571 41.9971 95.5566 cv
39.6758 95.7026 38.0918 96.0796 37.1084 96.6162 cv
35.9541 97.2456 35.4258 98.1089 35.4033 99.1284 cv
35.3857 100.001 35.79 100.871 36.5205 101.709 cv
37.9473 103.346 40.8809 105.111 44.1162 106.469 cv
44.1162 106.467 li
48.1611 108.52 52.1025 109.782 56.1074 110.652 cv
56.5527 110.746 li
56.1553 113.249 li
58.7939 114.123 61.4229 114.563 64.0645 114.713 cv
61.9775 115.49 60.4961 116.313 60.3369 117.133 cv
60.2168 117.751 li
60.5977 118.255 li
60.6211 118.285 li
60.623 118.282 li
61.877 119.948 63.4766 121.353 65.3213 122.532 cv
67.1387 123.693 69.1758 124.629 71.3389 125.372 cv
77.8994 127.625 85.8027 128.162 92.1377 127.826 cv
90.5156 128.422 88.8154 128.916 86.9736 129.281 cv
87.29 132.092 li
91.1152 131.957 94.7061 131.319 98.1602 130.299 cv
98.8428 130.098 99.5195 129.881 100.191 129.65 cv
99.6504 130.205 99.2246 130.678 98.9893 131.007 cv
98.417 131.655 97.9434 132.178 97.5078 132.655 cv
95.8135 134.515 94.6182 135.826 94.3936 137.132 cv
94.0273 139.254 95.585 140.382 100.222 141.183 cv
100.222 141.18 li
104.145 141.919 108.022 142.199 112.071 141.943 cv
113.085 141.88 114.11 141.781 115.15 141.648 cv
113.227 142.478 111.48 143.029 110.048 143.186 cv
110.248 146.014 li
114.947 145.841 119.445 144.605 123.693 142.744 cv
125.321 142.031 126.914 141.224 128.468 140.351 cv
127.082 142.329 126.17 144.189 126.458 145.861 cv
126.446 146.83 126.886 147.598 127.923 148.132 cv
128.629 148.497 129.673 148.715 131.144 148.766 cv
131.211 148.766 li
136.135 148.691 140.941 148.123 145.662 146.956 cv
148.734 146.197 151.771 145.185 154.784 143.891 cv
151.853 147.221 148.979 151.354 150.108 154.586 cv
150.108 154.592 li
151.311 157.989 155.22 158.27 159.396 157.434 cv
163.026 156.708 166.928 155.124 168.926 154.258 cv
168.927 154.26 li
169.007 154.227 li
169.012 154.227 li
170.06 153.777 171.234 153.229 172.486 152.615 cv
173.73 152.006 174.949 151.378 176.107 150.755 cv
179.329 149.023 182.471 147.092 184.832 145.4 cv
183.572 149.042 181.839 152.554 180.329 154.77 cv
180.323 154.775 li
177.928 158.327 177.54 160.578 178.629 161.993 cv
179.693 163.373 181.942 163.556 184.967 163.151 cv
184.984 163.151 li
185.084 163.137 li
185.09 163.137 li
190.223 162.387 194.785 159.466 198.417 157.143 cv
198.415 157.14 li
200.585 155.751 202.387 154.598 203.456 154.43 cv
203.478 154.543 203.503 154.69 203.532 154.868 cv
203.532 154.874 li
203.735 156.053 li
204.139 158.424 204.337 159.58 204.762 160.375 cv
205.36 161.491 205.982 161.645 207.193 161.942 cv
207.198 161.942 li
207.408 161.994 207.641 162.051 207.833 162.104 cv
208.649 162.081 li
208.657 162.08 li
212.596 160.766 220.092 154.892 223.884 151.921 cv
224.012 151.819 li
224.034 151.874 224.057 151.925 224.082 151.976 cv
224.081 151.978 li
224.117 152.059 224.06 152.335 224.079 152.963 cv
224.155 155.207 224.29 159.198 225.837 161.896 cv
225.849 161.907 li
225.877 161.956 li
226.011 162.185 226.143 162.393 226.271 162.578 cv
226.401 162.766 226.541 162.949 226.688 163.126 cv
227.524 164.133 228.427 164.636 229.353 164.716 cv
230.38 164.394 li
230.438 164.345 li
230.443 164.34 li
234.027 161.343 237.622 155.574 239.917 151.684 cv
240.328 153.37 241.479 155.244 242.642 157.132 cv
243.384 158.337 244.132 159.55 244.624 160.621 cv
245.073 161.177 li
249.086 164.107 254.063 157.393 256.937 153.515 cv
257.206 153.153 257.452 152.82 257.676 152.526 cv
257.883 152.692 258.202 153.028 258.581 153.459 cv
258.585 153.456 li
259.358 154.338 260.147 155.553 260.781 156.753 cv
261.43 157.981 261.896 159.141 261.985 159.84 cv
262.077 160.552 li
262.697 160.9 li
263.063 161.107 263.46 161.215 263.879 161.233 cv
265.313 161.298 266.889 160.164 268.37 158.471 cv
269.658 157 270.946 155.07 271.984 153.228 cv
272.763 151.843 273.414 150.468 273.836 149.323 cv
275.985 150.733 277.818 152.764 279.128 154.214 cv
279.125 154.216 li
279.69 154.843 280.167 155.37 280.586 155.756 cv
280.596 155.767 li
280.837 155.983 281.102 156.141 281.385 156.238 cv
281.386 156.233 li
281.537 156.285 281.688 156.315 281.837 156.335 cv
281.721 156.172 li
275.736 147.861 272.858 132.448 273.158 124.97 cv
cp
ef
282.96 75.6294 mo
279.112 81.8467 274.782 83.9268 270.025 82.6421 cv
277.674 86.2661 280.422 81.1006 282.96 75.6294 cv
282.96 75.6294 li
cp
ef
439.328 43.8843 mo
439.256 42.4819 438.389 40.7407 435.419 37.8521 cv
414.694 17.6978 li
411.463 14.5581 409.566 14.2959 409.836 14.4346 cv
409.657 14.3433 408.84 13.9541 407.61 13.9038 cv
406.086 13.8374 403.931 14.2925 401.572 16.4756 cv
400.826 17.1812 li
398.757 19.1606 395.627 22.1538 391.455 22.4893 cv
384.494 23.0503 375.714 19.3496 369.361 16.9141 cv
366.391 15.7749 364.241 14.9766 362.992 14.9766 cv
361.674 14.9766 359.351 15.8667 356.118 17.1069 cv
349.868 19.5073 341.351 23.0381 334.529 22.4893 cv
330.355 22.1538 327.227 19.1606 325.156 17.1802 cv
323.424 15.54 321.317 13.9434 318.55 13.9204 cv
317.813 13.9141 317.074 14.0386 316.365 14.3325 cv
316.636 14.2212 314.111 14.6382 309.821 18.9248 cv
288.55 40.1655 li
286.968 41.7451 286.649 43.0103 286.649 44.0454 cv
286.649 44.0889 286.654 44.1348 286.655 44.1787 cv
286.713 45.4595 287.597 46.9717 289.677 50.4014 cv
292.039 54.2974 295.275 59.6318 295.974 63.5142 cv
297.044 69.4468 296.176 77.5928 292.983 91.6313 cv
292.526 93.6426 li
289.8 105.62 288.154 112.849 287.906 119.014 cv
287.654 125.328 290.084 138.345 295.139 145.363 cv
295.888 146.406 li
299.887 151.991 302.302 155.36 312.457 161.629 cv
317.892 164.981 324.011 166.109 331.099 167.416 cv
334.593 168.056 338.553 168.787 342.878 169.864 cv
353.251 172.45 353.625 172.73 354.729 173.563 cv
355.151 173.88 355.731 174.315 356.638 174.874 cv
358.203 175.842 358.881 176.491 359.376 176.965 cv
360.072 177.635 361.026 178.55 362.992 178.55 cv
364.973 178.55 365.927 177.631 366.623 176.96 cv
367.112 176.485 367.784 175.838 369.347 174.874 cv
370.253 174.315 370.832 173.88 371.254 173.563 cv
372.359 172.73 372.733 172.45 383.106 169.864 cv
387.431 168.787 391.392 168.059 394.885 167.416 cv
401.972 166.109 408.093 164.981 413.525 161.629 cv
423.683 155.36 426.097 151.992 430.095 146.409 cv
430.846 145.363 li
435.9 138.345 438.329 125.328 438.077 119.014 cv
437.833 112.849 436.185 105.62 433.458 93.6426 cv
432.999 91.6313 li
429.808 77.5918 428.94 69.4468 430.01 63.5142 cv
430.708 59.6318 433.945 54.2974 436.307 50.4014 cv
438.46 46.8501 439.333 45.3569 439.333 44.0454 cv
439.333 43.9922 439.331 43.9395 439.328 43.8843 cv
439.328 43.8843 li
cp
ef
.50003 lw
0 lc
0 lj
2.6131 ml
[] 0 dsh
true sadj
439.328 43.8843 mo
439.256 42.4819 438.389 40.7407 435.419 37.8521 cv
414.694 17.6978 li
411.463 14.5581 409.566 14.2959 409.836 14.4346 cv
409.657 14.3433 408.84 13.9541 407.61 13.9038 cv
406.086 13.8374 403.931 14.2925 401.572 16.4756 cv
400.826 17.1812 li
398.757 19.1606 395.627 22.1538 391.455 22.4893 cv
384.494 23.0503 375.714 19.3496 369.361 16.9141 cv
366.391 15.7749 364.241 14.9766 362.992 14.9766 cv
361.674 14.9766 359.351 15.8667 356.118 17.1069 cv
349.868 19.5073 341.351 23.0381 334.529 22.4893 cv
330.355 22.1538 327.227 19.1606 325.156 17.1802 cv
323.424 15.54 321.317 13.9434 318.55 13.9204 cv
317.813 13.9141 317.074 14.0386 316.365 14.3325 cv
316.636 14.2212 314.111 14.6382 309.821 18.9248 cv
288.55 40.1655 li
286.968 41.7451 286.649 43.0103 286.649 44.0454 cv
286.649 44.0889 286.654 44.1348 286.655 44.1787 cv
286.713 45.4595 287.597 46.9717 289.677 50.4014 cv
292.039 54.2974 295.275 59.6318 295.974 63.5142 cv
297.044 69.4468 296.176 77.5928 292.983 91.6313 cv
292.526 93.6426 li
289.8 105.62 288.154 112.849 287.906 119.014 cv
287.654 125.328 290.084 138.345 295.139 145.363 cv
295.888 146.406 li
299.887 151.991 302.302 155.36 312.457 161.629 cv
317.892 164.981 324.011 166.109 331.099 167.416 cv
334.593 168.056 338.553 168.787 342.878 169.864 cv
353.251 172.45 353.625 172.73 354.729 173.563 cv
355.151 173.88 355.731 174.315 356.638 174.874 cv
358.203 175.842 358.881 176.491 359.376 176.965 cv
360.072 177.635 361.026 178.55 362.992 178.55 cv
364.973 178.55 365.927 177.631 366.623 176.96 cv
367.112 176.485 367.784 175.838 369.347 174.874 cv
370.253 174.315 370.832 173.88 371.254 173.563 cv
372.359 172.73 372.733 172.45 383.106 169.864 cv
387.431 168.787 391.392 168.059 394.885 167.416 cv
401.972 166.109 408.093 164.981 413.525 161.629 cv
423.683 155.36 426.097 151.992 430.095 146.409 cv
430.846 145.363 li
435.9 138.345 438.329 125.328 438.077 119.014 cv
437.833 112.849 436.185 105.62 433.458 93.6426 cv
432.999 91.6313 li
429.808 77.5918 428.94 69.4468 430.01 63.5142 cv
430.708 59.6318 433.945 54.2974 436.307 50.4014 cv
438.46 46.8501 439.333 45.3569 439.333 44.0454 cv
439.333 43.9922 439.331 43.9395 439.328 43.8843 cv
439.328 43.8843 li
cp
0 0 0 1 cmyk
@
382.384 64.4194 mo
384.625 85.873 li
385.315 92.4888 391.221 90.873 394.317 87.5518 cv
398.57 82.9907 401.161 75.8584 400.229 70.3838 cv
398.759 61.7607 389.222 59.4712 382.384 64.4194 cv
382.384 64.4194 li
cp
381.998 124.498 mo
384.658 104.418 li
386.758 101.818 390.796 102.337 393.787 103.173 cv
404.901 106.281 405.404 129.161 394.16 131.246 cv
390.503 131.924 386.218 129.525 382.641 127.026 cv
381.451 126.195 381.81 125.927 381.998 124.498 cv
381.998 124.498 li
cp
363.122 51.5273 mo
375.211 75.9102 374.028 106.684 364.615 141.421 cv
375.366 145.9 li
377.158 140.823 li
388.674 144.138 405.287 149.75 413.613 127.613 cv
420.374 109.638 413.206 101.214 408.888 98.1509 cv
407.473 97.1465 407.314 95.6743 407.999 94.3076 cv
411.585 87.1504 412.176 86.1768 412.749 80.4277 cv
413.95 68.3589 410.739 59.2271 404.834 54.2134 cv
398.93 49.2007 389.681 48.2578 376.86 52.4233 cv
372.978 45.5547 li
363.122 51.5273 li
363.122 51.5273 li
cp
1 1 1 1 cmyk
ef
323.91 125.043 mo
332.511 118.063 337.025 119.577 341.577 125.584 cv
345.786 119.26 348.563 108.461 348.563 96.2002 cv
348.563 76.7168 341.557 60.917 332.919 60.917 cv
324.281 60.917 317.275 76.7168 317.275 96.2002 cv
317.275 108.117 319.898 118.654 323.91 125.043 cv
323.91 125.043 li
cp
332.907 50.5991 mo
339.868 50.5991 346.327 54.7559 351.299 61.6787 cv
356.471 68.8799 360.209 79.3228 361.081 91.5601 cv
362.014 104.662 359.522 117.297 354.536 126.938 cv
353.165 129.591 351.615 131.991 349.917 134.09 cv
349.932 134.163 349.945 134.237 349.956 134.312 cv
350.781 139.824 355.344 143.468 361.604 146.261 cv
355.089 156.145 li
349.348 153.701 343.711 149.773 338.307 142.584 cv
336.496 143.164 334.621 143.466 332.694 143.458 cv
323.858 143.423 316.11 136.907 310.961 126.791 cv
306.052 117.146 303.649 104.523 304.636 91.457 cv
305.558 79.2539 309.309 68.8423 314.489 61.6572 cv
319.472 54.7476 325.946 50.5991 332.907 50.5991 cv
332.907 50.5991 li
cp
ef
435.348 188.327 mo
436.667 188.327 li
438.545 188.327 439.71 188.254 440.168 188.112 cv
440.618 187.964 440.976 187.715 441.238 187.352 cv
441.507 186.987 441.635 186.577 441.635 186.119 cv
441.635 185.668 441.507 185.271 441.251 184.928 cv
440.996 184.578 440.632 184.328 440.154 184.174 cv
439.683 184.025 438.519 183.951 436.667 183.951 cv
435.348 183.951 li
435.348 188.327 li
435.348 188.327 li
cp
432.089 197.436 mo
432.089 181.407 li
435.348 181.407 li
438.397 181.407 440.107 181.421 440.471 181.447 cv
441.548 181.535 442.39 181.75 442.988 182.087 cv
443.587 182.424 444.086 182.936 444.482 183.622 cv
444.887 184.315 445.089 185.083 445.089 185.924 cv
445.089 187.075 444.712 188.064 443.951 188.886 cv
443.197 189.714 442.133 190.219 440.767 190.421 cv
441.251 190.603 441.628 190.805 441.891 191.021 cv
442.153 191.235 442.517 191.646 442.975 192.252 cv
443.096 192.407 443.486 193.061 444.159 194.204 cv
446.051 197.436 li
442.032 197.436 li
440.686 194.837 li
439.784 193.087 439.03 191.982 438.438 191.532 cv
437.852 191.081 437.098 190.852 436.189 190.852 cv
435.348 190.852 li
435.348 197.436 li
432.089 197.436 li
432.089 197.436 li
cp
438.936 177.206 mo
436.855 177.206 434.862 177.725 432.958 178.762 cv
431.053 179.798 429.552 181.293 428.454 183.238 cv
427.351 185.184 426.805 187.224 426.805 189.351 cv
426.805 191.472 427.344 193.491 428.414 195.409 cv
429.484 197.328 430.979 198.829 432.897 199.906 cv
434.815 200.983 436.828 201.521 438.936 201.521 cv
441.05 201.521 443.063 200.983 444.98 199.906 cv
446.893 198.829 448.388 197.328 449.464 195.409 cv
450.542 193.491 451.08 191.472 451.08 189.351 cv
451.08 187.224 450.534 185.184 449.438 183.238 cv
448.34 181.293 446.832 179.798 444.92 178.762 cv
443.009 177.725 441.009 177.206 438.936 177.206 cv
438.936 177.206 li
cp
438.915 174.244 mo
441.507 174.244 443.991 174.891 446.367 176.189 cv
448.751 177.482 450.622 179.34 451.982 181.757 cv
453.342 184.181 454.021 186.712 454.021 189.351 cv
454.021 191.982 453.355 194.494 452.022 196.877 cv
450.683 199.26 448.825 201.125 446.435 202.458 cv
444.052 203.79 441.541 204.457 438.915 204.457 cv
436.283 204.457 433.779 203.79 431.39 202.458 cv
429.006 201.125 427.142 199.26 425.809 196.877 cv
424.476 194.494 423.81 191.982 423.81 189.351 cv
423.81 186.712 424.489 184.181 425.849 181.757 cv
427.209 179.34 429.08 177.482 431.456 176.189 cv
433.84 174.891 436.323 174.244 438.915 174.244 cv
438.915 174.244 li
cp
f
475.585 136.722 mo
475.336 135.734 472.623 123.271 474.965 124.29 cv
475.452 124.467 476.79 124.706 477.511 126.184 cv
480.29 132.065 483.899 146.457 487.233 150.608 cv
488.968 152.792 481.617 139.335 481.91 128.921 cv
482.009 125.857 483.735 122.911 485.294 120.904 cv
486.469 130.143 490.303 139.89 491.293 148.634 cv
491.819 153.312 491.72 159.182 489.4 161.636 cv
487.329 160.521 484.128 154.426 479.635 146.62 cv
477.899 143.622 476.567 140.335 475.585 136.722 cv
475.585 136.722 li
cp
0 0 0 0 cmyk
ef
483.585 88.0649 mo
482.999 86.8032 481.101 83.5698 482.411 83.3833 cv
484.93 82.9795 484.467 85.2212 486.871 88.604 cv
489.419 92.248 491.948 93.1143 492.858 95.7817 cv
494.711 93.939 484.931 87.0083 485.915 82.7314 cv
486.484 82.5571 488.394 81.9751 489.999 80.4893 cv
492.064 84.1235 497.033 87.0952 498.806 90.5664 cv
500.179 93.271 499.199 97.3081 495.178 102.034 cv
490.063 98.3926 486.412 93.938 483.585 88.0649 cv
483.585 88.0649 li
cp
ef
495.05 129.039 mo
497.107 134.905 500.949 141.892 503.969 146.436 cv
500.909 140.197 497.106 132.22 494.69 125.697 cv
494.775 123.355 499.927 125.071 502.367 125.305 cv
503.648 128.841 505.731 136.189 506.118 137.68 cv
507.668 144.861 514.136 150.298 511.414 158.004 cv
510.044 161.2 505.506 156.616 502.427 154.961 cv
493.301 150.073 488.674 133.346 487.878 123.681 cv
487.816 120.262 488.786 120.854 490.022 122.935 cv
492.229 126.546 497.863 144.747 504.78 151.23 cv
501.253 145.194 496.305 136.584 495.05 129.039 cv
495.05 129.039 li
cp
ef
487.696 104.188 mo
490.214 109.807 494.646 115.942 498.754 119.86 cv
493.915 113.197 488.679 105.117 485.622 98.229 cv
485.599 97.9688 483.755 93.4302 483.713 93.1987 cv
485.274 94.814 489.988 102.124 492.625 103.187 cv
494.84 111.4 503.453 113.695 502.63 123.291 cv
494.21 121.538 488.285 119.121 483.763 111.418 cv
482.431 109.066 478.137 96.4761 483.346 96.7656 cv
483.382 100.453 488.044 113.625 495.761 118.55 cv
492.334 114.415 489.497 109.552 487.696 104.188 cv
487.696 104.188 li
cp
ef
474.606 82.79 mo
474.609 87.2271 476.101 93.1475 477.551 97.085 cv
476.646 92.3052 475.564 86.2637 475.301 81.4424 cv
475.611 81.1709 476.029 81.0967 476.544 81.2915 cv
477.104 81.6001 478.325 81.5972 478.739 82.1699 cv
484.017 88.7324 479.398 110.209 470.784 100.551 cv
469.113 98.4526 468.078 96.0225 467.345 93.3965 cv
466.964 92.0742 466.225 88.752 467.584 88.8447 cv
469.083 88.9116 470.187 86.0996 470.767 87.1958 cv
472.498 90.4346 473.523 94.6885 476.048 98.0732 cv
475.657 95.8896 473.678 86.5776 474.606 82.79 cv
474.606 82.79 li
cp
ef
468.065 130.226 mo
468.499 137.199 470.248 145.496 471.992 151.347 cv
470.596 142.076 468.877 129.937 468.882 121.398 cv
469.213 120.164 469.679 119.553 470.278 120.092 cv
471.908 121.553 472.407 127.554 473.137 133.635 cv
474.042 141.1 478.04 147.218 475.214 154.201 cv
473.879 157.461 472.256 160.317 469.305 157.896 cv
461.616 151.936 462.526 144.961 461.196 138.747 cv
458.961 134.423 459.549 118.969 465.211 128.891 cv
465.283 129.022 467.815 148.114 470.685 153.284 cv
469.749 147.793 468.646 142.306 468.137 136.784 cv
468.061 135.959 468.005 133.235 468.065 130.226 cv
468.065 130.226 li
cp
ef
470.884 103.916 mo
471.399 107.732 474.713 114.718 476.887 118.022 cv
475.188 114.153 473.41 108.114 472.314 104.139 cv
473.874 104.41 477.232 105.488 479.008 103.348 cv
479.419 106.848 483.723 118.021 482.575 122.063 cv
481.731 122.166 481.158 125.793 479.762 125.637 cv
477.381 123.857 474.454 121.168 473.524 120.806 cv
469.785 119.342 466.409 107.595 465.999 106.373 cv
464.888 103.118 464.108 101.436 467.903 101.066 cv
467.365 107.039 473.302 114.874 475.992 118.781 cv
474.118 115.28 468.396 106.496 469.41 102.116 cv
469.42 102.043 470.846 103.971 470.884 103.916 cv
470.884 103.916 li
cp
ef
703.767 74.3403 mo
680.664 77.7339 629.614 67.062 566.113 48.8721 cv
566.109 48.8716 li
565.628 48.4414 564.546 48.1704 562.576 48.1099 cv
556.76 47.6401 551.701 46.8447 546.58 45.4351 cv
533.889 41.9287 523.129 34.8857 509.87 32.897 cv
491.716 30.2241 470.413 33.5356 465.099 51.2769 cv
462.885 55.9189 460.974 60.2412 458.786 62.6245 cv
465.103 58.5186 468.729 43.5513 482.273 42.8516 cv
470.156 44.4229 467.17 61.626 459.98 65.8159 cv
453.981 69.3193 447.014 69.4541 440.993 68.4526 cv
441.278 73.7886 442.328 80.4473 444.218 89.1631 cv
446.457 89.5112 449.277 88.9243 452.872 86.7793 cv
453.128 86.4692 460.375 74.3066 459.536 82.3481 cv
459.02 87.3564 468.706 86.9414 471.031 83.7183 cv
473.162 79.9551 472.746 71.2041 478.68 72.7314 cv
473.104 83.3706 493.064 83.6807 491.168 71.2148 cv
490.947 69.7183 490.257 68.1392 488.889 66.6572 cv
492.236 60.4458 502.434 75.5986 506.141 62.1528 cv
506.923 58.75 504.495 55.1079 504.844 52.5034 cv
497.443 50.687 492.722 51.1016 489.278 52.7729 cv
494.031 53.6011 498.894 56.9033 501.161 59.6611 cv
498.443 57.606 493.477 54.5151 489.014 53.9722 cv
491.316 54.6387 495.407 56.5923 495.917 57.9639 cv
494.685 57.1055 489.51 55.1299 486.925 54.2251 cv
485.404 55.3618 484.143 56.7632 482.934 58.3223 cv
484.793 58.9253 486.306 60.1406 487.604 61.8984 cv
486.641 60.5371 484.124 59.4766 482.001 59.5444 cv
481.631 60.019 481.288 60.5122 480.917 60.9863 cv
482.215 61.4019 483.235 62.2749 484.146 63.4785 cv
483.497 62.5376 481.788 61.8379 480.298 61.8169 cv
476.357 67.127 471.509 72.8647 459.709 74.7383 cv
484.644 66.7939 478.679 50.7632 491.515 48.9199 cv
502.596 47.3179 513.169 52.6431 522.458 56.7104 cv
527.434 58.8638 534.29 60.6396 541.654 60.6704 cv
549 60.8228 551.616 60.6943 554.485 58.7681 cv
555.84 58.3188 557.134 57.772 558.354 57.1372 cv
560.781 56.8447 563.533 57.5889 566.899 58.4653 cv
603.758 68.0684 639.216 76.2871 674.099 83.4883 cv
695.989 88.0063 734.914 70.8384 703.767 74.3403 cv
cp
ef
264.923 104.297 mo
263.67 104.192 261.204 102.695 261.037 103.626 cv
260.91 104.201 257.574 114.253 256.438 114.434 cv
256.412 114.453 258.733 106.978 258.904 103.482 cv
258.988 101.676 257.914 101.243 256.772 102.934 cv
254.407 106.898 251.972 114.209 252.677 118.844 cv
255.359 127.959 264.337 107.431 264.923 104.297 cv
264.923 104.297 li
cp
ef
255.483 86.2974 mo
253.553 89.3096 254.787 94.4697 257.171 97.895 cv
258.725 100.067 261.888 101.69 263.731 101.709 cv
265.843 101.704 266.237 97.3608 269.304 93.7612 cv
269.688 92.5586 269.576 91.1719 270.038 89.792 cv
269.602 86.0684 260.461 77.7866 263.724 85.687 cv
263.013 91.3882 263.004 94.1196 261.996 97.4648 cv
262.451 91.9819 260.776 90.2197 260.977 82.6768 cv
259.749 82.4321 256.784 84.6597 255.483 86.2974 cv
255.483 86.2974 li
cp
ef
244.45 132.624 mo
244.699 131.637 247.412 119.172 245.071 120.191 cv
244.584 120.367 243.245 120.607 242.525 122.086 cv
239.745 127.968 236.136 142.359 232.802 146.511 cv
231.067 148.694 238.419 135.235 238.125 124.823 cv
238.027 121.759 236.3 118.812 234.741 116.807 cv
233.565 126.045 229.732 135.791 228.742 144.537 cv
228.217 149.214 228.315 155.084 230.635 157.538 cv
232.706 156.422 235.908 150.328 240.399 142.521 cv
242.136 139.524 243.468 136.237 244.45 132.624 cv
244.45 132.624 li
cp
ef
236.45 83.9673 mo
237.037 82.7046 238.935 79.4712 237.624 79.2852 cv
235.106 78.8813 235.568 81.123 233.164 84.5063 cv
230.616 88.1499 228.087 89.0166 227.177 91.6831 cv
225.325 89.8403 235.104 82.9092 234.119 78.6323 cv
233.551 78.459 231.642 77.8779 230.037 76.3911 cv
227.97 80.0259 223.001 82.9971 221.229 86.4683 cv
219.857 89.1738 220.836 93.209 224.858 97.9355 cv
229.972 94.2944 233.623 89.8394 236.45 83.9673 cv
236.45 83.9673 li
cp
ef
224.985 124.94 mo
222.928 130.808 219.086 137.794 216.066 142.337 cv
219.127 136.098 222.929 128.121 225.345 121.599 cv
225.26 119.257 220.107 120.973 217.667 121.207 cv
216.388 124.742 214.304 132.092 213.917 133.581 cv
212.366 140.763 205.899 146.2 208.62 153.906 cv
209.991 157.102 214.53 152.52 217.608 150.863 cv
226.734 145.976 231.361 129.248 232.157 119.581 cv
232.219 116.163 231.249 116.756 230.013 118.837 cv
227.807 122.446 222.172 140.649 215.256 147.132 cv
218.782 141.097 223.729 132.485 224.985 124.94 cv
224.985 124.94 li
cp
ef
232.338 100.091 mo
229.821 105.709 225.389 111.846 221.281 115.763 cv
226.12 109.098 231.356 101.018 234.414 94.1309 cv
234.436 93.8706 236.28 89.3325 236.321 89.1011 cv
234.762 90.7158 230.047 98.0259 227.41 99.0879 cv
225.195 107.302 216.582 109.597 217.404 119.193 cv
225.825 117.438 231.75 115.023 236.272 107.319 cv
237.604 104.968 241.898 92.3784 236.689 92.668 cv
236.653 96.355 231.992 109.527 224.274 114.452 cv
227.701 110.316 230.539 105.452 232.338 100.091 cv
232.338 100.091 li
cp
ef
222.208 71.2227 mo
218.259 75.6001 212.768 79.7485 208.502 82.2705 cv
214.015 77.3345 220.989 70.9331 225.514 65.2192 cv
225.621 65.0229 226.548 64.1343 226.609 63.9297 cv
224.352 64.4839 218.574 66.8789 215.591 65.9849 cv
212.708 70.8413 209.831 71.5 205.654 74.7334 cv
201.987 77.5298 197.526 91.457 202.649 92.4463 cv
205.739 92.7358 208.364 92.0068 211.197 90.5239 cv
212.826 89.5928 220.372 84.4214 224.671 79.0283 cv
227.778 75.0747 227.958 74.3403 225.977 69.332 cv
225.197 68.3286 221.136 77.7461 211.852 82.5825 cv
207.845 84.1919 219.02 76.1685 222.208 71.2227 cv
222.208 71.2227 li
cp
ef
245.429 78.6924 mo
245.426 83.1289 243.935 89.0488 242.485 92.9868 cv
243.39 88.208 244.472 82.166 244.735 77.3447 cv
244.424 77.0723 244.006 76.9985 243.491 77.1938 cv
242.933 77.5024 241.71 77.4985 241.296 78.0728 cv
236.019 84.6338 240.638 106.11 249.251 96.4531 cv
250.922 94.354 251.957 91.9258 252.692 89.2979 cv
253.071 87.9761 253.811 84.6548 252.451 84.7461 cv
250.951 84.814 249.85 82.002 249.27 83.0977 cv
247.537 86.3364 246.511 90.5903 243.987 93.9746 cv
244.379 91.79 246.357 82.4795 245.429 78.6924 cv
245.429 78.6924 li
cp
ef
251.97 126.127 mo
251.535 133.102 249.786 141.397 248.043 147.249 cv
249.439 137.979 251.158 125.838 251.153 117.301 cv
250.823 116.065 250.356 115.454 249.756 115.994 cv
248.128 117.453 247.628 123.455 246.898 129.537 cv
245.993 137.001 241.995 143.12 244.822 150.103 cv
246.155 153.362 247.779 156.221 250.731 153.799 cv
258.418 147.837 257.509 140.862 258.838 134.649 cv
261.075 130.325 260.486 114.87 254.823 124.793 cv
254.752 124.924 252.22 144.017 249.351 149.187 cv
250.287 143.694 251.39 138.208 251.898 132.688 cv
251.975 131.86 252.031 129.137 251.97 126.127 cv
251.97 126.127 li
cp
ef
249.151 99.8169 mo
248.637 103.635 245.322 110.619 243.147 113.925 cv
244.848 110.055 246.625 104.018 247.722 100.041 cv
246.162 100.312 242.803 101.389 241.027 99.2495 cv
240.616 102.749 236.313 113.923 237.459 117.965 cv
238.305 118.068 238.877 121.696 240.273 121.539 cv
242.654 119.759 245.582 117.069 246.511 116.709 cv
250.25 115.243 253.626 103.497 254.037 102.274 cv
255.148 99.0195 255.928 97.3374 252.132 96.9692 cv
252.67 102.94 246.733 110.775 244.044 114.684 cv
245.917 111.182 251.64 102.397 250.626 98.0181 cv
250.615 97.9443 249.189 99.8706 249.151 99.8169 cv
249.151 99.8169 li
cp
ef
281.537 81.0825 mo
282.877 73.6401 283.397 68.0181 283.176 63.4702 cv
276.415 65.2295 267.49 66.0605 260.055 61.7173 cv
252.865 57.5293 249.88 40.3242 237.762 38.7534 cv
251.307 39.4531 254.934 54.4209 261.249 58.5259 cv
259.062 56.1436 257.15 51.8193 254.937 47.1782 cv
249.623 29.438 228.319 26.1265 210.166 28.7979 cv
196.906 30.7876 186.147 37.8306 173.455 41.3374 cv
168.334 42.7466 163.276 43.542 157.46 44.0122 cv
155.489 44.0718 154.408 44.3428 153.926 44.7729 cv
153.922 44.7744 li
90.4219 62.9634 39.3711 73.6362 16.2695 70.2412 cv
-14.8789 66.7407 24.0459 83.9087 45.9355 79.3896 cv
80.8193 72.189 116.278 63.9702 153.136 54.3672 cv
156.502 53.4902 159.255 52.7471 161.681 53.0396 cv
162.901 53.6738 164.195 54.2202 165.55 54.6704 cv
168.42 56.5962 171.036 56.7246 178.381 56.5732 cv
185.744 56.5415 192.602 54.7666 197.577 52.6128 cv
206.868 48.5449 217.439 43.2192 228.521 44.8218 cv
241.357 46.665 235.392 62.6963 260.326 70.6411 cv
248.526 68.7656 243.678 63.0293 239.737 57.7183 cv
238.247 57.7397 236.537 58.4399 235.89 59.3799 cv
236.801 58.1763 237.82 57.3037 239.119 56.8882 cv
238.748 56.4141 238.403 55.9209 238.034 55.4463 cv
235.91 55.3774 233.395 56.4385 232.432 57.8013 cv
233.729 56.043 235.242 54.8271 237.102 54.2246 cv
235.894 52.665 234.631 51.2642 233.11 50.1274 cv
230.525 51.0322 225.352 53.0068 224.118 53.8662 cv
224.627 52.4937 228.72 50.5396 231.021 49.8735 cv
226.559 50.417 221.592 53.5088 218.874 55.564 cv
221.143 52.8057 226.003 49.502 230.757 48.6753 cv
227.314 47.0039 222.592 46.5879 215.19 48.4058 cv
215.54 51.0098 213.112 54.6523 213.896 58.0547 cv
217.602 71.5015 227.8 56.3477 231.147 62.5596 cv
229.778 64.0415 229.088 65.6201 228.868 67.1162 cv
226.971 79.5835 246.933 79.2734 241.355 68.6333 cv
247.289 67.1045 246.872 75.856 249.004 79.6216 cv
251.329 82.8428 261.017 83.2583 260.498 78.2495 cv
259.659 70.2095 266.906 82.3711 267.163 82.6812 cv
274.901 87.2993 279.051 84.6968 281.537 81.0825 cv
cp
ef
447.335 101.394 mo
446.146 104.39 443.358 105.704 440.681 104.937 cv
437.603 104.097 434.752 100.769 435.682 96.981 cv
436.165 93.6572 438.071 89.5742 441.452 90.9116 cv
442.602 91.3052 444.041 91.5752 444.164 92.3921 cv
444.392 94.8696 440.018 100.042 442.194 102.818 cv
442.379 102.906 443.928 93.0815 446.577 91.6724 cv
449.639 90.5474 449.062 97.103 447.335 101.394 cv
447.335 101.394 li
cp
ef
448.229 124.065 mo
446.907 123.104 444.307 122.106 442.697 118.75 cv
440.324 113.803 439.682 106.195 444.81 106.308 cv
445.06 106.358 445.035 118.139 448.283 121.418 cv
448.484 117.856 444.879 111.644 447.685 105.218 cv
448.486 104.474 449.178 100.968 449.809 100.877 cv
451.501 100.552 452.591 105.298 453.161 107.81 cv
454.647 114.499 452.439 127.076 448.229 124.065 cv
448.229 124.065 li
cp
ef
455.112 108.396 mo
456.365 108.29 458.831 106.794 458.998 107.724 cv
459.125 108.299 462.461 118.352 463.597 118.531 cv
463.623 118.551 461.301 111.076 461.131 107.581 cv
461.047 105.774 462.121 105.341 463.263 107.03 cv
465.628 110.996 468.064 118.307 467.358 122.941 cv
464.677 132.057 455.698 111.528 455.112 108.396 cv
455.112 108.396 li
cp
ef
464.552 90.3955 mo
466.482 93.4067 465.249 98.5684 462.864 101.993 cv
461.312 104.167 458.148 105.789 456.305 105.808 cv
454.193 105.801 453.797 101.459 450.731 97.8594 cv
450.348 96.6567 450.46 95.27 449.997 93.8892 cv
450.433 90.1665 459.573 81.8853 456.313 89.7852 cv
457.022 95.4858 457.031 98.2178 458.038 101.563 cv
457.584 96.0796 459.259 94.3174 459.059 86.7744 cv
460.286 86.5308 463.252 88.7578 464.552 90.3955 cv
464.552 90.3955 li
cp
ef
582.866 111.173 mo
578.337 109.322 574.628 106.821 570.323 104.883 cv
569.591 103.07 568.1 102.114 567.94 99.481 cv
570.501 101.588 584.685 108.737 593.637 111.187 cv
598.132 112.444 601.829 114.205 602.926 113.504 cv
599.692 112.188 594.845 109.627 589.703 107.838 cv
582.228 105.196 570.784 99.4263 566.192 97.0845 cv
570.784 97.1479 577.738 95.3994 581.209 95.4976 cv
584.847 97.4595 592.461 100.605 595.789 101.375 cv
609.136 106.396 622.707 113.606 637.53 116.563 cv
639.244 117.023 652.95 119.365 652.988 119.718 cv
651.018 124.243 635.995 126.07 633.078 126.114 cv
623.97 126.283 612.042 123.959 603.587 120.269 cv
596.866 117.3 589.663 113.913 582.866 111.173 cv
582.866 111.173 li
cp
ef
564.268 111.243 mo
566.253 112.951 571.374 115.702 573.453 116.864 cv
583.125 122.255 591.395 127.729 601.491 133.211 cv
591.486 130.11 587.905 126.315 584.117 125.387 cv
582.501 124.67 580.521 123.657 578.36 122.438 cv
568.991 117.256 556.04 108.688 552.543 108.451 cv
552.904 109.393 549.694 107.81 550.127 108.356 cv
551.746 110.296 557.481 112.458 559.741 114.357 cv
570.106 122.956 580.287 132.525 592.5 136.837 cv
601.235 139.949 610.111 141.165 618.429 139.268 cv
621.248 137.73 609.455 128.668 607.18 126.676 cv
599.986 122.4 592.647 117.983 585.173 114.813 cv
578.735 112.081 572.688 107.504 568.206 109.795 cv
570.762 111.614 573.271 114.379 576.731 115.894 cv
582.332 118.369 588.49 124.364 593.466 125.632 cv
587.988 124.91 582.006 119.361 576.455 117.288 cv
573.007 115.985 567.212 112.683 564.268 111.243 cv
564.268 111.243 li
cp
ef
524.396 117.737 mo
524.477 118.322 524.655 119.059 524.962 119.963 cv
527.836 127.171 538.949 136.331 544.331 141.866 cv
542.45 142.348 527.685 129.14 526.89 126.309 cv
525.77 123.535 521.393 124.271 521.794 126.91 cv
527.339 136.181 534.316 143.397 543.191 148.762 cv
549.437 152.297 556.444 154.327 563.294 155.475 cv
566.453 154.909 561.381 147.879 557.058 143.162 cv
550.607 136.066 544.447 131.941 537.077 124.939 cv
535.495 123.473 524.918 112.487 524.363 116.616 cv
528.459 122.886 535.835 130.989 541.537 137.115 cv
535.42 132.288 526.914 123.762 524.396 117.737 cv
524.396 117.737 li
cp
ef
512.392 124.758 mo
514.469 131.939 520.226 141.725 524.579 147.684 cv
520.275 139.725 514.765 129.176 511.948 121.358 cv
512.896 121.692 513.87 122.045 514.818 122.379 cv
517.66 123.382 530.411 144.625 530.906 148.997 cv
531.918 152.509 533.417 155.382 534.644 157.01 cv
538.223 161.859 535.659 161.744 530.932 160.121 cv
526.131 158.487 521.12 155.283 517.051 152.246 cv
512.978 150.266 508.448 137.023 506.989 132.632 cv
506.474 131.092 504.165 119.274 503.632 116.3 cv
503.907 115.964 506.348 118.068 506.997 118.48 cv
510.304 120.334 508.752 121.451 510.235 125.047 cv
513.416 132.632 514.602 141.389 520.565 144.157 cv
516.741 138.2 513.74 131.759 512.392 124.758 cv
512.392 124.758 li
cp
ef
545.806 112.343 mo
548.091 113.853 550.403 115.382 552.893 117.358 cv
556.537 120.303 561.339 122.873 564.257 126.45 cv
561.288 123.528 556.17 121.063 552.309 118.254 cv
549.999 116.606 547.867 115.284 545.83 114.354 cv
545.806 115.029 545.758 115.686 545.625 116.286 cv
548.512 118.215 551.474 120.154 554.563 122.672 cv
559.274 126.479 565.478 129.782 569.256 134.404 cv
565.441 130.652 558.847 127.443 553.862 123.851 cv
551.353 122.023 549.003 120.55 546.784 119.411 cv
552.556 124.854 570.347 135.002 574.12 138.93 cv
565.896 137.069 551.917 123.433 534.696 117.667 cv
535.782 120.255 537.107 121.624 539.262 123.205 cv
543.554 126.273 546.901 130.11 550.791 132.939 cv
561.554 140.678 572.292 145.996 585.731 146.851 cv
588.561 147.112 586.935 143.662 584.76 140.358 cv
581.749 135.86 578.827 133.746 574.568 130.456 cv
566.141 123.979 558.094 117.074 549.433 111.166 cv
546.069 108.867 545.774 110.167 545.806 112.343 cv
545.806 112.343 li
cp
ef
549.91 63.0903 mo
550.622 63.1777 553.952 61.9585 556.937 60.9443 cv
564.733 63.7686 580.385 67.4648 590.483 73.7612 cv
595.449 76.8535 598.31 80.6338 599.484 83.8525 cv
593.43 86.0649 586.987 86.3799 580.714 83.7617 cv
575.881 81.8213 571.689 79.8384 559.262 75.6606 cv
555.737 74.4692 534.4 64.7407 533.278 63.4307 cv
536.912 63.7627 546.496 63.8452 547.231 63.6655 cv
547.205 63.647 587.774 78.0601 589.714 78.8403 cv
580.842 74.1694 559.177 65.1465 549.91 63.0903 cv
549.91 63.0903 li
cp
ef
543.623 76.7344 mo
549.406 78.8892 563.425 86.4512 567.54 86.2656 cv
555.746 80.9438 546.753 76.3906 541.528 74.5435 cv
541.765 73.854 540.535 72.876 538.149 69.4653 cv
547.737 75.3271 582.359 83.4434 583.408 92.1055 cv
579.052 93.2212 573.231 94.3364 567.155 94.2964 cv
559.961 93.3545 551.549 88.8418 546.453 84.7661 cv
545.952 84.377 542.161 81.8174 541.72 81.2251 cv
541.231 80.1128 544.643 80.0068 542.858 77.9517 cv
548.789 79.5996 557.518 85.8789 563.764 87.5415 cv
559.355 85.6934 548.749 79.3667 543.623 76.7344 cv
543.623 76.7344 li
cp
ef
519.904 86.501 mo
524.351 91.5093 532.141 96.0361 538.607 98.6675 cv
531.409 94.6318 523.786 87.8198 519.001 82.1289 cv
525.098 83.3638 532.483 95.542 550.595 99.0386 cv
541.721 94.8965 537.465 92.4209 535.384 91.3779 cv
540.903 93.6748 548.364 96.6318 553.28 97.5732 cv
544.466 94.2847 530.271 85.8662 522.967 81.5142 cv
523.522 81.5352 524.059 81.583 524.558 81.686 cv
527.288 83.5464 534.968 82.0981 538.666 81.9888 cv
545.775 88.0776 558.149 92.2163 563.86 98.7964 cv
566.723 102.05 569.539 107.469 563.248 107.157 cv
558.688 106.87 553.197 106.343 547.152 104.331 cv
537.862 101.199 527.958 95.8501 523.189 92.5308 cv
522.274 91.5679 521.409 89.9478 519.904 86.501 cv
519.904 86.501 li
cp
ef
520.585 100.887 mo
525.97 104.025 531.666 107.178 537.582 109.548 cv
534.556 108.053 521.147 100.14 520.172 98.4438 cv
520.333 98.271 521.824 96.4204 522.029 94.0815 cv
523.927 95.9727 540.872 105.288 542.752 105.743 cv
545.161 106.199 543.836 115.406 542.712 117.431 cv
533.786 116.344 523.294 111.723 515.595 106.363 cv
512.501 104.087 509.921 101.599 507.559 98.4492 cv
508.879 97.2524 511.183 97.7988 513.823 99.1494 cv
520.333 102.421 521.465 106.464 531.585 108.871 cv
527.757 107.183 522.272 103.607 520.585 100.887 cv
520.585 100.887 li
cp
ef
506.427 107.263 mo
510.083 110.541 514.386 113.535 517.948 115.487 cv
512.129 110.58 504.712 104.115 500.156 98.5034 cv
499.535 96.2397 502.03 91.4287 503.492 97.0425 cv
506.749 102.767 512.081 106.561 517.168 110.063 cv
523.346 113.753 522.008 119.006 523.702 122.299 cv
521.602 123.563 513.38 119.71 513.066 118.76 cv
509.603 119.236 504.197 113.562 501.316 111.271 cv
498.601 109.096 496.188 106.481 495.767 104.926 cv
497.049 104.313 498.507 101.749 498.895 101.368 cv
501.319 103.788 506.764 110.752 510.369 112 cv
508.524 109.74 507.411 108.477 506.427 107.263 cv
506.427 107.263 li
cp
ef
497.827 75.3213 mo
501.778 79.6978 507.268 83.8472 511.533 86.3682 cv
506.021 81.4326 499.046 75.0308 494.521 69.3184 cv
494.414 69.1216 493.487 68.2314 493.427 68.0283 cv
495.685 68.5815 501.462 70.9761 504.444 70.083 cv
507.327 74.9385 510.204 75.5986 514.381 78.8315 cv
518.048 81.6279 522.509 95.5552 517.386 96.5444 cv
514.296 96.8345 511.671 96.105 508.839 94.6221 cv
507.209 93.6904 499.663 88.52 495.363 83.125 cv
492.258 79.1733 492.078 78.438 494.059 73.4302 cv
494.838 72.4268 498.899 81.8447 508.185 86.6807 cv
512.189 88.2896 501.015 80.2666 497.827 75.3213 cv
497.827 75.3213 li
cp
ef
508.979 64.2104 mo
513.229 69.3252 523.46 73.1514 531.61 75.0015 cv
524.447 71.9678 517.094 68.272 510.794 64.293 cv
516.665 66.1426 526.141 72.5762 530.608 73.2866 cv
523.684 70.3789 516.629 64.207 509.704 61.2979 cv
510.201 60.0576 509.445 57.1709 507.594 53.9297 cv
512.237 54.6812 523.853 60.6113 528.155 63.0767 cv
532.751 65.707 535.862 70.355 540.508 78.3486 cv
528.205 80.7681 514.699 79.5415 505.714 68.2012 cv
505.98 67.8174 507.777 65.001 508.979 64.2104 cv
508.979 64.2104 li
cp
ef
454.787 117.688 mo
454.748 117.741 454.738 117.815 454.708 117.917 cv
454.925 116.319 455.134 115.203 455.328 115.216 cv
457.647 116.79 460.408 125.099 458.516 127.523 cv
457.477 133.105 458.599 138.565 458.952 144.018 cv
459.259 148.543 459.573 152.182 457.388 153.628 cv
455.867 154.644 455.219 156.918 453.54 158.922 cv
451.23 155.811 449.274 151.315 447.96 147.594 cv
445.687 140.926 445.63 134.58 445.777 127.646 cv
445.797 126.275 448.704 126.307 450.327 127.6 cv
452.031 128.949 452.826 144.637 452.958 140.415 cv
453.081 135.213 453.217 129.937 453.312 124.716 cv
453.429 124.43 453.519 124.126 453.588 123.85 cv
452.925 131.931 454.255 143.636 455.839 151.411 cv
455.023 140.837 454.103 126.852 454.787 117.688 cv
454.787 117.688 li
cp
ef
597.497 75.4312 mo
591.466 70.4194 567.549 61.0088 560.01 59.625 cv
560.574 59.6934 562.194 57.8921 562.777 57.9312 cv
568.529 59.6582 589.336 64.9502 593.877 66.1992 cv
588.525 63.3677 569.915 58.0195 563.794 56.645 cv
564.776 55.7021 565.922 54.4653 567.095 53.2476 cv
586.597 54.7441 604.828 65.0767 610.255 66.4546 cv
610.936 68.5156 599.027 75.8047 597.497 75.4312 cv
597.497 75.4312 li
cp
ef
660.544 94.0205 mo
638.497 94.7808 620.532 88.2129 600.599 79.625 cv
598.682 77.2339 li
599.003 77.4155 600.847 76.9893 602.231 76.2866 cv
602.736 76.0278 629.776 85.4546 642.571 84.7217 cv
630.598 84.1567 605.014 74.6841 605.596 74.3159 cv
608.184 72.7012 610.646 70.9175 611.115 70.186 cv
625.388 74.752 657.516 83.9399 681.241 85.4453 cv
684.59 85.6606 687.832 85.1519 691.126 85.3296 cv
695.345 85.5815 695.866 87.2861 687.697 89.6133 cv
680.092 92.4146 670.268 93.6704 660.544 94.0205 cv
660.544 94.0205 li
cp
ef
587.029 95.3179 mo
596.785 99.71 616.958 107.488 627.715 109.566 cv
642.323 112.132 660.83 111.143 674.322 104.793 cv
681.134 101.845 677.492 101.467 673.438 101.329 cv
665.126 101.115 656.771 99.7329 648.102 98.4565 cv
637.746 97.1455 627.009 91.2983 616.235 88.1919 cv
612.679 87.7505 603.989 82.3511 601.446 81.6787 cv
600.675 81.793 603.21 83.7617 603.009 84.6372 cv
602.369 85.0879 599.318 86.1367 598.687 86.7544 cv
605.183 91.1553 612.104 91.9063 619.945 93.9067 cv
610.561 92.6611 604.443 91.0474 596.214 87.1489 cv
595.696 87.6021 590.275 87.7334 590.799 87.9756 cv
602.787 93.7183 621.578 101.553 632.575 103.229 cv
633.521 104.619 600.009 96.543 589.574 89.4424 cv
589.747 89.6025 583.749 86.6484 583.375 86.8345 cv
583.628 87.1733 583.72 88.0923 584.538 89.313 cv
585.914 91.3687 584.769 93.54 587.029 95.3179 cv
587.029 95.3179 li
cp
ef
272.699 97.2949 mo
273.89 100.291 276.677 101.606 279.354 100.838 cv
282.433 99.9976 285.282 96.6714 284.354 92.8833 cv
283.87 89.5601 281.964 85.4761 278.583 86.814 cv
277.433 87.2065 275.994 87.4775 275.87 88.2944 cv
275.644 90.771 280.017 95.9434 277.841 98.7202 cv
277.657 98.8076 276.106 88.9829 273.458 87.5747 cv
270.396 86.4497 270.974 93.0049 272.699 97.2949 cv
272.699 97.2949 li
cp
ef
271.805 119.968 mo
273.128 119.006 275.729 118.008 277.338 114.651 cv
279.711 109.704 280.354 102.097 275.225 102.209 cv
274.976 102.261 275.001 114.041 271.752 117.32 cv
271.55 113.759 275.157 107.545 272.352 101.118 cv
271.549 100.375 270.857 96.8706 270.227 96.7798 cv
268.534 96.4541 267.444 101.199 266.873 103.712 cv
265.388 110.4 267.596 122.979 271.805 119.968 cv
271.805 119.968 li
cp
ef
137.169 107.075 mo
141.698 105.224 145.407 102.723 149.712 100.784 cv
150.444 98.9722 151.936 98.0161 152.095 95.3828 cv
149.534 97.4897 135.351 104.64 126.398 107.089 cv
121.904 108.346 118.206 110.106 117.109 109.406 cv
120.343 108.091 125.19 105.53 130.332 103.74 cv
137.809 101.098 149.251 95.3281 153.843 92.9858 cv
149.251 93.0498 142.298 91.3013 138.826 91.3994 cv
135.188 93.3608 127.574 96.5073 124.246 97.2773 cv
110.9 102.298 97.3281 109.509 82.5049 112.465 cv
80.791 112.927 67.085 115.267 67.0469 115.62 cv
69.0186 120.146 84.04 121.974 86.957 122.016 cv
96.0654 122.185 107.993 119.86 116.449 116.17 cv
123.169 113.201 130.372 109.814 137.169 107.075 cv
137.169 107.075 li
cp
ef
155.768 107.145 mo
153.782 108.853 148.662 111.604 146.583 112.767 cv
136.912 118.158 128.64 123.631 118.544 129.113 cv
128.549 126.013 132.13 122.218 135.919 121.29 cv
137.536 120.572 139.514 119.559 141.676 118.34 cv
151.045 113.158 163.996 104.59 167.492 104.354 cv
167.132 105.296 170.341 103.712 169.907 104.259 cv
168.29 106.198 162.554 108.36 160.295 110.259 cv
149.929 118.858 139.748 128.427 127.536 132.738 cv
118.8 135.851 109.925 137.066 101.606 135.169 cv
98.7891 133.633 110.58 124.568 112.855 122.578 cv
120.049 118.303 127.388 113.887 134.863 110.715 cv
141.301 107.984 147.349 103.406 151.829 105.698 cv
149.273 107.518 146.765 110.281 143.303 111.796 cv
137.703 114.271 131.545 120.265 126.569 121.532 cv
132.047 120.813 138.029 115.264 143.581 113.188 cv
147.028 111.888 152.824 108.585 155.768 107.145 cv
155.768 107.145 li
cp
ef
195.64 113.639 mo
195.559 114.225 195.38 114.96 195.073 115.864 cv
192.201 123.072 181.085 132.234 175.705 137.769 cv
177.585 138.25 192.35 125.042 193.145 122.21 cv
194.266 119.438 198.644 120.174 198.242 122.812 cv
192.696 132.083 185.719 139.299 176.843 144.664 cv
170.599 148.199 163.591 150.23 156.742 151.376 cv
153.583 150.812 158.654 143.781 162.979 139.063 cv
169.429 131.969 175.588 127.844 182.958 120.841 cv
184.539 119.374 195.117 108.39 195.672 112.519 cv
191.576 118.787 184.2 126.893 178.498 133.018 cv
184.616 128.189 193.121 119.663 195.64 113.639 cv
195.64 113.639 li
cp
ef
207.645 120.659 mo
205.567 127.841 199.81 137.627 195.457 143.585 cv
199.76 135.626 205.271 125.078 208.087 117.261 cv
207.14 117.595 206.165 117.946 205.217 118.281 cv
202.375 119.283 189.624 140.526 189.129 144.898 cv
188.116 148.411 186.618 151.284 185.392 152.911 cv
181.813 157.762 184.376 157.646 189.104 156.022 cv
193.904 154.389 198.915 151.185 202.985 148.147 cv
207.058 146.168 211.587 132.926 213.047 128.533 cv
213.562 126.995 215.87 115.177 216.403 112.203 cv
216.127 111.865 213.688 113.97 213.039 114.382 cv
209.732 116.235 211.283 117.353 209.8 120.949 cv
206.618 128.533 205.435 137.291 199.47 140.06 cv
203.295 134.102 206.295 127.66 207.645 120.659 cv
207.645 120.659 li
cp
ef
174.229 108.245 mo
171.944 109.755 169.632 111.284 167.143 113.261 cv
163.499 116.204 158.696 118.773 155.778 122.353 cv
158.748 119.43 163.865 116.966 167.727 114.156 cv
170.036 112.508 172.168 111.187 174.205 110.256 cv
174.229 110.931 174.279 111.588 174.411 112.188 cv
171.523 114.117 168.562 116.057 165.473 118.572 cv
160.761 122.382 154.558 125.684 150.78 130.307 cv
154.594 126.554 161.188 123.346 166.173 119.754 cv
168.683 117.925 171.033 116.452 173.252 115.313 cv
167.48 120.755 149.69 130.903 145.917 134.832 cv
154.14 132.971 168.118 119.334 185.339 113.569 cv
184.253 116.156 182.928 117.526 180.774 119.107 cv
176.481 122.176 173.134 126.013 169.245 128.842 cv
158.481 136.579 147.743 141.899 134.304 142.753 cv
131.475 143.014 133.101 139.563 135.274 136.26 cv
138.287 131.764 141.208 129.647 145.468 126.357 cv
153.895 119.88 161.942 112.976 170.604 107.068 cv
173.966 104.769 174.261 106.068 174.229 108.245 cv
174.229 108.245 li
cp
ef
170.125 58.9922 mo
169.414 59.0806 166.082 57.8604 163.099 56.8462 cv
155.303 59.6704 139.65 63.3657 129.553 69.6636 cv
124.586 72.7554 121.726 76.5352 120.55 79.7539 cv
126.605 81.9668 133.048 82.2817 139.321 79.6636 cv
144.154 77.7227 148.346 75.7397 160.773 71.5635 cv
164.298 70.3711 185.635 60.6426 186.757 59.333 cv
183.123 59.665 173.539 59.7476 172.805 59.5679 cv
172.832 59.5483 132.26 73.9614 130.321 74.7417 cv
139.192 70.0723 160.858 61.0493 170.125 58.9922 cv
170.125 58.9922 li
cp
ef
176.411 72.6372 mo
170.628 74.791 156.61 82.3525 152.494 82.168 cv
164.289 76.8452 173.284 72.2925 178.506 70.4458 cv
178.271 69.7563 179.501 68.7778 181.887 65.3672 cv
172.298 71.229 137.676 79.3452 136.628 88.0068 cv
140.985 89.123 146.804 90.2378 152.88 90.1992 cv
160.075 89.2563 168.486 84.7441 173.582 80.6685 cv
174.083 80.2793 177.874 77.7202 178.317 77.1279 cv
178.804 76.0156 175.393 75.9082 177.177 73.8535 cv
171.246 75.5015 162.518 81.7813 156.272 83.4434 cv
160.68 81.5952 171.286 75.2681 176.411 72.6372 cv
176.411 72.6372 li
cp
ef
200.132 82.4023 mo
195.686 87.4102 187.896 91.9375 181.428 94.5698 cv
188.626 90.5337 196.25 83.7222 201.034 78.0313 cv
194.938 79.2656 187.552 91.4453 169.442 94.9404 cv
178.314 90.7979 182.57 88.3223 184.652 87.2803 cv
179.132 89.5771 171.671 92.5342 166.755 93.4751 cv
175.57 90.186 189.766 81.7671 197.067 77.417 cv
196.513 77.437 195.977 77.4849 195.478 77.5874 cv
192.746 79.4482 185.067 78.001 181.369 77.8896 cv
174.26 83.98 161.885 88.1187 156.175 94.6978 cv
153.313 97.9512 150.496 103.37 156.787 103.059 cv
161.348 102.771 166.838 102.245 172.883 100.233 cv
182.173 97.1025 192.077 91.7524 196.846 88.4326 cv
197.761 87.4697 198.627 85.8501 200.132 82.4023 cv
200.132 82.4023 li
cp
ef
199.449 96.7896 mo
194.067 99.9263 188.369 103.08 182.453 105.45 cv
185.479 103.954 198.888 96.0435 199.863 94.3457 cv
199.702 94.1738 198.211 92.3232 198.006 89.9839 cv
196.108 91.874 179.163 101.19 177.282 101.646 cv
174.875 102.102 176.2 111.309 177.323 113.332 cv
186.249 112.245 196.741 107.625 204.44 102.266 cv
207.534 99.9893 210.114 97.5015 212.478 94.3511 cv
211.156 93.1548 208.853 93.7012 206.212 95.0513 cv
199.702 98.3223 198.57 102.365 188.45 104.773 cv
192.278 103.085 197.763 99.5098 199.449 96.7896 cv
199.449 96.7896 li
cp
ef
213.609 103.164 mo
209.952 106.442 205.65 109.438 202.087 111.39 cv
207.907 106.483 215.324 100.017 219.879 94.4048 cv
220.5 92.1411 218.006 87.3301 216.543 92.9443 cv
213.287 98.6689 207.955 102.463 202.867 105.965 cv
196.689 109.656 198.027 114.907 196.334 118.201 cv
198.435 119.464 206.654 115.613 206.969 114.661 cv
210.434 115.139 215.839 109.463 218.719 107.173 cv
221.436 104.998 223.847 102.383 224.269 100.828 cv
222.986 100.215 221.527 97.6514 221.141 97.2695 cv
218.716 99.689 213.271 106.653 209.666 107.903 cv
211.51 105.642 212.624 104.378 213.609 103.164 cv
213.609 103.164 li
cp
ef
211.056 60.1118 mo
206.807 65.2261 196.575 69.0537 188.424 70.9038 cv
195.589 67.8696 202.941 64.1743 209.242 60.1943 cv
203.371 62.0444 193.896 68.479 189.429 69.1895 cv
196.353 66.2803 203.405 60.1084 210.33 57.1997 cv
209.834 55.959 210.59 53.0723 212.442 49.8315 cv
207.799 50.5825 196.185 56.5127 191.881 58.9785 cv
187.284 61.6108 184.174 66.2568 179.527 74.25 cv
191.83 76.6699 205.336 75.4438 214.321 64.103 cv
214.055 63.7188 212.257 60.9023 211.056 60.1118 cv
211.056 60.1118 li
cp
ef
265.248 113.589 mo
265.287 113.644 265.297 113.718 265.327 113.818 cv
265.109 112.221 264.902 111.105 264.708 111.118 cv
262.388 112.693 259.628 121.001 261.52 123.426 cv
262.559 129.008 261.437 134.467 261.083 139.92 cv
260.776 144.446 260.461 148.083 262.647 149.53 cv
264.168 150.546 264.815 152.82 266.496 154.824 cv
268.805 151.712 270.76 147.218 272.075 143.495 cv
274.349 136.827 274.405 130.482 274.258 123.549 cv
274.238 122.179 271.331 122.209 269.709 123.502 cv
268.004 124.851 267.208 140.538 267.077 136.316 cv
266.954 131.114 266.818 125.838 266.724 120.617 cv
266.607 120.332 266.517 120.027 266.447 119.751 cv
267.11 127.833 265.78 139.538 264.195 147.313 cv
265.011 136.738 265.933 122.753 265.248 113.589 cv
265.248 113.589 li
cp
ef
1 lw
10 ml
452.462 36.0083 mo
452.375 34.3477 451.351 32.2861 447.833 28.8647 cv
423.289 4.99951 li
419.466 1.28076 417.221 .970215 417.538 1.13672 cv
417.328 1.02686 416.36 .566895 414.904 .506836 cv
413.1 .429688 410.545 .967285 407.753 3.55225 cv
406.872 4.38721 li
404.419 6.73193 400.714 10.2759 395.773 10.6733 cv
387.531 11.3364 377.135 6.95557 369.612 4.07178 cv
366.096 2.72314 363.549 1.77588 362.069 1.77588 cv
360.508 1.77588 357.758 2.83154 353.93 4.30078 cv
346.529 7.1416 336.443 11.3228 328.365 10.6733 cv
323.424 10.2759 319.718 6.73096 317.267 4.38623 cv
315.216 2.44482 312.721 .555176 309.443 .526367 cv
308.569 .519043 307.696 .666016 306.858 1.0166 cv
307.179 .883301 304.189 1.37646 299.106 6.45264 cv
273.919 31.604 li
272.045 33.4741 271.67 34.9727 271.67 36.1982 cv
271.67 36.251 271.674 36.3042 271.677 36.356 cv
271.745 37.8755 272.791 39.6621 275.256 43.7261 cv
278.053 48.3374 281.884 54.6558 282.711 59.252 cv
283.977 66.2764 282.951 75.9233 279.169 92.5474 cv
278.628 94.9292 li
275.399 109.11 273.451 117.671 273.158 124.97 cv
272.858 132.448 275.736 147.861 281.721 156.172 cv
282.609 157.409 li
287.345 164.021 290.202 168.011 302.229 175.433 cv
308.664 179.404 315.911 180.739 324.304 182.284 cv
328.441 183.047 333.131 183.91 338.251 185.187 cv
350.536 188.248 350.979 188.579 352.287 189.565 cv
352.786 189.941 353.471 190.456 354.545 191.118 cv
356.399 192.263 357.201 193.032 357.788 193.594 cv
358.613 194.386 359.743 195.47 362.069 195.47 cv
364.415 195.47 365.544 194.382 366.369 193.587 cv
366.95 193.026 367.745 192.259 369.594 191.118 cv
370.668 190.456 371.353 189.941 371.851 189.565 cv
373.161 188.579 373.603 188.248 385.889 185.187 cv
391.008 183.91 395.697 183.047 399.835 182.284 cv
408.227 180.739 415.475 179.404 421.908 175.433 cv
433.937 168.012 436.793 164.021 441.528 157.41 cv
442.418 156.172 li
448.402 147.861 451.28 132.448 450.98 124.97 cv
450.688 117.671 448.74 109.11 445.511 94.9292 cv
444.969 92.5474 li
441.188 75.9229 440.162 66.2759 441.427 59.252 cv
442.254 54.6558 446.087 48.3374 448.883 43.7261 cv
451.434 39.521 452.469 37.7529 452.469 36.1982 cv
452.469 36.1353 452.466 36.0718 452.462 36.0083 cv
452.462 36.0083 li
cp
0 0 0 1 cmyk
@
122.538 71.3335 mo
128.568 66.3213 152.486 56.9106 160.025 55.5278 cv
159.462 55.5947 157.842 53.7939 157.259 53.833 cv
151.506 55.5605 130.699 60.8516 126.158 62.1006 cv
131.511 59.2695 150.12 53.9214 156.242 52.5474 cv
155.26 51.604 154.113 50.3672 152.94 49.1504 cv
133.439 50.647 115.207 60.9785 109.779 62.356 cv
109.1 64.418 121.008 71.7061 122.538 71.3335 cv
122.538 71.3335 li
cp
0 0 0 0 cmyk
ef
59.4902 89.9238 mo
81.5381 90.6826 99.5029 84.1152 119.437 75.5269 cv
121.354 73.1353 li
121.031 73.3179 119.188 72.8906 117.804 72.1885 cv
117.299 71.9297 90.2598 81.356 77.4639 80.6235 cv
89.4375 80.0571 115.021 70.5869 114.439 70.2183 cv
111.852 68.6035 109.389 66.8193 108.92 66.0879 cv
94.6475 70.6538 62.5195 79.8403 38.793 81.3472 cv
35.4453 81.5625 32.2021 81.0542 28.9092 81.2314 cv
24.6914 81.4834 24.1699 83.188 32.3389 85.5151 cv
39.9434 88.3159 49.7676 89.5723 59.4902 89.9238 cv
59.4902 89.9238 li
cp
ef
133.006 91.2202 mo
123.25 95.6118 103.077 103.392 92.3203 105.47 cv
77.7119 108.033 59.2051 107.045 45.7139 100.695 cv
38.9014 97.7466 42.5439 97.3691 46.5977 97.23 cv
54.9092 97.0181 63.2637 95.6353 71.9336 94.3579 cv
82.29 93.0479 93.0264 87.2002 103.799 84.0938 cv
107.356 83.6514 116.047 78.2529 118.589 77.5811 cv
119.359 77.6948 116.825 79.6636 117.027 80.5391 cv
117.667 80.9883 120.717 82.0396 121.349 82.6563 cv
114.853 87.0571 107.931 87.8076 100.091 89.8091 cv
109.475 88.5635 115.592 86.9492 123.821 83.0508 cv
124.339 83.5039 129.76 83.6357 129.236 83.8779 cv
117.248 89.6201 98.4561 97.4546 87.46 99.1299 cv
86.5156 100.52 120.028 92.4448 130.461 85.3433 cv
130.288 85.5054 136.286 82.5493 136.66 82.7363 cv
136.407 83.0747 136.314 83.9932 135.497 85.2134 cv
134.121 87.271 135.268 89.4424 133.006 91.2202 cv
133.006 91.2202 li
cp
ef
322.477 122.75 mo
331.077 115.771 335.592 117.285 340.144 123.292 cv
344.353 116.968 347.128 106.168 347.128 93.9077 cv
347.128 74.4248 340.123 58.6245 331.484 58.6245 cv
322.848 58.6245 315.842 74.4248 315.842 93.9077 cv
315.842 105.825 318.465 116.362 322.477 122.75 cv
322.477 122.75 li
cp
331.474 48.3066 mo
338.435 48.3066 344.894 52.4634 349.865 59.3862 cv
355.037 66.5879 358.775 77.0303 359.647 89.2671 cv
360.58 102.369 358.089 115.004 353.103 124.646 cv
351.731 127.299 350.182 129.698 348.483 131.797 cv
348.498 131.87 348.512 131.944 348.523 132.02 cv
349.348 137.531 353.91 141.175 360.169 143.969 cv
353.655 153.852 li
347.914 151.408 342.277 147.48 336.873 140.291 cv
335.063 140.871 333.188 141.174 331.261 141.166 cv
322.425 141.131 314.677 134.615 309.527 124.498 cv
304.618 114.854 302.216 102.23 303.202 89.1646 cv
304.124 76.9609 307.875 66.5493 313.056 59.3647 cv
318.038 52.4546 324.513 48.3066 331.474 48.3066 cv
331.474 48.3066 li
cp
ef
380.951 62.1265 mo
383.191 83.5806 li
383.883 90.1958 389.787 88.5806 392.884 85.2593 cv
397.137 80.6978 399.728 73.5659 398.795 68.0913 cv
397.325 59.4683 387.788 57.1787 380.951 62.1265 cv
380.951 62.1265 li
cp
380.564 122.205 mo
383.225 102.125 li
385.324 99.5249 389.362 100.044 392.354 100.88 cv
403.468 103.989 403.971 126.868 392.727 128.953 cv
389.069 129.631 384.783 127.232 381.207 124.734 cv
380.018 123.902 380.375 123.634 380.564 122.205 cv
380.564 122.205 li
cp
361.688 49.2354 mo
373.777 73.6177 372.595 104.392 363.182 139.129 cv
373.933 143.608 li
375.725 138.531 li
387.24 141.845 403.854 147.457 412.18 125.32 cv
418.94 107.346 411.771 98.9214 407.454 95.8584 cv
406.038 94.8535 405.881 93.3818 406.565 92.0151 cv
410.15 84.8574 410.742 83.8843 411.315 78.1353 cv
412.517 66.0659 409.306 56.9346 403.4 51.9209 cv
397.496 46.9087 388.247 45.9653 375.427 50.1313 cv
371.544 43.2622 li
361.688 49.2354 li
361.688 49.2354 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 16.0.0%%For: (Dave Houle) ()%%Title: (QB_Wings_Logo vector.eps)%%CreationDate: 10/9/18 3:45 PM%%Canvassize: 16383%AI9_DataStream%Gb",KkB\nodbrs^pAi4oeDt::6doFp_16AB1!+s&DICbXn&Jc3.WhO$iS?M,TCk=a$SAbY<N7NKPuNpkQ=')^UY0CF?iN3!%OL,s%E%#E1&k'SV%7a)M>C"d<Dj;gJM+AIaN;JHN1^%QKrD?C`=qCANnS6Zdf#.$$>?EQ0bVj#br7t_Jlhq,<l'l&"MoGO"k5:r<S==?U%?*m,J(1V[8/GhMM_G@s[_,)f"T.NP,qrM50Us-)3#X/am:lCB=ckL..IYX!E]t5S8dN7k#TUPp&BZ!lL^Jr2.8=>+sJ'POSGV\%A%R/V!3?@B>&bFS0DZfpkt#g6<qiK'EPi?7n0I:m>ImUBA<$$.d5JTQ^8iunI?$T&_#2&lQGAM0&@UG7Bu-(/%cp-55A_,)n!:;e@O%EGN<+1QSTi%X4MW94CT\ld9qX!:__kM`sH=r>-/3EJ7/[R>c>taOZ84`%>Oq&8VrOA?Gn+(lh&s"))MjX3UPJFYOd,LVr(!W#kKL%@^2jL+s)[jirHQ%`#OXX8F_?n(_3l;K*ZE-[gq/E/TDom?iZX'8/f]g10^U-%`WiAAi:9V.3:5ln-?hHT+LsnjSm2j"aKKZit^<o%^`J3@BXe@u]o<&7VLW/WrRh6M3+3:!)M>3R_0E/^riQc$2G1p'M#?"ts*H]]RVW-%$]!\R/-\>&8bcF:E)-L;_XJ5)L;U5P*6+g3%%H#0D`F?%eTNhnS_HO2]X;-Z@1tQ=p$0rk#YYGi/_7,V"==]em[GX"=$#:7_YZ@Fth^fIL8YH.Mcnm;Mku\A.:"->:VXZaXa1/mo%58YRsKl;"niNUE.5@H."'E!Nk+ANoR\-ugL5@GRg&c@<,F-OK/6Ccs]qung,T<KV8-epJq#_#+QiP4k2`!O<!eAUib/Vk5@KQUrH%53'Wfp)MNu;\;q7Ic<:@k.(/qn$m9Q3p\jc7U-E##AZX'i$W=IO!)F\Qf/O/s2%qN5Al-/<UdU35PPP761"+9_b]'/p]Q&_=qEpn%M+8/!$)T5-%j>sU!.3#]%l\+1J!fN*(8`$@(Q:BB4mY2s(P[iPk/Ie\i;R+)L`OO(&3KYF`Yt11r88s(L%u\ILM;@tKqGRZ`6MoR%31H*P9K<L^F#V.W*3X>:#()@j"nMdC(YkBe]&VXUWaiQ+DQr<ZLiBl_^;F+oFPJp++.)"PgiG$7R%*W5A(oiVB_7)U=-.V'Nlf:4%WutObSHRfigs,B&^jkijJVQ3V(IjgfZ7lcm7iWi6gB'7B^2j26i8SqMS&$4urntOn.gF\A:^EBns5Lda"TK8:`IB4=1l@n2s5Le<%*<-fR`IE^IrgcT!YS6@F8`CBA?i68:j57_gps3KG./ZL.(]P5.pp]`GrZh2&XO#kX_,!1rpc%pTrsS<(71,/*9nf?!9`k0R$(<'t%khh$]1%#p\RioO`FAP'Aer8R#n1ROjimA;iMoVP8mQ6)]9$eZ-.n[+L,_`]PH13m^-fPiANS[@E[nJ^,/jUlCJ"VhK7Kc&:;t)C6%7Q`$_(]&dR9su0X-Q3]U,>aH[S+,6)%/2WBO&Oj2nNo&8aq3*VemP,%ES)YQ/J^r(&,Q[jJY2F=fMWR.')3N$cTqL;W-o:A@j.O(%PGh4J)o8A,"K[5FN9sV)K#SrdJJ$s_M8:7nrW'#,\EEc\'`n;Q,RTXA\DJ:^`"[d)7e3LU!&dQ*$J\Pi4)W!pgTVIS$k/I*(h!+a%K$B8s*-53eNum^,VC]_-O"j-tJ-UdB%^EtP$[`3DLnEY(TeNVcMSoI%&)gG0%4kjO>jr]:*4F)=M!G00([aG4%d3q$-P/[:R3:oT%L6$X"_=]fpa7"%NL#S1mffl`b3*bDZ#sF!L&!FG-i#_[%8EPMk6Xejp[rV$AT#L2Gm._beTG9+fM.fU,//,P6nJM!/NYMHsrXaNT%2B]KE2RsI'D(p.L!f8$jGYaDYprm9$3/$;($l,El,7[@eo\eqlEIhB;4i]=t[E[/.@NWLn`fCD[%a.Z;&!(pd_Zo]O4)P+Si+Y"R%H\c2ZJuKm>*'@eT(Y;$7qA?eg4<^#\4Krb1R).J^7KQ4:`W8]6(ir_MOA=nFYV\cgbAdoE-"p\F2*7fhVfJQWC8;",%;ST^o5T?5%n[jBZ6bF=I7kB8R'_O/922$K=mQ2qG0oS'V*BOlF/,0m-8'Jl4N`^&dk_`g/B:.f_"Mcl[:<4Or.@R"\k$]fl&8t)caP-dQ/Dh^4%)K<8!fE`an^mp*m%V5[f#L++f>X9aROVa'-k&lUr7l=]b#bh&ZMDH;8?5ppEY3,L!;\rAd*LRbA#aPOs,_TWoO.gI-qM3%Mj_ltS%dK7aM@[uk:]n69*G]O_]elg^)=BE?\?oc4)'BTGm7Y*sK$(?9&4P:T5Nb<#8>P@HWTQfEN1#<a*.jHn=#Nc@kco['q[TM1m!PT"5%(;Yo#oe;+/q$#)C=Gj@_@*2ul3DGAcji.:8GX8+`nUMSb`tZcu:q%_?(aDdNE,uW3k67$4EY8"]^Z#DZ)o1<>9nqbfji[ccY/7-C%r6%\P`g`5f/GClZF"greGapB!CFKmT'7_+`31Jr7@CF+]7H:$'H4p`Sqh3G>A3shK?qH/?g4j'M*od!fUFZ'lju$sBi-,?1NMTCs%d;nKj2*(Kp/.YE=es;86PihTBa1#;\+Dekd@C`8VlHC*cXTIBibb3h3H4B0s/<S"[#R[#ae+'Lli[']($>Tm*(XtMDgl(,;39fH[%!2j0XkAV%@WIXJ->#iopJpkXQ#W.^smXeIlJU<*PB\o=JXTplB%;Q7#*8ad.i#UkE,?C<()MQ_L,+2r]-dLFf'T9Fo.^;adg5;)6%#TN&PIQg"RkB&%0.S'Uq9gr)ELEEG=1%lU;=IYVAO919?@q6Bq1RA(VCIO$]OthF2i8tE`2A0gS*d?"&6>jUT3M[hJFlGCj;jNor%Z&Jd$7;fO6\g>MFku9@V8LFlHCY9hCO`7r]a;C?'\<<JPq&)94Nt&9KH-HD!5Ud:e/8#u2^>SmK7ZmAD&8/4p)oHS]h'\Y8ik0(P%b80b'_=9G(1O'ZLX<:VC+M!f[KNKk:fghk,fbp04(DfOd'^+Uo3;^L(]Y,3$isL8\m1A?g"jIa;k:h=oOU5JIR1OWk^uiP'M5)6W%2t/RqF+)&L)DCj+#Jup$XSFmQnhqORs)FKlUBfj%hJV;S%QqpSo]J[RO#Zci3%i7HKCg)5,-9)*I1afBls(OJ3W`_)`%sNr/Z`NU%i%5E[:Fp9JS%+7/G]Qd+iYnLNm7hSq``o\S<qik*$@Edj*jp\Z*TZLQ^eMW$@BC*Lo`D%4iB)92iiFEP-Na$:R$Wo$K%agLI>[XA%6PQt5YfDJ]-tlZam1a'f_tDD)m]A/J@s]dE(.S`lI>tWrq[V?^KRe1i2e%l,_sAq/ln7.<%hXWTJqApe*YQmI60'!'\.VbrV]M-G%m#rZoEP;K%WGi?dd=qdoD_QUu>_2eS1n0Z\[pW\V1_l"tHisaj-=L6?,">\8_qr@c(_V9F0DrgN'jDNRDGjB!a+o.'_K$PV#*@uP%U8Vp>]j]e4>7`NL<]L)Ci5UAGicu5d,S?oH#0CnhXgf:c2&Q7nY[518Z7WOHdq%$fo`UWOhbcsl]\@Ao1)'N?]3g3EZP?aC1#8Uf%7'F/RK;'!bhJ_g_heSF>*3BHUo@%ro>;NVc)3<"$_%6>"1-<leTt/)5LS+\;S$1l@cSdE#k*h5-Wm@'[F7:N*=I]6m9)>2JB)EPq%&YA5G8r^U;bYi[%5:s&;)DB[2Z1+95dU/!Xc[BE#h_`%11SPZ3:[VQlfT)Be"qV$uJuZmGf;KfA1'"8fS!rr,nS5GmgVuIS'ZJDj%gM7>Y@Nf7,1]-Rhgf^fsI'_6F^30-(H4'!<B>A2T(KQM1-I<n][XoJ3amB#eTRbb]&4#3(EpJGY@PO?+rQTFB<!&^hc9oH[a"Z*%%bJAKZgF`YY&j9t&RGD\h(q9P%m`%o;K53*"AjFJ;Lp:Q_p:pI9iNtK^0R[Okes&?X!8k-5#k3:i5MM/$!j.e.\;A/ZT(Y*QKZ7n%%URH&6_.X@XI^*qfq6[R/d4Zbb$/C0<qg1'SRKD$iqHkcF_jiJBhgd3Emh`SHQT9$B?]NB;;kQ9XD?.6#.YP?@,1t]fF7?;Cic\d1%:#(1+_VG)/r2>-!5N'r(bX'*N2nsbPjq2jnD40>-M=/G!^iN!!A.AULi*Xu$J<J8D>pPp<`>B")l:#c%;VU.3qm84$m!EFV:!Gd2%KPTlj'%T<h@_*T<J1@'E<^?d'@HN?ir%IauBLqhnV/`rIgjU5ZHh7BpD_R^Nf5(_ld:`GZr#Lfc"0HQm@<QPbUQGq'KWRb3"*l$3%B'6J7S`<4+ma63ahT9O*J`u)`@0/R("-B(Kc-26@7G0'+on("UdQhR8biF5^2RiNJb+WMnCD+u;BHD/<bZF,hI(eF*-Wjn:Wm8%g%\Au]RJ28W0Iq4h.jpdDK`k7iopC"ne\4VSE-EI4bBXQXr'4Nis)o.u'5]*Z^5uBe<WWqcQ1GTL"<[JU<:aD9%X^_ilT'aQ&X%o&P%G\+*31M-kF(6+'Dl8=3g%d6q.F[3Dghgo/dS-\^D3G'i7=+BnPD)!&"j4@h]gG&f3XNpUu4/AeOK@s_Bq\rTHFR-@3ok:GJ_18*U%]j.X(Yn-&DAiA<1`[j=Y8;?B8I/etk\3Tqc>/TT@0k/-XhW.;fa6rC*91c%0[I*qCB=;NIe_?bieO3U6Y<G21kkS8Uh?qI4]S*R*%^&RcT)9e0d#T=fq+<p<omL^?/.3u'E+XT>ea45L4en$Rb$_Tt_Pj7;Ke\'8uT8@tm'73+,3pVD9_$K)eNoY\RTVqcE/F'J)5Kq(X%^#=FP>;-"Z:%mcF0X^:8@iH>$5]moTa$20mTJ-=2?28t99"3^Xq@B0Ws'[Y7/nW$$G$Q(3,5t+i*o`\;2-d'>fjnhc](h`oX:gPK%#ak)odDP9WZdEZ*">.(A5Dp9#l-Vf\hhK)=T14K,9[Z5hD^3>.cF5hH);YNr6Y!@W!Fqc\rncTj)^AH*^@NF#nKX%F?LO<@)!.4b%j"ioeTDn(-/B>C%#T,nkp*4ip5HJ,Va9[!H.a*G]K_ZRbE/bb,E&$+7LMLShrS,PT-U=D.D@?"I1>+/dMM1g)6>L`+6%@9h%2D2U%i`A$Cct*+,R+]9r+:H-`<ZdB7qk[FdP_0S*a44u3&E8d>JJULNL__/Y1uC9MaR%-&HQ.nVSD&PaTDEdojhl9jN[B@t.P!jV7Us3f%lutMZLo>CA\QXJ?fu'Z2k'Fq!!M]rBL1j!cB&WDdE'>lQHcM257U;rG`)R*YP-=Vl`G@Cin&GB.W#69!m&tRgF+5q1F(5iAq8(Q1%@^8">8+.6%%`p*F,sVZ2C9.ft*OD>uH(ton2I&&5nH^X&YoYh/majNlYmQ,>3$Vr\n$KSjMDbn+6@;@\0-><Oo.=^\!6(\JMFC/^%(@nI7(<a-'91#a]LEDPd&>R0D0Y7MX)Rqd\P:K5TL+tEGaA9(o2GPT$=bfb^7:V"fF`f,ZXencA>fR\`f_/jodc!0:C]RrG%fEC5%rXFs&#"Z02cp9MpX1qbMf@nM_RfVaH>cLNZeX/)TrH8U]a(X'EXqu%?JRsX),q?+EKuK+gLjMS[n(<^]>Wf'g#B8qT%&nTh!D2lt%/LZ,?Ck_#Aole>t=D(HpOT,!o^YWeIl;U%a7f-\-)VOF,Z$77q%qrHFK3<E&(lrcRIIC6)Sg[^G+4akSF1X:dL?P3-C;hcF.J#-k%KgSl*@m"#mQN.@#p<hdkS"I_'+P)(87cno-qmk+%GFAI<C%hliZXMGBZN]O8."_R00V4-f&u@XZ_(]-nXW\g]MX0)_'+i:>YuZ("%^l/lSM+e-X.,3Rp5JeurmcED@2\08*lO.N>jIOO$%`Vsh\5SlZiPmT"n8B]eFgGLu)$\Z#U#SbM?q?-X@6K`W*D`]d'#t]<$+3qm%\6mIp!%*f4R_(FiHmL#k2&QFB4K@+.>SfJ>/Bn4!J]VY;*rKlP(gs-og4KB0O_C"I5XQF>e16B4VU<oiqg1EUXYuGE4-VX*$S=>R%:ILuJFuEJP/6FDt.g+AGe7oRq'IagBHN!5=[TiGaL*o<),sPWg,3>b(A%5irU#3[<#9(+fRf"EjJ;::@e7D,K2)Bm*ZlJo^nqu>?%$Ce2ds'_=$V&#M<`GI&C!eNK'CU,!ck:_siW*F+"ln?@`>IsM,d`-8ggan20CWm]qc>^2A@UW)G2d;)^>H$Hb7VU9-kgP*bVpY7`%A3&8N&l>\^gnnS;Dc(YYV$4+Xnd](&h/(+>P!9X\e9.uF;"2gAQYI`+NW\'YOW-(AND:4%@*a?4WDecgD4T)W$FbBkqTMuM*!Hb$%"r'ca"tK(0.-]7sbqLm&g<2Z9hb(LhTJGC6"*I&g:m.RAe]pB_BIc2MB>],#='F;f<nm$IS32Ok`b5_krG/Ln.Y/Lj)>"7m#(#TB%N@0,k+jm@o4UtjODRI"ZecV,\9"V2o&@U0Q:fCD3T\ai!c^Phg:^L/@n"B&$=T41A_?P>m6ERb\Sd/#K,U+W&F-G-`(g/s/7Eq'3%:?494lEPE'&9(Mc:SAhi$>J)pe!_US(qT!*+r%&+i(ueA5UugR%19'!agKb>1a%;-lA?!'BmdZ9;sRj5r`"!N8a]$0gF\Ga7"r]m%F8#(mU,ci"a$\PTeG@o?ah%1iPX5cn#G"I\Ig#-NPk9KYW`ih1r)*tnEo=*=p_):9-\"\p$&<>W"bkj^LF"-=]DpKm%fD[HAhbX/%E=He=2FXr\1,s'P2`i#6P/\Onl[cTtMaYCg6m=+;mYP^.Cb1gkGhXaoHk#.L>Y'Na([g](;/-O&G?>]mD:m`.RHGMZ]&30]_Y/^;%T4:L:BkjrZ<+q3AkpXdPrp=jpZ!<5j;n9qH[N;tRe_V>>*4$a,l!gT_YQZ6`.m\!N+)9d]Y&ii'^H7ePDRR)m2&%atEp9$Hi@F;:%RDla-q;[L?-biE*H889kRa=fQAb1@rZ8([:VBXX<q4EA9:5u`lO[T(j=X?.p]gpLWAXB$R+)1dJ-M%&&bKT43>\`S3H75t6:HM4E%DhK34XgVRDe$g8hE^?nD<>tb?;uK_\R4`kghNWPZC^N%H`I:$4T_s8Z6r(#QGk*pR.o905MS=i)M2-40^Tcg9T&N\X$lEY:"diUX%BPMGbV$m*p*RW\RUFgAeXYAQh;!4DF7D/Ok<LcfFfsFJb\.:kLd#U=QIQXH=T9U"%p=A24VMfk1ie_u&p[?^0\]h0cmO;Cb]#9$<%<_Z;ompT\dI,=XNjX2bY!4M3k0XfTfV1#"V7BVB*V<=`0\)oHPh(Y2`r6.:Vk(=%Aa-FEWK:)_cDm:[^@^4'l''o=!?:./>0-?Ra%7X^5D[m.'cCt/3h3646CS6>-HGZb'QH?Z41eUYkTI.8_ei[>3YP-01BpGS#E`[:.^QnlFehqR*,@1#XPi*FY^Cj+!1s0AN9gV-L1%OIF0`[X=lTTlUVuI>juecaT"8h@e3R'.\BmDQgihTWrkJ[M+9X5?IoYJ/DPI7<"MCS\a2;0>aU7St!D,VU6uIH(kpoVMRp%R,N4o%Z,%=iCNfsWA@L0.;&ObJZ+t"CaKL(_U2b0W$aZ>h#Jg1o-k9UO-rnuDGAofKOES+?o<*RMZHZ%S7*"_o(HqNY*SK:nSe9RH85pQp%Gt?Ck]uD%Ng<s=*ME@q:?J*7AWR5bcKno"P2L6tKJt=>\c[=.'*@(a[eiS^X80ee,=tEH^MXQ"CK`()^ci%Kb)Li3.j+T@f2T/$'%FV11a&\bMpr:+9%V7n%[mD*fa!Rrb$(3&ASkj"-7oJ:[Eid#*3HN8s&=Gjm1]L=NScTbhA3b>:IcZP/$o-'Y&,!5IPUG2AR'MPsN%/:3Ri]-8Umq44PJ@h-:kY!Lap\k*R/gQI1&EBKaYUa+kp%r^oILKp,):Q&D3CckbAeC[Jicj6"TOtde4.%6sOI+p6Y'C*23XJC8X%Q5<?]4('0FB%pIIqY%T[6S@\1=fJ"7-E[Ye#U"-kctof_V*L4_+Mu2%(atlLo!OfE6,2U"4B>+\o6fr'.N[mp<^J<T#Bp[#^7u*i%-5tSSVXKgMZ>%Y"'Y`_+6-,?s-;Y@`/FU9ZCZc]QJre),e9hQ&o_F8PaN8dK5\-VEN7=TdT$&n.=@)I2fo!T>T-:&'n\3eEaS;ZE%9+op+>c:dF"Q$<'VYBcnP.rW?*4So(U7UmYB3hglZ$Sq26BE&N!>NSSq8Ulo.;rZ4?&dA^K%H=#Y<MIZ'42e7+Q#PBbKq0P#PX-8%ZMdcPYiSII/!h\$r1MKi'A9'op3c@Phh)O`&PDlAb8`<3g!Q>M\UEcCEdB5)P.>ED<[M%`of[:!#G7&ffP\5PL0W?&Kj^lVbJA+"%T\G&W`-@BT%=4S!>Q.c+q?F*XT#%&p&9U&`T\%Od^rbtIkQ.",i3t]H"o'X0)^@.&3ZdrkX\eJ/;hS.+W&"9BnY#HWb.Z./L'$>%%CsjYNI-7j64)%Xtp83\X`1oubN^+jE]!+itB"?cLcdJa@0bi,jS4$VKjZq3h^;[OFPj")`/4F7-U'=:L;0CMSKR.Gl8O)]4BHqio%:biAFQdm)./:_c'J\Z1h@L6lr1_>pG2CUY(&6?YDe//_,UsOme.a+M/6'X0cabBqB)1COL`'C.`%C:b%>VK['l89V5JQ\!Wed]V5%8Ih%&Of36g)D\U-VNOP$:V[nQ,S<ICno;4*p89%GNCmbI;.W&]6t7M\e#^?k/<<(hO:%_Fk53fleH]\b<.Lp'Rai`AO@gf&Tuf$F%k_P+DgK>iqLJU@4#q2\.XGdVYO9dV[oro0("C2K/%25AS'^0)scRVoP;+mMG_-+`OG+P]a3p.?(W4UH$8E=Ug/\`K\(9c+mop6A[%2>pI0<J$^0IFf@_L77:sXcJ[_m'E$/%d1TMP7:;Xqc7`247*tg@2drZ"kuF/D2IPs4O7cfQ!7cT2=Ff=@,;tn`pJ07e`S6Fle7X\%K*X"""-SB&^@_gQZJW;3TmUcP[T6?PfD]:bq*f0=P^#dph%I):8'&J$fjns_(Q1HpH[bi_;3`*D[1&CHHMH,:j6tj1"C7-MiM#\r%3ko3819?aaeB\Bb5Hst&I2kq2WE*g9_kSt`DIV75js/3G1q#]VYo%G6kC*q^;cK;%0^iAo9i6%2TI51C2haU.F+hWJ!4Y9!6cm#t%1UHC#c=1ruC!&<59'CpIbN@ujR#d5$^`E\EXS%M(r30Mk-$5J`p0GP!bnf\C1c)f%Oc_XY(lBqS%\4GCKRJGH.$:CX/$s'Ie<j[W%:a\2?K[Gt28_^Q_OY)@%]@W1q<L?I<>F+;V6dM\U?sNK0,j43&<$\m,BJ`jUItXC>&cq3IPifD/E$-2W5UmRYi]HhGQ?SO:5"mjD%VaAo"Y"?6oM_qk>Z_];s>@hh4Kg;\<TNf,6"V9IorVlVD/R@+fpj>;VZWO=jfE_KX--8am\*:*o@eBkGHTk32UVD;`Oc<)LS<*%.%7*th@[;Z3<i<SE6p.6U[<?E^+g6-+ClrQ=+EK@pibp.fMM=!5##Dn`%M<E=;QRflKb:V%C.Hh^.aED:i"8q:#-Brka,Z-Kp[Z'rA%n93jILW9.1a8V'VDPu5PU2j`%B?G2U9-S[P\#WR/GfW-S._n4TZC9quVa!E$<k>fp&&>]Jq1ilM&KfRRq1iPl9TCdLHdNZmgp`me%bHV5`4!*sheqH2#d072Qi$1=;a2_ZhCZ5rg*%7)u2rS"Rn@?\)5BuOoWM_l]dpE_LN?UmY5g>OA</#=A.B8etV3o6p+:6]2;UUq7%(@r'I2g>8;p9=^9>4o[f50dUK,OOh+fWEXqA?QV6g+24\U=Z%K<BkX#'CR.kTT@=A-/+I^;+D=*I5"@j\S=8ZW>,)-.[;Y/DRN12%(O5cKM+&&AF6q#e?o,XH5sW3qMHrn^W,KEsMHTMI_JG(@[o.sQ4Gp,rHfqO+fq5^pemeU&2YJmWZ]cdW#\*\<bbadnT7tBt1?BCu%;&lq\0J7n\SbUD`="djpmbMea3@H0iAE7gZ!1;nQR4El67LU0@DVcjs6%$-i9RZH4r3^.`[M7T6R\,"@r&2l?13S):s-ZY(EZ&6#%>Dh;h-2#:-CN13_[pn%8gV""\.[V?mW/5kC"dT'3?-$6Q^l1Ba#2`$I,WbDikPX,dIV%\-,!DWXoqtu`\Zb]`$LGG:!8r(?Fk?lq%IB$JWP,2Gt[)k67><hDE*WUP*K_d+^iG76ISY)f9De*LeXiUhXoU%mYV4(8R28XJCk_lWjaB._V#%soRP"B.[X7(15\Os\p`u3&a%:^aEr>Q/8=lEZuLZkp\IhR11mr/(4PFX6rjIXKC1SKj1NcMVJEk`Z\*]#_lHNhXQ7g[i<"U-I79-5ZDmn"Gtj":^hn4'G<1Qt_Sb%k49/G(Wu3[l:D3>_b^)4__8=eHi4'-4nAe)Ap\?AdDb&=8[IPP\sL!B"0V=0,*#IEl43o%QeKPVmBKm<Ibccio_[oS7W!g:;N%ZK%J]8t34%J^a8?Bp.VtM>h0k(\p?8CAco+fWo`R&/fXhZ.q-X.[f7D?$&^9P2XGFo,b5'CYn5_+'6hVu?-_;s^N$tAJI>l(5XQ3pfM%lqj)fF]\-]agrjH:!<jT@]K&*I\crT`U4&*"Zr=Hc$L]]$IsjQmg_$!2;3SP,@<'G5G&6_].fQoZ)@!N<gSbpN8BHKFa[%4!t2Tb%'PgpIk[Mrm=EU:OnO<+PK1@n%,%lt=QX>BUU)j47T$o`+pmU@j5RGCJ^ub&JJ7kFGTKs`G0/*HAG]HQ+n%;9"di2\7#)ET\Gb(]!%-g=cRd'<UC]qcKg8NQS22Vk^n>BI&?mV#fS5*0oYmF&p2#89`Ckcn*#?nI!HMp_GHrnnC!B%VWoAXkd#Qe[c8DX'=P98tkcTKkYD%J6]cEG@^@m38t<\St#$DL`.k/??Z"$_pIYDB[RBFZ(?eC$67O1FStsR2),l3K(1?oB_#U(RJY56e%e!Q>Dk\'5B]"=P+#OHUoIET%rfSaTZ/7f-FAQPr[aDd6ePA*\.dt@8XZ]9Vmjr=>/_RN0d(+"ip4I+c*lB-;'kUP!1"H=r'gWr4)m>bjfX9>H2#$Y@R"n&A6&mD`%?6q_m.=K-?!A[jX\-#]JYN,eXR-"4a:HJ,=5,=giX-Drn-Cn+IgOs?e0n7;GHLHusdUO@aacqBPH"36'r1dM;qG&YnF[=R"<[[Vl%%N_kQ$38\ijp'[f\r]QJs3BWMiU@[d6>HaM#t=$lq5>h;$LB&40:eel>7n2PDdm.`=]h)u7a]P+$('H(.5;+4?pc[7($NV]P)HHG%]>29fa4N6Y[^T\No5m(?A[7ePnhEtc'F0YsC6^1Co@p[,XpN3S8n_K]<jpE[nm__bHp*p5K":<BM6/_Gp3"MCB[Thi=K#]O]=P)7%bdR+4]`Yl0H4NQ;SI37;bf+<%Kn62<f>aB]fe$jr[\%I^^di3XiEZ.0%T%Zdhkl_F5'$)UHFK(Dm+4GSXLruf#UB4#C`>!:!ic""%71H5#ZFtUS;;_*<+q\D7c[Z1T;0r/nS0EC_4=9$S(pr5iJAQ<\iPN,E)Su0I=b1+6Zgd)k9AhM5V^C!hQX$QL*!4m;Pp)!#ALV-@%o_:-t"I;r^rn%D.[-RlWrDo)=:C8Zfi<?f$p\l-(]<oa7@bi];EYAot59#4clFXCn$dE;+<::T>FoW1AW_sg++.U+bLCo8.*VksG%)scH0GouER^lYX$aZ3MjORZjs,*g+hm$!$>;r6Dc%9Ve(GitsFeuDIGIt-tD]/bNG.RflL#+/&>LZ7e`Q]UMa@dAH].onlnUT64=%`3/=8*KEAc;U"]+-pid)mMkFcA03$b14&h'URfq5;HP_UP#Ue+).n8)ENhFh^Q*lOI[`TO(Ds`U+YXOX4FgciF2"q!GW/h\=&O6d%h.u4#/Z<[Oo87?J]\\k&kBpPtkp=Ft0FaVWOdF")L3P$!K?Z?8]nL@DGnHq5B^<nnn<1)V7e@gL.%.NkU^c&O:4TT\HPR&GRO`Bo%isuPu\bC'6*3`''VagE(eo0Wd_7^2KHU>K$q#s%bD#4,7hC`_WJQUb_Sc_#BY(>k`T*'`65$8m#8@\m(ZmBVm!)m^`"^'S`2/S4o%g"ORqJ;#qfCY%f:+UeF?L$P!M)`@>i=s(l+F1;T<R79J[KuVu2g``Y\@g],t_L407"Y?MC[,L^h\$&@h#m1jan%*L&\6`PWj$#0'%VD?#+"B:*C/HRY7ZGdTiG^!%2';b(Kmn<TRBP5<YKN>M0j-4ru%&9+]Cr7[ueZ93)F0;bPNP.OJb@"`07/D6pB#n01r[UmeCH!!d%p@]Iu6nJ$N9Xa2h?CRg5PM?5B*fjF?`#;DQ/#@XN)+LW?98F(&m5u>7%RD22%W+jW%N#ckpI_@oj-l"fE.?C_'0cF2<H5TZZ>n!N%(9;F=1*;M&#,Xfd[SV\uEQ.4Y>.G&$q85^d/\'sND+kS)/aQYp6)PoT1A\<ECVP;eXrDIqs3Lh;g3WC#,m:[aLb0oR<-ZGk1`COn%\V9I6XmbO]ZKfeaNH]^1(tuSI>nfTSV?'PN8M'c)Y#*#&Ih";oHPRHqlCRJaggsmP>Sk[&iH6*Cf%q^biZPle.g*[\5ScS@YLkM5%SJ?Tore/p%,!o#9kCtOJ^h@i2B5/(TR"LOXj[>"E\4X[/;=qie@,`Kf=#fVh;gGJNLo9Z*#CH=5@m?gX7X#=Z!e(AQfaE=nT2UcB%ip1RQWmK`D:SRb(aI5i\D6"]2m4)+ti@chfnrcJLKA$r9DpTN6nio@lEiIN/=8<"97--%gni%U,:.iJI5<WlRi-[Zmo*\p0;gM/[%*m*!Ep''2$b%sR]O/YsI*uoIa=m3]4K=e<BZ,buTJ@J.]"r%066<dsD6i!&EG21fFI[u)42?rMY+=n%GlJopWQW6g<8j=T)Ug>K2%OaU5I4'%p7+3<bM5-eJ5ipk<Kh2]A,#KX?$!*3HtG*Hh8okVtLP*k;TcX@nKL.-7iTsjCADmb(Ao1k9rrP$NIfA)$[gc+I`C48Nu%b[.AAA$aQ[TcFiQV!aPlTM,i?I5&a=X,S--1iHH51Pe>^98UYo0oE2j4!>oNGQL"o_Ksg!UQ^U"RZZE(@KG`:LVmf_&AMX'$*<Zk%K?i#!,J'7UQ,Teu)=O.8d*@Zj)1S6#?B?jk)8u7NUOH95DfQi5oa8g--1JL::9O6B8Hl\r!+le@@A$Wi6]L?7;]`>q8^i*7SK6rc%02:1o28Hh)b;;WCL$KoIqCP-p/^9c`V;Mgbe%NBt;W<Z9[ci$X)=M6=gtD.6,,oO[70GgVH1BamHTqg<X6CuR;(3$^]_8MkQ]5f<%Ri[@I^bah94h%S9&q.qU^BUm5@bm4Np3loF#khl&qp"R/GF%,60&:hITgMK^Ug#q<mM:^Db->)*k0qdnQ*V"ZL@$<VpZh(pH8oKe%b;$F(f*WTZGHa/6q>CkP+!8r4MX`:]0G+YDDQXd3/l>:s8)gK=9N6Ab*<[me'Kcg?d&#+Hi%neS>)=>+3uqqAXMaB)rMo?*mlPN<%e7#W`<u%P?F>VI1,ZXH1ZimK`[)NbVB=6r%@+/s`7Ot*'dYX9OS)ip0!I;rZc@k"qChAljc!0n9EV$rBj-=oErsQ,@Iq9D%/*$eR%Ig[>+)u7%nE;\k=/SYoG8fRYS]f0lFfULJCo,%u`!f`\=oOf\!Ck2kRf*m3"YHC.jc+>iL@Q69lcl!(:o:l7D4:Sm:f`7V^kK%K6%_^Xs/*K7q\-7bc-$uH/=Zj49KIgb1I>P!;$LBjXP[=s\U%FFa/R;K<PFu\4)5QICr"*eOmrii,JWm+RcrMoe3)u<hg^c]<C3)<=M%l8oEI-@^WRElA<Y!Ll&YPl#2^>.Fk4p9).KobhWAWp6]I>Hr+$U+nfWFMQ84&!$6^l4g;tmT)]jSRB[\.T#4ih1L"fF.)fs7ChD7%5RrVE^XgUkYERPU]i\b?Ii!c+]SCoB3'1=jNR%$M9Ze5h&sB7j1b,\D+/u'"EN:lmZ&B5lRA6!mN@rEu#AYsBn[LmEk5ut#)ED?Z%KDr%)s*MtHA],.hMhY<Om[@6EY#%VdH^4^);.HQbW$@m^NZ$HcH8S$7olhW7^9d8GG<grbajW4u9p;!A"I&G_Y%CNNU>o%ji?o1q%%k,KoEf*Ala[Oq!Z#$uRYG>8FRY6<0Wm5<nq=&E/m<O(3YNY:o0SKTJ";+,)c4,@=]mXhkoGR(&p1fc*Kbod`,\%K:bD7hg=?^;1%g;*JS*B4BHrp3%<(UQrJduk<r,UMrGk0+%GoQT?@FMAfsqQkkVK:WgJNp%5hI00`lY_WQ*d6SQ%ec`o]AkZl!B'oNsNp(esCI&Fc%2QJ@MU/K:OfKTA<M_EBV4tA%t3i'R'P?cdlQRZ7h,J@._6GW??^a*<jb_.*sT."=%HEpC_*k?-8AVlP_SO5WJan#+c:_:o"_MQo\%D#&rHKqZI<d;.k#\A0fOri3>MqAJA/l450)?.5D)F5a,<.$Li7d)C%l[Qo%S,McU4Qe?u".ncW7eLYr_Vn6ot;K+K;R>2L#!#btG%_KDE"=^=_[]C]ta)kWZk3`D"8i6m.R[UkiQ[Vt]K3\(tAkr3BtNX3DAB(<9IT.I^0O0El,595Y8rt6IV2_RoIb!T\Yg=D<QmFJQJ%=RGDSM.+;49A*B&G:C,(kGVJYW=9C_kgW+T=sq)=4qaVKZG03ucjb5#=pRM*]#d7#_kh6@os,N<AqSr/OA.X-gi)<-?@5ajd>S">%2Ymfq[5VoQ:^(r_S"NiRO>H]Q%DW3M,,3r$@T2E;4%]4b[D^pc/QqFr%d`D3AeV$1F5$JM3m)VP+E`#-b'^"S%3c?t@oA28Q@eRf%m^2+V"SsjpQVB@U=93(doFnI-!?Ekd!RJ)-d/1K!qRB\X"J@*2!-W/VN9/T?QEq+leWVc8Lo]i5%i]X[TNCbu`+5'_'n?p=^7%t$%)REbR(tX`Sd$IO[rk<:Y5Z+[G&%6#jfRoGq7hKF6*9sJc2tWR+Hm,-qQG_d32VFJlIC9?r\dh6\q%A-\"C2"@A:6/321d&ke)?Ah%NCK8JN;s[^Qiq5dq3\<G.R8(R=Id)8.K]R]rG&;4"[$rKG,F/^EQqTL[as]QV%!!ii6)%*05F0F4m>Bb.f]b5+rs\Ln,>2I$oIPG%7aT[Z;\A4.]hI-(pXFg.:q/0(4fbO>)RJ/`NH%N!ka3b]=C7=J]mhAFo>"9D!0(nj2At/LUXT[X5[Sn6):7U9]\UFiMsk^j!q\?C%eF&K.#h1F.C9h][b4FM8,_$b!@-.;j>CMW5JL9[$c[d"]:SP+-+JEdB*g72Gl?KH-rG+k7BY,=GWrfDg,1VJ^:`qDbj=N]?mb09>%>QN4MY$EQk`>*qf&\FG\d*DDM0L\6$[R4<WmYIc:7ogL@/a7M#>4-;DJNit&lq0No:53/K8S?bW6K#<jn`mg`<!IYu2u^&jh+gD3%++pUT!Xe+W6X8fRKqk@Do_k*Nr$3N05T?;qN>os7$n-XX^j_!L:/q@&]mRBnb!7`u$cC?93<\V-&=Q':kIF2qL-R4Yp=-9N/+%ti%-Pko.l';AKmDYD#!ZH)iSRq%Ze+BHe]-7CC'nF/H+3SCH?u+!O/H@W:PnUZP^EH^P]3C=i(#"K0*Yt3ka"CASWeUhR=F?nF'EH];%_j/o)fdr/g1]@H+dX/MS]F"A)1!nZ_eL(HFeZ!YpH3iClenPI=KRuq+h9$?[m"Q'"EBrH[nG?"Jb.%K!MFC9HL+.GYl)hL\Q!-Mr%]5PNs3%PRNmsM.3T'X^JTi'ON1IC>W[Np`uOd@S:+&'kc>ks@0I?H+*U=SW%PY*r2Y)U/Ml>P9+Mhso;jP$eDg=X`$"H"4c\"AgT%NRDMqY?opsXW'Uk!QCFs2oJF*V3aRBp_a%m9&J`>7QaBPH_jW#@aEZNC\>0/A+*0PddiW#07AhoGm'!FQ@I,L%JA.FB;DS*3r'a'%V$@\:dsF!RqK=R`jQik5hY=i-2(06a-R05r\*pZ^[<cQI2jIDq:"_JkSd*.bG#':(Q1c&?l#f-Nk=Pu"c"@=pe5@\XTU7)?W_od7%HSXh$/M5e74i<'lR><G_CM'klc<5R<i-1#`Zgpfq3-U((T^kcZa-AQ*lY1PU5)Xh"^6P/&;03N9mQ3Q5Zb[B1?3:X=*J1`$5ObnZ%J_A;`"^']_#\J_DQ:,XH=!>UYe&OL2:G5ESVHI]eJK.8Jm%au,0B.7A:f"/4^a\^>Oh1_:nXWMY$>+oi:_bBE'CNF=d$PPMj7/H$%6NAV;qXUcr'H"iZYWC-op%;2!a\o@']7GIK!A,nA5Vj1B(hf^n/LGBl)A3&kg$Mf@.'R)"EP'#`@0t<EeE+>k>:9T5\3ADn?I=29%ADWZ)7D=B]d$PRE%UU\N?[A_;Tf$/fNiD#qHj:CZ^p!h487)g>9)sjO$OMCQX&&"GTg^/:V/'2ujhLUn;p0S&OH7+Jc#A4fcm&#A%:6F9'=D`mg2*kTbQr6<dYEB0o6Pf(2-;3/]aDjl.6*c.uAVJaAhBIioJUd/Z_<3H?Y!13)iTgaDX<gCN+DTEfafi2J\.@L:"l92&%Jh0ho!;p=?r3Y4?D7Ok3!3cdS!YG%&C#<l0fPmLVoS?,hAeRA6)s=0;>2,tjEU3a+#9D(fi^t2@&DuSs?ok0$nAECIa/p&S!uS[J%_>^j;bS)ZU6ks*rZUGi1iN9;K3[O#'^")J42<]GsHJum`MN@9>)ekrX&cL9`XD/E>rTJGS_'bT.#NchY@JDlhXU,gois.g@`m8Y$%1k'7/;&DDDT?gu-8-(qgqAqMCX=(/-K#IFsr,`@Pe<p?/6*QnElSW:1g"4("a0qd3GE_Drc:[sC8</Ys,)Sr@hd\8`3Q--XcZ/L^%`0.*kid96.<BWc:ol.2i>"CVf1g[hRKReH*,m6U`;#'G1-p+51&UNG\U:96tl0TKV\(A;Um1bllOApZE6Qc2Q<EX;l8gTM[.A5h8%;F9b9.WnS"9g-u`:r>'LZ6L5"3[3+?0A[-k@p3!"WciRX'pu]0:AJE+M)E%VKV0hDk&Xi;-%'Tc+"_Yb3Fq^,,4Q\dH9%QN19q1l%1gWn<cI7%db;M<P!/ETF#Uq]uIn`sCVL5g$P>/_FRG@J=8fjtedIJ_n:$PE`;oTref9SLc8`E/\X:@X6%2-*W3>lqGGGRNs2E[Y,%+SGhScj)Un*u@nJ,K@@9^d69N@@&1Up93a)<?q[q[HC#`_$#X0$jj?V,stSYZbduf#M[@Xap1lfQ%JH%&$9XZnA_3&`@..nk)#Z&%`+38';.\,Mcb7c6"J@0q:R]j58Zns%M<,LK]:_f9rC*tij"%OJ1<9./:m[h@V`Im;>.ap`R68jkBcD0*2SZ3e4D?lsr1khfQrm.u%M_W*_2L(>XH@B?)m=(I`C5fYJ`IaGO=Qkn^$_KpDG$8Jqc$SZa:<LMrd4]6],pjkfE@B]b.;B>=K2t^-m;=M1%;]UTS<TkApc26_%]=gDV;+>?3MEI3nmVM&_#PQ.il]&25VG/(?h![BEF;7uZ\Fakgfhb0a%N_u0FM"9o&KS]QF[X?["C7/CQ7$fC,cQqi=/ruCs(YV5%R%h_OFDZP.TP_ek\jmOs(2p[&;@F-,[t:Qf+5=o_-nf$K7PUtFW:P).l<GjOesq93#RGDFf`%nrnOiebHC%SG!:T@q;uj^7d$^2b%'S)&Mo<EAj08!X,p8M!2j)Pp_!Qh7N1U<Nd<G_ImZm9l?Ic=Wl#XdV+n_62NStY/-"5_oA@7AJJ31X.`"3b..81[+PY07;>^a8;U%\&$3f-K="MjCYUaV!1:6:kW@^Oc&o?Z%VUhb'C,C)jBY+VkP@GaXRMs%RRHnRX\J&>4AG`(3'\[8Yf69^nK6iq6[4@hV`C9Z$W^\%Qb&D/+dDm6b:HcW.%Ou*Vh,\=%E*Zg2BBY^Vjspp@NaCp)JI"gl=`S%PZ32ZdNCED",EcGV@"b!2PtTtW0l#lgII<)7pbhUC/`Yb%PL?!+,n\,Ne:YY(gfDN05"$uF^:\9^BFZlAkK5S9k_^s*"=l&fY6skB:U-)pP#$@<$G^1NO)T\ZZ:L>0:/M"A/2<@5!+GM:g$6CA%VoHhZ,IT..XHN#/GehW^V9WURm[t3dSB);:\7G[L<('sb)4g/&;lQl2GqfkKKoOpTcIU+np5+\AZ;H7T4@`(kWpRl/$DjklCkg\!%."P!mE-lqN4(k`rTN2Qc4k?f!C?B"F/,8"\:84J2Y_lk/\BO9'fphK!?X%P]JLZJ69&'e47U0Q:JNWW^G3_kUnhiU2;RTY!Uf80I%YlUl(d@SpE)@\f-ctGP&*FVN)foWDsBkoQEe`t#fVM`h[)JH.Z2qdiRO:dHV$C[9e/Z%mq3>tVRI5#OTctKYK6]It]A%M%IXjMAd%8_22_)@a-lBf&"k.:.=G&CticD#rmOBmJ'MiK0+[.pFGAZ)E&\4GO,hpW:2PXMI&$V3fFeDD\h\!">fdAi.*/!1T-)Q`@.Ul`41@%=P0R@iHEs*M0&4c?/>$*.*PJgF`E7]U`lkX<_N_P3H>L\;B,nKA&tLtm>^\V,LHk%Q:W]Im'o<H8%O1D4r_69*mTMug!O-6ZH!4C%=Q!GFY5m'CGH^&s)4qB2G>jlfc\DD!_5ZE=bV.f89A&uHe.h&^j(C+!Ng>*3F;=uGS71<5>N+^2c+S'#g6(+`C3-*&.Z[[?T+0#!%g2is0NUP'P;j\$+7^jVAc@pkHe71=I6h*>k"1CH2#3s?oPsfW<`5E>m;Cu?T!'geS(8W/.-CY&##)u=d#c,%JMk^WPZ+5/pr>;ru%PmOsZ@RiGF4iWT.bO8>-N&a14n8!][O4]kUr(><b%?jfLe<Ea%K<8rn6;Rm@bCk599;rbaA?A&KhDO+4)/M0^J;;!q@nNcFnoDS&%[\0nS<c8]LFW7F5/e]BGC^n@I\WMPA<-BG%Ym_K'I#AnA0eqU8!^\+9/)^cqjU,.W<&k$ILX?hi/@_c`^k&H'Ps#LH[Trb-m5p>g%:bgXDJR,ujA3OpXkN(!(B@+aq#rjr#:-4(<YOJ-U6`6J@L[lrKO@,q:5psnm4?\Hp4+kgh]1`^*Fp?bg[c!!&FP7US5[.P?LJBp`%mP%l7ZlD-o$p)K_JhqH2ZnppA.uEW%'6<;Yf.51nTp'=a5+Jge4n*@[Au"hgMX<It%'17P8_,3P/>h/NY"JrcHm5UZ]lWAS-tQ(h%0=)Ns+k!De-PbO)P0`jMU#VkdL?R.<hIe15PKK=RbUerQoS6Y/5];T-iO)b8284/,8T,[d`_Sg36n<?(."4.Q6le[uNZbp791k]N%Uam[EM67N&dZg).P319<Ajpl+fPM#M^69qd*#nSJ/BUqm6?]KY:!kUXMp\pmP>9aIT_;h;Pt2-;PO5<n+DT#93Xbs7K?8"W&Rtp*%?C:)&G,X]F]@""]N>"d0_*Qfb;;u+YID_$FT16BqbKX4p&gO,HlhTUre,q:DH5.VL`nXnM-)2od-J]rr60MCn82:l='<DR,/<,Vi%7KR5N7C7k!HI(p<H%NSc3<?ALau-Ue>O]-b0EndUF`_ctpnUCrS>]Ug*a_emrro^2dm.Z:FJkmM&,[$]Ks43NeLh.q-Q>;#4?dH^%;sS*$Sah=E9[0)O_t#f;C$3EBg[^0?ZqitaBhE)h12KY]'SKum"m;,.;+rcUk#dLT/;5'>0ptKm%S9g]GF/7sH[7!k1\pJ%EJC6o%>j\hkP\fH?+[Oa\RaB6DP;T#;0"/Al4A/)t7'dh#+$/+9hu16SY)8h;m$4uL4`3,C.th)lY@4HCqJ$HZmNU!pC"9RESHKlg6L5V_%)P:h'o#.@ONO"5R"?1b^f-c=s(J\J*8!YI!5J=%u8PI8l.Wsk.D:";B=R5mq6WU!pNg8+S<6t3aZSM_Zek&*S8WT'MSHAtW5CLg[%<1hKtZc>7Q2S"'gm'3<2rm$&49@mNMl*U%AcCpG`3G,Q;(Z%/(1X9MmW`-r,AG@cK,/%fjNf(nkF@gqYar,:V'Tl8_P,&\Xn9&am%O@Eb17n$t`PDp;u^95`j>:_9Kcf0WM*:XjKX*/!X$NoWRf;YG'7+;@SE`kCa+p6<@'E\ldSYoFI0d7jc8;1bkk=/uYG+LN7UNXYJ%*atd5-0LY3C7AKYg?CUf-0INu;U(ap&,#YDVR)c3Lp7A)3U?K$M,g<4)+8hSe@_)Ap$?b;p_c*bi&j459l8&pMC9D(d+!]ed+3n<%rY4f@L1>+G1U'ndh8,sk7I*9!YO:&Vl\AdZ,`JE2'&C5<O>_)GS8<0!\l3#X[B4pbT<YdZU\SjikOi+/*tGJ#aYVp/SI]p,O.DFE%VmJf+B!P]#+7>X>WlFYhZnbN4QOa<a^.W!gCZiT,[A@&:kN9\PVeR&BeMo-&:1Xt6L%F754`T:0I4+*nl"AQd>1P,BS6()Q^=X<M%,%\2/9Kp)<T#aF<NBTl+T@QL!GHF$A5Ri!61ach9!"8MU@kCM=g)4!>j6`A!A'as(YT8^eb)SN@'ID@&KMZi\f'thn?T*[K#bFVA%:h^_s0eke&:P7qhdkLaa&mLPs;\7*J`:-?4C\"a]32H;*DR:[M&'X%io>M9L+qqgl]N<n60o;!,R9ZteF-!mtXm!f6N1'CL0stRo%[?E!qimJ<j,Cs9\=&$`"QCU%;RZ[IGH]a9:i0DS2.`O8BK3**.nViFVi)R^o'<7=[g:nOF8@m2,(S3:EOnsI!N7@"uAY_Ls,U;tb%knn)ra(HNE9fc[fA"Y+e()/YE*Fs64`),D0BUF_NW',\Lh/.Ml<&fh0=_/A\<%?Z0B0i/O$4![s(!$9)WGj8'WUINmR0okU='e!(%:+<2^q,B=9=%Z1SrDYadL7rRBY[VMCE@8UjRoniAGbrl>26t.q4A\ad>X2d8\p+9gYJF]W04Mg5r,G)>8Hq"+>jg3('1he`?r8iY%MrpgZguJII,iT*oNeh3=TF0*Tmu11UB6FFIXg4Yf`8XuaoISjsc_ABKL-I9(9!W+2%SQnPHbn=%K9)PA1\=a"?E."U+7MVBj>B/l%G$0URDa!4i=aaOqcSfGM?b7]1:l8M3;G#u_Zcn\?laf'j:F!d&P6jr)<.Muin5AX4[:HaJN=<Gd(&anm@J>3-<Wrg`eK1^k*D&'R%jOmZ2[Krf_faV7Fbla4YJAJ:`Gtd<;FqN>a.SrCg)taV$JkcsQ.R;C0I'$uD;_@H31W+)L;$U:qIQ\!&&+ANt46'8IqtU(m5\gj0%TKlhlO'.AjY*RjuY9Oq8EKUEb^9Ie!._Le-WqDJ?F#?2VbEZt'1$e:@Z.mX-(S.jZa.LfgPE+KkR4691iA_@/1o0m2[j3D>\NMoF%9kqKoX:`-CHH6",cIZh*=>_,+\<!OpqM":o,PGBAVtNYU@,3tIQafU^ancaS-!f^]\ZEY2Ei2Cc.-"MW[J.SSHdUWK/sjGh54*^S%/p<)AlK2g;)E40AR+ArJjUaYQrQ4Q72XS*\N-?]n>=UlFkQ\In)O6YrmQE$,4.?!,1tLs(?oFRgLG8.DFr]WeRnh'9i&lq@A^`(3%]Hh]@?6l"8.HIRLo&Q4lF@mK;jEhTec_aX`V,KJAk4EINj&,,`ZKW'l$D)H.Lf-.%;D+O6*lV'`l'0b5E7F`IflTi8ZZN@_6oLTl%=M,PP>'iCcRnbE!:+^,>oP?S)Wtq<lG3Ng(V9p%UrC^_N.HStuX<sI.9rF4KLG[4DZg!^o&'<!`ZfuQ_V$gk`.5ds5_L$;]SPiD_%G7#F]9m8=Ll.Ug2;!bQ*3YdNX31EYlQd0Q1Q/QO?-,"!'GW)*j/tGT.)TQ?ol-scD/t#G3Pkuct?8%O;VfV.iKsKs-7YnN]0:#=F%d'#PfRndJTrIW^E8lDg;#*Fd?$G.!8C4nQ.=h:@`oW]G3V%2G>O[h@0H:adsQ/r:*URLsWPUFcA=;N@?=/TTuBNZ.Lh,gL`?0L-H%B9Z.$eLl^0P)RaZhlopfJ]%@85IOM.E=/6hnZ"k=9RAq:P]k0)0T.\bZoY$r!U+W^dkIFnL;d<!9=;jQ5n,&>R8T+0Agd>/?rE9H%HDRl#fQl*(YnY[$kjB:O>k+7ESU3iUaFE8.G:L(58M@Y:1$MOHiR@NK+*5\t`r9N-U:W50PjgPSB1EXF?#sX6Zjl-PC[Uu2E9oZD%(YtXqf`PH,<I*BX"D11fW!C/!bd.T45/n$W^WK8g`HAGcl5&;f:ig@;<B)1b:25'H[+?4Tq=rTPpm':kjD0,j?;P8["'-d"XfAu"%n>K&laQA7lL.C%'V3b!-ml=p=1;59`V2_mfM%6BfW^trC]@37m$gr`NNEp9X<-)bm2jAKS8&&]tDFaktO05gQHOD6k_rX(o*<P&<%Un]LN[c9NU2mRcC>t/]Z1U+1n2WZln/Ia&X\dmo:DWcVL!eSE#k*q_HA=R`M.PpVM,pfBu>XnFKTmLfJNhg82"+M#k(^bMVdU(cd%(A]OEaj-kK/MdQ(D`TlDmCJE<B'<u4@lG6BkN^f(%Gt>75POs6bf:sP$2%SpO-`u(7BKhQPQ94YObjK=]/rhNb*Qn7ON??,e+,RC%oMQQK`:._Q"jFn8CioRkK4:d'_k"(1b&_L2PNTXtP+8:c\3&4Z5OO7fc-45W`DFtibcSTI4*p]j7W6F20:teF.8O4XcbJF6;8X6`%_:nYnG:/nq%^Vd2"qJ]#dpp^j9<<P2Ar]8c:/@s>f(Q,'hY$gGHd;FdU<H-b"VPT:.n\3j,PPI%G)hSj*lQ'<46J!BJlX_SKf^p%%*F>)1^(AP,Xhd)!%&PcPQpWS2ch-7$-CY#j"B`@:?F4SqM+KadV47aN9fJ0Pe77S"Eq7%fW%i_0h.4lPmkKR6e>dL].E,b_nLMFH%55C6..od9bpS]>a(5c_%c9Fj,j<ZfQq<j/:T&V:bkkHF@OM*+3E]L9U8f=d`B5qaJCVDm^hD?`dZ!k[A4i^R:CZD4cWRu9p5[ukX%QC.amk!^`:p#MV5N*c7WH$TS*OmXFF4`VF>QcO.]%!K.o[^K2k6c.Q>0N#sOY,6h"8Iq]k[4U7lW+0gka;Fj+A97XJ]dOKVcK"90%F0hHr43'dVKZkm4/XWe&eLuDF1]rDuT$hEB*7sM9GbUDW_r_qD\)q-q>ah,TY'&d[Vb\$U60D_e-(lS(^?BGL:A<8dn3/^[Q7PmU%TVW:m,)TXIe*sHRZ2M:<C77UU>iHpY&cq)mdf@?`Q=G72W0W/SS[rmgmYtB_SpKN@+RauFb[U.u^Q5[(_I:Z'Rg5MhC-_Yg5Z),V%+u#-W_Ndh>SQ)\j5V;HUfV9@1]a1PbK3O6!SR".R:c*S+4Sm'o@.$MhlBuJC7)M&Ddc+9e`aYS^ZgZ.UUA,&Wj9)`P'4(+9f.!1M%[G7ZL94>8mh.Rq;<h&fZCd$u)G'_.[At($S%&mn>LlYS8]Z&+Y/RQ(J`c);kGa1c^[HXWl<N;?;3cEfVZbb.),RMhsWOMt'E@7P/%SK,4b2]0h44)Si!7KSrI0.ZDqIS+spnM@bc#H##1CtUXqT-VGaFNT(qd?V<hg$p4IZ0aNF':4juV0uO[id+S\)_4if0Ab6qSLGu0%I"<.+McZMME^C2CGZ8WTqsLB.iap]CEH^`7!M<?s29iID%*$=o]UO!%>21-t`HTJGii_^/HHM@]Og[*4"aJH=[*lJt&B8+lR',$B%S)SX+.E#YR?HLIL5^@TT*%fo#XghPO8Ak)']))m2aRj%==[[7YQu]+=C[S\t!3L>W^A)k3"$o$5Egu62"2Uq3FR"H/c>PPO/YRVd%YG!`r7%98!dE9oOaUZW=4!X\peT_b"UF=(M1pRd=[hZ;Bc%%Z(m?C#rl_FSs-3@N>kO0?bj]q'2:pI9F6`HS*M)kj.6(Ynunjm[W%4tB'a&"or[06U$!0A?/E+%J'!>b7]=VR(;g%$I\]]*uZuW]D=O?@TeNWS<1X=b&u4=X5XJB)rpq!AnnuL0>7FDq*h97m8@0n@3`6%WEFa64ImHWkmd""AcWgp!ArKTaT=;f")'_G$d^:bd>WHn(80%p5e2r'>S`ueZ)G81VO[n3p>uo:"./T#DZTVhQh!^.=XS"Nj@f:o%T#De`PYX"@GO\?%o^7">bb]^NKQ_)XF\ON<.A(>hm\6'=.HZRor)17egg@%-.A,t>ENMuMfZpuc\n=C$IBT::XaV)-jLX!s;#9q_%)*])*S9t2;e1P\uPj5r2g/0$(SUB_9IbM:-STHcS_S(EPiA.h=b%'o5e%XAY#U^SFZD`&LTAh<E-f"$3DC3s]Ft9kd>Sg"#;S1KJ%\GIf,n+AadDL'78IaTr0GWWgjp\GoF6hQ[jrKP_Bp%Q<DH`s%_-XZ"B5OF<QUpIF?oNj`a=_S\^f8n,4;SL[W*p5c\?GGNGm$)kq%PgU-sOn13=f2'!nrVQB8]ulYQO7*_UqIq=ko.*jShWq)Qbt\!JRcEl0e+V9$pKF24YFi*gF1;#1kIheGf2%m#_Fig5p\JTB\2GA;%.Au"fG>)&kV=G\g\,*)XQ:KftGE2#/^Xl7;:!t9/83O!om8H--\<$([pK3F$][oqm7;:G4pQEh7f2)9E5:l]phs70\.koX/F0D2S%Zf>9g1c'lH\CXN']ie3nST(di0tR]d^Xl8oKDP(<^XMZ346CQXXo%n=&49;F:^GB0]n*rM:F#ibbV.\I]n(P/N]U,$e9h/$*GSou%S9_:[T>.4i?m>;NNJ=6ome,$eF3oBZ$f('GIB27:mc2d>_DQW]hg*U#iBG!Ime,UD;9m$AC<r0^]mdtai>#k_-f"$cSICSJ903)Z%5F%Y+^"#nQNu`SNTD#C9U6YJZme,%PgQfh@pj;tHDtQ1:DCMELZ(6thhWq)(o;%tAGj;tkMI#5TDnXW^NS`uFBGcVFoi'*M4n;oD%Kn0u<!g??$GFb+c](c&8-cF0oZ'4YL;p%NB_T/)W`?XgDe'G21`4^WRM[SNcHd91RO-`Y]>Q*(F>98-pT,'qQU8+0D^)e=]>QE(s%l<2qFE;:Lr,&Jb:m1Kc"h)DI_Y/\J.*4M.Z0%.%2_?FoflcZ_uLcmTJpcZPt0s`-E$"Q?9=E?&j<9B+Ugp_=@B<go`chV2]Gh1`U%<I3[,_q]q9fuK-iVo?*%7kBZ76!N.1p4FZUC=bW574RcJhCrn5s'p3:+H#o_0L7(E3J,OXMaY\!D\9C%rf*ki]afn1Hg<'5Bh+D$%pMTT@j3M+$4?6G@ii*^k-([#[CZ>/55S5)tH'S0Wq7B&`cF5"3gasK8Q2,O<r5sAYK@uD00kS&+h_G#XmVQaqjM1ZP>%5fiG#$W5%Cs6=e5NZgV\?kW@2m#lZSa?$,$./BBUj);&C8V\GS]]=Bl-N-pp)u5PH2'cmPKcrG^DD=gRf*I"M2-h"Da"ObqZtgmZ[*"Iq[-dc%c7X7a(.jEs&UBIC!En0O>6I*WN%Y?H0dU9PEWCd[`)kdjTT,ou4cFo8M;'RIGFiNCA6h-^D;oho1.h;#e;10c\I&&XD3S*]-a?eO%#r(-.FW*HMap`GE-%bo&D`0LNA/23JYgM$*;W>G>;8W8tn)<)i?$q't\,P0j3.:`UQss9N+),trB%,`IfKUP4ZLG$AGBf6^&p@$s%p3(=tqKS?"T[=sMle7Z+5!OOC.'IJ`43Mhl^]RlVdll;e(!-#?'NuL.:r<9gqoe9BSl7QD^4ecRX<rsn*W.j@4%#=j046UB?E7"J%j1J_Q@sd010Di*6pVWVPrl'Dcps^n5hRnV^T/QM^X<.]\JS`9HGOpG(3LqTu!%F4.\V6bcnM?HhhT:%s!\h=<Z<RFt(DV>a5BC'q%N=ZF"n.82@jat"R"PDX8c6L\2%(Se'KE>[[K4hRlSehI)"p%MPo7X<2b8pBR(kO?OO^GXlZ;!.`*a$Ml52n*^o?PBjP<DZH!mbV1%<!?Q;"+IZaW3M!5@g%:)EO4WYcH;3gcZSW!Z0TJ!i8kH.-%Jl!VHKQF%6oFWc6pJco_?o.?'rXq7XgK(-:A9a-Y)/5Uu(FRD=X@Q%<o>aX8fE+'=K;ri)gf4h(!&mlqPu<0=#XZF>Wj=R$K^1#T9tgJ_sT(BY#uUWBUpj'BO>4<)q5"fklW+%_c<;DT]LsIo"p&$(]N"#%HLdbJJGa7Crg&$CQ_E'H!2doo_/HAZ-K\p]Gd7@PD/1W9GdAsC%Q+:)qRT4EZ8(f++*Ei=-6(Y&fW+.$/p3eG;r;NF?1')*+BN.K%0:aQ3B=OM)H**X;Hbs^b2)N%Hqal*7QqW\cV-N`1,7&@"isfksF34N*E\;DPYu.maoaZ<<\toelod#<3f0pL.9K`(H62+m?<4?-Q%H8@aj;qZM"ZGf0-_T_!YdE]/sMJRZ@Mg8YjSO2C3IkP[96>b1r2qaG<j%g2(S_+BGB(Ib3-;*)'4V*8"9f?R=2kVc8GQ[Q)^aC>G%#Zb:JKi.g-[SZ_5H0?non$Oj;Cb7c4*pRWb@jt+/L3q;/oJLme=sJX@kUbWDIC=jXq!W>8a?J;6qsF3"a7Y-7%gR2F`[pd8+Q29;%Fgm/@C$.JL6<-,XQRD\$li_EV-.mP<blRJlHa.&R$8$E=d.TA\T0&SSF><:cN51f"81!YHA^g/shc66HWnW[A1l:XlA6"_nPPei/%h4(n**DP^3W@?r#^,F+,d'3gXI=,GE+gta$C@G-u#.Q5Y936*ms%Ve58"?7FIhTJKG:s:$_0J#IZWg\&qZrR6*)CMp!^<pORS%,c%M<Pck<@m"a9`l0d_Kfl!-EqC@ir6>@LF5Flm#]RhDG$k2=M<B)]<NE0!f+EiWu!Jp4JX(]X[`]I7/6JdfLIItI9&2>33dK)PEAp-%)$N?kn'+3&U,QDi(okI[Z0XiT-?rS\UR4rSbKb=.Wf%<:7d5Ho!`nrRJ@=eH)Zo3^i+N1E#L)t^o*:Yn&>jD(iH+XG\fC@n4E0>!%eVEu<oM09*<$ejtACD=L"LuN+Y#]YkGC;F3eCqSD%1]h!9=697M]\=dYdUW#V:`n$]VB2Gs0],OG+5sr*4)O`<5/(u8-ClIT;J?l%f=B0"DFJsYP4(6hm5X%d74.^HS%M\W+4Xa]4mY,,]:WG<YfDWEg?lP\Q`Y^@*/mO4:qbt^P.sg,hf1le9R]hGGr]_nSqUe;HJ6/%%P)Q3'SbtV&D<9rS)iL^b`Hb&-VIKN!I'Qn#QslD3E!JSGqcjgd.PK<Z6.W]XG[?q$BP#W]d#nb6ks?2L"&9'oe%N^>U'ha'47BTP%&jD_+73EA$-<?T%9Y8oX8pL_K+_aPjm#F,,XXjJ3/*[<KG6Q8i';/qm%++1:*uotbj\j';T<3QTGsJ8r,TBM_Z7r!gNI:B_@0[13%TQ5#ebKX0DpIb]]l>AW:daTJ.(X7Zb9qdZ@4'(g75OR1$a%9m'oU'2.s"1]p`I?_'0><IJiSkt6gQjnhFDPagE)<N:J_H9f@5WYl%RD@=\p54h#i5E&(X`S/SjX(s7".&I>VA[,"O6j"1\DQ=7]`Y<*nAuLjn+_fWpKsrrH2Ya?$D>UDa\M]Q8_q)!.c?`d$;=:'+2]=.%f*S+`W)^RZb^BJoN..JC-C_Yo2YI\/gYS941ph3YDQ3)#CF$YgorITIq0Vlf"E^s2[;9^9UdNY9EN>(faX0CCii%Qc4eTi9l1\nQ%o!c?#_Y;;i5khp&/(p;#C1)LI>Z9MjgK&(_l$[,_M,5uPo[*<\Klnr*3SCk?-kJY99Z`(Zmi&-[`O@Zj:k]U9r0DP^Qe\\6i@]Pk%ei..;j2D@JRg2'N[^dbUmZ(dPs0oe4^`\G7W63`C%LR);^f4@?anc@;JDTuB`&'/0GJL;Wm0m[5qjUfVR?pR>[\(`QYgksiRRrO0%'X\22gV0qi_?FZSeEF-737@Y.BsPkU1/'G=l6qcN^m-8$Yp/p!c950Gmc`N1@julG)H-`*#;j23nD'5p`Q-,31VefZZ_7^YfpM)\%G#g@ld8TYgKi"::<A.;C5[M`9p$(a!ohLcE2fjLBp_ToURA)Xn%&j$hA'\H1efia7LGHCmTL6)A:/NM6FNEFf2+.2+i19/[@G=[m%nBN(9PKgo$SMYHc\I`t=ir[b-CRseS(\-cGiut?s@1TA9(pf=u';=E,roKaDDMT8mI(6)R>>MUmHIn2\[I6n`a`?b6553mdUl3I;%TOG,p(PC%L:t0=B!mL'ns)fDudn+=39.-oIUV]O?>#+N6=`<.=@@iWVHiBl2SLn+`VNKa#s'$:h_Rb8$**="IlZ&aM=M/qlb;bX&%B1e*YP.%n!Y>AHklTR?gah=J;!QY,X_tEp$Ok&j_n2+0/OMD6A>QLngd>M6c(#H,ZGO5c_AMNKdkV:EMF\6hKSs^6\"W4Ts-Is3i%mP;L0HL87;BC.J(J=S5[mZ4#qFL$GPoek)H^[KO>!1$%3o3Fq/J8okDMT,SZRaRdIZ'Y)qlm%(D@-$V>3B+<dpf>,I6<1Jq.#6OD%iq=I]?]7]QBA%dM*`LN-(UX48<*i6IWhRM)$$dDbW/@%cG!Vt'WY.ajI(iKXeJljK^R.nu<J`uY>YZ`JU5#BLImi1P<?`ELM^_(p%Q!pt(g)j?nM/YquQr6m`M>rOLIj(^lVDh1,O]$k;C.P'OBVN*c>H:%Imn5?/g%GdCb5:QOT)*-OPJC^gjhOA5%uaHQ4o1Qt-MF-2%F<><$H$R]ECUq7K[Ruj\('^/-<'+FqQ!pM_\&`ro51?^C<OT8ZlFqm#DaZ4^h+V5oo;Z=O<@0Q\f,,SUs"E=c@kecGnH!^mT4K[/%)Ra'.Ee(-HoA&Uin-,7t]q!ASn2+O0mfu#G,96FkI6[7Jj^ig(-/C/tj#^^Z3_FTH`KLa*9LlY$^kU6L`3\,.N;bOeFs7klD(/r4%S\lNuk8jSEX:N=DO,lOFM3$m(=oRm.a2%K$>-Ps`>&dQ.9#F-:)>GB$ipoA\fi!mQAjG(cPaH2,C.@4lBsR]r71mJ"@.Xo7jF<Yq%FM)s:<u<WhQDJ[`Pp./3BT6AFq;;fK\Dn'/GVE9-E2lCTd0mnF%j`d`KQ@,Z]3SH%Ykm"M2_A#M!Z/>TTS_V?n?6b)7Mks5q"+XD%'l:B`/RH=Ai0K:6]RoNr\4XZXl\<COopoL"&GAS%[*3sJdP_s@@huOLe9A][^"d;")GVWKaE5Smm?TtG3$CG.!KUP+2)$Y_<oN.:%6h56uO'^S5(ZFp88.d@>2m:fU(kL[p(Op<sOcT1+mV!J'%=*>fnf_$#>@d=U>I_I4g0>_YeSXU1GQn'op;7jgJHm+UNu3HJ>q:cc%O[(2hJ&n*YMH^FVj#KO'rL%;+:4*1cl,pZ8*skot)uS(![A6Hsi*X:20]8X<UBW:r$$(Lu23[D_qp;^\dU]u64u@,W(.I0]jIuq.%(3jbY:2of@K:S";s1(Q1OoJnCjn^W8):<J^alW'9,J`4:PKVpd8qd(M/uB=_*>2nDnLfZ[13hlW=pN8YqG;<*JH'YY9C`V^[T/cC%:Y]f6j>u)rhfj)&^5Imd(>-_,O,Usr3FaM;5;8"dV>uYq3ac6`V>uYp]!BHO7magClU_d2rI^eZT_\VTf-9.n77[B2f-9EQ[.!#H%rK"_FbF/J21thl4E^BV[Z>2,%#,[-DanCLVpJ>3k[L3FL2H>"&.,cP1_Yjf&o#IME6F[innHh"hdG`r-dVZe.JrsBMFld#(iRGhl%FZqQ#LKR8epan!g\8sB`fAa2c_-)HmF3,O^7Tis^8IQ5H"'ki,W$#h"+5,U(bUd\8e"l&+BE4t%B4eD]PReOZ%ML(O6hV&6b=1qW%fmGELOSZkQr2M9((W?a*q`J1KijS_+&:m%`.s087_.`Z"p:Kr#Z,2X[UWrQYYqju@b1Kj!6.nKG3AH1%]D?,)ZHeT5$cXeUYVMBb%F+DfgEeQ:70C;:O?mX9fa'rUVY5WA[L@(.tI2BrJ?&Db_\'E&eEqPLgqj59ZQ`L/,X:(/$7D(3g`lC;a@pn$JG&sY-7o"0-Qh27N%i&N\'_?j\7$o?4%3->Vdp$@puh$]Q"fG?^1j2fRj'F1P]b0L6RS@'+,@8@%p?3W-uM?X2[ka=#C:H]76gPQ'_)3;;&W/8`8)`<0c%\9muHV%$,getPF*[6m#U[ZBcAVs%ZMX]9J3QMi[?&Y1t;O,qF?E"fJH_dNXo;$4Vr\!QJnn\H3-[KE)XK[(n7AA.`2@.?Af:Tl0n%i&<n#/AOIp^pj"j&_K)]F:8F@3;p#cB1!gNh6r:(/*J=`MTl(c-A5.R5R#HLFmC%V=JQ',Jptfa4-qKb&_@6r-WsQZQ<q"U!8XuS%K=gWqLm:,NC[lX&5)p'm!eeQ>n#GrVM3U='=$Mc0(bl$?mmDl8U#*;L[r2Wd,69(G*6#eb`Z1Q,"c4*2%ds0X[(Z:$*S%F^r<.G%%![Aq@O>9n?(2Qg"!+W7L%Akou2V?#?oSi\'J*sXmlSiJ;Y*,g#Z8(BuEt4)]4*Ti0=L"Tg1#qN]%_mK66BT<257ajnlVF'SK(m"4%52MXag%BFnY24HuP7P#'oBkjmc7VH_qR?eQS6^g?O#N,XnF"sUR!3Up#rE^qJL(Rr5._(BrT\U)Mm0m=DsaH\@-50Z5H6#c=7X7%%E/#%sqPj2'rRdGqmWoJZ\c'g#O/<.@^Y]e'qo;Hui3E4IHgpaqMt$G$kQ.G0p/QM?LK*Mn0;*dT5CW-$0!S2gplPrO([adH+h%2r%[j-@g!q1Uj#2PpB(a"4u#T*9`?"n3+TCNhkIWr/bs6X=oo7rUrTaO7igA+CsHgFT_nH7A,X](M]^ao,Nmd<$jq=6a*&+`rL?/kgd%I[Yt9j26XHe@oCQr&3F,pm[31iTpa)IHU_CbclHnNDI=f[r:<+-dGuVKf`Xkq7m15q;"Js4eLi`+62t]s3&Z0j</d/bK'V\9)R>u%GiP:6pC"WTs7?B9/$H^/G]:XYH2jg)n!prCje]`+nc4sF4!-Y<K"V&TN]hJ_msP'+:U<+NI/:(!*-LUFeb#D^rd+f/G7P4df]O'N%aFE[r?[R@N;PIZ^r#">h[oV[jA++gFpeTZ7n,D;_s8GD]hnFSdM8u38l^rYhH\meJr^g.G'D^Za^]&F-nSdjST0H_+p3Z<)nma3?%n`Sg/1l_;*MslZRnpbA`55tCUXNlMInlNY?2k@nW`iHTKo$W;3I/3*$'7@'lg\':s2S\ef_S.\l*o?\Hj_$gTi77:6J%gC&[;YZZ%HV\5<#&f,*Igt2PlYlg[:@RlJDr]E<:VH\H]8)H]s6!$N?2`$k_)_8`ndE"&V^-g33jV$KH$aQmR.#F,;p`5W`K@"b_c)Ric*Op(%4\5HD+8a>B_+"4V(&Z;e^C-dNErF,Y^XapY-bm<;-!3u:'4Ds26[nWl8Gi&*FSkJ"^'VNfrJN>b3:cksB4u.c4o*D7pDa(ue['`B%hgKVE_p`8unCl?Hiual?+5jWXT0?q\*rg?Bm!$1To8hoReh_f#q=`En(Vb=^XR+875!IEh>s&#&V9A2Js2^fPs)_P_meY'>2]'ja%Y-0tZd`*A01BkM`_B8R9RqJr'nNWUWA`#?#mWs,P4W>;am<'l=mJ/8fB7<QgoB$Jc?gH[)hlpp8`ao[!r`PSYs5t35qLp>-B8lc5%je.id-52=9l'^!B9ik]3q:lQVr.j&$Y5dO]9:'S1EVTEHP_T3_8i?d1iMpS1+.SI4d9qsgl09cPrT^*"5'52>@eLmMp<D3<ID"q6%o%b6\I/<D@hsLHRouHNnq!@F\T=b2+q4H6ERXCDVpmhr(?.&Y9cRcqk0=7M.r5Dp$l,>UMgu+e`p'pMXH0p[mHBnM6GIku4LhQBQ%4j.1jrV,*4\%[.Pb2<*j2h/6Kn^>mJ_VY7\+921Rmd>F'GQ-%B5J;L6rqI=jf_>1(LGut1gqEU5@o#8b62^?Ohu,U7(A1Vt.[MdF%I.hb;NsEd<n%O2FAa6j6?N2AuVH8i5q>6NXp=;=?^@fIc+8tT'(X'GT#<62Mm<:d$?MGg_W\<0'lsKDi."^@#Da/F4b*--iOgP,d%SbDmHIslP@ZhDt`f3[;M(_YQp>efsoh:FkOs4>#5IJ_m_5J;(.g#$-sgca/f^Uf]6N8HkT.=@h4m'PO!XrMTEQcK,Iq'!.*:KEtB%,k^gFI!pIf^ZA\eYFg1IWRCZ]rT5EXC!0htonP1aIHUCW2f:hR`>?:=J0+F<kOWh&qtaAIhg>?n],uOuatpMUs4_I!^&@eKhuDqa%D1>pFqs2KW9=jlSfD=S"QXBd^ri(2MpNHGjVmfa=&)MN1EF%uqq9k2q*^AHV_k5e8o'XQEh#-c]/+WR!J,8Kq7kS*06_[/$oB*6J%H01=eh,b\GeGf$N]-#9fs8!J8i(dR+o85GQIA2_9O8H-R^Y\nE?Om=OdWbM)43\k8=kkA!fC/KMR[&'^MTD`?-3*",nY)#XIV(eM%ns.[Vi+T`pF>i4/Isq/Ms1IXpd,1Jn>5t,mkFF8KVJ):?c,]fug=O*s\UI8JD8a>>j0Q50]C%WVfsPIb(5qDM`,g-0]kHi^p;1%K%qs>iSE6q?eq;fln=5#Um)fJg(n;[<QHN)Mln$i5LYdN*^]O(?Cn9fTKPrjKmr737[p:Gg'iKS(>Lf2Qi&651sO5Ki-fUqZur2KF/%3VA`q]^jn'B>=E:5OUf7caPpu5PjL/HT1D1I.$,aRrj%,lgB*QIer,LY>)]Wl5),1pulV-oqsnI0:+<K/m%@?k$:,]:7XK97IeMm%p8_uDq!t19+8PQ0X.Pp=X^n=\e7\-tBK,q[dYh0kH/lusGjGAmJ#S^':O5b2jMi:U^\?tO^]3H&Isgt/agFdf?+P%A2s^>'00]4&%V/JQroM;+YJ)@s7jl-+6T76=dag3?RDZ0+NDgp0YMk;')r8c=jCLQDP9o7N/ct>%3n(.C)$<\!DJ;:WXT)\#4Qg_W\YE*W%mI`DV%h7E=A92FIDbFQ]2^@B@JGJVnE;I?s*d[sjeDr84th64QKPHAB*+.U)cMRcrXGJ:WZpQscem+1VipsYk58^79]0IQc1d#D*KHhuj-%T7?4M-d2-a*dd%10>%J>FTET]VoPC>rD(r3H"bLBK<o9@GpYt/B%Fm2%&UOVq>#@4cM'!+qpMB\^\E^_^;#$XY:oq7mJ=FVT01Do%]mB:i\">eWdeLfEDqt<7c0YP'Mu))Ho/^f<r<Rior6jak^]1_!`u[A3q>IMq53>G-p\b$BIc'ZPH,0%K?i,9HGiq6)s0^`C/arq8%hnMC/00_QAlUP6pM`o0P^Z)#6HdfhOp%RY@p+Dp+pO5;Eml3\cUBH#mDf;3o7t:!joCh>$5Pf^kT=9Tj])-h=T=6a\m-*p:I,:H6%_Il()'>;($(iFtd4[?uXDSPf8h2@<TSWp*:q<TcL9_n*`DL_W94G'/Nn``pAYP,ltWu'n??@Pt&U@So1IR,NZQS+1d<2e4:jR\GI%\C[7#E?%(s%qm$fo6tO.5C36-:$d+Ns2\DOUDDJ7Q1O)WB@n3EcDYB^IA9/#U#c,9^]*ML6g0S6f4LW1f.NiT-o[b1(jc#TC\ce#%ADd5qpE/.n4CR4;It%+)#A9>C#GD%oK:D<OB+4_/31'7Ia4?4X:9:@A=RETqf>r_0In(/DY#,,p>Ws.*f\+/W3H[g;%R#+5frN0H%!,\l6?bLXSM!ErVei+\cqpF=#r5:E+pKtU^n%HV?1(&$8S5'pkI$'bFrVf<rhn4><[rV)Z^H_P:p<o5`hKo4@=.adl#&^5LY!2C(%Xo$FNK*(bT7iYY)rO7PrM(cUWs1J*n5OUdUj5VN&$>P<MUp%H)rk.76K*T+*6WX%&J%.A-qs?0M:05(FUMr8jnA2rh&,;GfcTZK`%m).XA>LtN8^@Y6-s09W5gtK*Bl.`["!!Z\.B('u$CS0F2kRp\KH/aOiV^9u;A\>?4KOB'&n`O8(Gt0Q9q:%b;L2S/`l(uR9WqdH_%+PqSENEaFrI!4TPO)ftp*l<I]E;0=oT%SSggjA?dZkopJ07Rrs1E%R/kPjkXhn!^i?bcPYe#(i[aUc.5@--QHrK#.MB4bX:H)<KL%o.NmfF:gV95ep`VTIg'6(I+M#rV-!?GHQAaPMcbk4[.F_?MsMXa$k7QllpiWhX?M`nFhM(KVon,ShTnf/AadDK_EYd8mX:Z`(Rn,%?FkMhKQngCIM%rQEl1-<L^4IWQSXP=j!V\WY$SXEk9;ItUEX!H?MuON1<56MJ%PR,IsHn2"eP_0rG_#lU[<l<f7(k*kcDGnbYNYG%lT`+cNIL]na11Y<mpS4l/cRo/=s)])QS/<j-*CO%eD:'*Hi'73.TYoN]>RLS0\<K+^a1&pD-T/t;O9$9i$BFhN/'(V-kN9Ck*oGT%*-#4*^$tn(0C_u+lItgU"m1^@VjCL-@4<;P)3Ju%?6\d'W4t=J?JdsGno*tZn@9K6SUU!`0=L'#LsNbV5<\ePV]SLNIdF%O4L3Kt%eZjl_n]Xea.Q>X$aJI)[eW.E7T.,TAQ\R6!r7&c3f]qfap)cCdqTnWh+W\2"rVPFE9)eMLGFnLS^3RG/%pU5_BQ^[kO1Gtgg4+AY%V^HN]WCiGYs.DiO4ct6\D59[ADGCYm6Y8t=EdHC+4K?q/=?co'S);LFlcOF\lclW!kT9cI'A$T=p$#hJp_?YW0Z`gO\&rW\qtT9r%T>17$h00C%/ot1qnC^HaHK!P$msalEolk>f;LeG`SWEd?lG!TWhg+J/X5hZu^O#%-^QHiemMONhc!Td(Kd?LkIb#[Mb,k.a5O4D7%%Ji/M)uk2<e1->7hpft3UfJ^TpIP3p)cF;op\[TMC*/r_qJ`EPD_9>>4Q:bB8%YKbdloUUG/!pI@l3R?K5"gBk5T`am6cM?i<&in%7ajOXR.etiT4KkH6[seSk@YW+qp8a)3%P$\UM4X031-#b^-BMKg4uQN5/:V+^DfoEi*b9n_@1g<qe+%>Sn<3..K)s9h:(`Ygm(*.%IeP\2/+;J1b3tpo+8p9AG>GQWF&tP'IeVUsp\^lNVJ6"R\penuMbhWm"tj2q4=,LToXjS,iWJ;[gRnK*ZS,Y^kl6,.c)(*Os0KrL%=\mI;)^hU!rnh`o&AIl.V(;E+a`d@<[4a.<rp[q0Dn^SgZbq!ZIJLiPhu)AqB+_iUqJ1T[c&3sqT(oW6cHe[uEb4+Oo&9N=r6nZ-%$6RP4r:&-TEbk[Cg](pcTAL`?s78lVgr93?s.017FoKFrVWe&MXNS`O-h%"V3Vd37qX$LP)SKG6qV"_c?*CGC*@LS7NOiCK9011k%>u,26a&pg`q%1*%lYCA!UmH)7j>"F!oCZA;34X):fhu"EZ>r+kdH7A'ojun?FaCa8/Rt?7q&f4.P)PRha^KY%>T_.XVlX02;rUaI%!m=,tUt5C,jQjK2X!Dt]9?R#"orS_I9&@(Y9m8Vt?0bPamko5\>2-@NEkB'8Z!#Y!4*b\cde1>/X=m4:QIGLQVmtBl7c2X!*c>_o%f=/cGV=j]Kh"[8[dQ@31<c2LJiaCm5I$Sog^8+`*A6_p*bR6#aHHL;/b-G:@F7JDeg:TaX/$ePg0'h#W\VTi;[j`ct7cn3g\bL$k%U!M52h=t<Yf@*dre@`E+XX@u"ZE=q6G>RElV^,QOH)lDR4C?I+99QR0HG%XM@Upe*qT]&]aE!nK`ckXZ)DOJ.o"=j#k<l_#I=;gN%3oAM?A=6(pd07_E>rEL7?>CM3>OD#c'h+Mud'e+GCg=[Iq:'P)P\o^&Huqs.;UCK5bpCL'jlJNFXc9k(gN'tZA_!^0/^J''o1H!(%8`hNPgr#Aad?19k)bZX^ml&[8l9LoDC0kSf_9,:=@We2JS+!nhb?Vi"5&uiBE*Fp#+k"lN5,rLKIW=6.>-@TV[87AihsF!Ak4c;Q%Y@h/cp%b5$/`n;(9u`I\Ksm1^^>HNpVRt"B03aqC0_JFi5-L(Er(sHGQTfL!;jQ\s;`=(jc!NrGXE-OeCi-2NSp::ZZDA890R%`L%XB0mdmSup21b9Nn5$HD#^3X:']<(<-c<F"Ylaeb,r*7#@4"u0AgP!&$(9Z3NRr:[?1M&GGX$/DLbjskp79e>AQdVoMAgrYA]hZ8i%o'uMHU0F,1^9(`&q3<C"?:Iu*<h=QM^ho@Nb]gU0A5gh&go8`KQI>[LqQ`e3CjGX?P(`_pHdh2d\HaGHc(>n+^6_<\:RAVS\OV`h%+]7np<MrL<b>P``9!$1JK2PVSfufItVl<Gi6;j/e^!Fs/nfIAWc".i?]UJ"6ii_S>hY"tEgt8Q3SuO_.P2BrtgaCi(hVX^SXkQ1.%f8skHDXO"EC+ecKhO(@*/82*`^""Fph^eboR84B_aT(G\IFG6epH%20/+YWZd)+XTj.<.p)/]%^Rc_!#.a@WrD+gs@Aa:pSa_;j)%p#\`g.i4h``kH^mZE\AtF"M`Ie'>k1(>\'jcX5j>)-bY[V.gfX)9Z!\gn[#IR>Qs*CeOAsg8=[^e"3XV:K#'<c3&u/?oMu(Q^dA%%c].`/eLu.r]E$MlTW47nY\K^SX3IqJ3*),@/(p.=2R3e(0b)Acn%$_r:9pk:$X7_qk$@NcF4Jmm=4==EX"b,[e,YEaMH"*.VNS$D%l!5O5gX[[=-X`-K/ssE*;blkr5'.<P=qFZ<F%GCDM0:kA[BMPfP&lm\+[[h,)q4f#B%`!d'p]0ZF;D/]DlWZNTen(/0Aae9oI_C,%V-8rNe/d?]C/_.hLL2Tqh)8#T*+(4s,T6Qmj0+_bQQ:!1kD3Z.^"dmmrfCrs"F=Z*?!FjL'ip5J[[\jJD]`l19MM/)giRg"XR&ml%0Cn=/V4g?1d\^e'l_T<Z\r7$4H>&^,ROkf5ni?%AP+(BFo.Wb!bX4?8g*oR5lFUU'.lq)ss5)OKdq>,4g,=FMk.NEaO(?GDUl#d.%X$\si?8>5bJ7K^@@8g=I\J(n<-JLZ_!uj)qW'r>5?`=h5[>/;I<47m.'Hq8X13BpUT85l?OX(n]87Z\MrnJU+HemiiVDl'8h9(EP%kjtUP8M>3M=C(m=.9f<`MU'L2^"8L(*cZ";cf(`q@>Q!Y<DL85em=pEX3)DR<ml:DS!Qah#J"AVQW3A/UL\9:O_c,:K/[^3Ttg-"%KuKLXA\Qob:1*R>'mKdr.ifq7&X'[h_phDe3[InneOs/\;M^XueZ7/QLg-5Nc$!<h`k7l`FjB*NbkpMAXc:eb?Z_T."#8-&\ad+g%bHqu>H!Aq!I'(L$Sm%7u+O-26S=OjfI4"b*aL%r/0f)g!k''!Mg=5;J0DAA"9qTH8h^eE0IHW&]5.B:RJN?QkZr)8;p7LH%[).j4%9W(e0?B]22_TuA_)*#c^:FBeg*4uA,.4tn0,%huq3d'UlT9<oak=oaFVbrdn?e223`NN`^Q&/CB.Q,N?m-&%,S]k#F=[(i)#@o\B%hWR-JZs;'#f!SO@;ANRK2_dlR8UdCoJia=(P&0rA@;1$>$F$rB^$;*EAZr.pG-3'r4msA])n_&BX8TtQCqOgqWqRco2lFQj'1@"D%ZCuUPft;C_AmI@=3"'=$0_MnY18Y5DP,Ygh>hjHdNMl<=07^MfAKAHL;WQTW4.XF`Ak?d=*i<K4,:?KN<CeY:0e[ES5D,3r)O#'3%<'BgAf(A];3LkM4^cZ]$`MX*Ri`Zr^c5e_f>O9JW1$ouPjFb4l$7j\rk@D)qg_?[d1lYOC,`2cfmnMIlkF8W><\*7`*>!h[7T_aL%9<mD)EMb"QAqlISLBO;RE>UigE?radTc)F@n(E!Gp=Kb$*^TB3p!_uRpY+eeYcO<I,ukefj%K'#k4Y8WbhcC-/2OG!W?.;_"MJtm%ba?qHQ6i)1fSoiS-YVun>>[k_B!c&UHTRfXZAdBjYig_I_:3u\8[`\"Q4]f"bEuiEO=`NU'f=7sCrhEB*Co_!OD(P.S?(*Bd&f7q%11X=9p`?u)ba!qMT,nNh!D+eWHu8_B<MF3aM_;`(PU5!BCQS1#_)s_N4IkCeIVkKK0P9B)E8.op"fV$"o56:K;mL]KO0mP0S0@IQ%a^s$!`_n&)]lL7>5,Q;k)Ju^mF2b"8UsMtsagL8ODFD??QLYGu#7&1:Zp,jrY^E$\dth!jc=tiLL5q7LY@ktA#8o<5f,:3IBuHkL%(ch:[B#2Qqbcg+fW3[8SnYp!$0[EgdfnO!k-h<V%h`c7t_EH(7Lal_]7!O!?Tg+i'lS<$4cRk>>Ou]gfHnCh22ktuk6uKkeVC<C9%$R<tL;d%F(4"BD?aJ`pEAFgr%HejTLa=]P6B'c7F_UN'#6M#PX=-E?lWIq&,f-&P)LTJVd*G+ZS/TDHA]6)&C;OKXSGb<%Raf'Ah%o/pZ`K;Y3EBS:3^O;aDASu3(/"VM+DkD[<#*b%;[`jF@H/Y,+laOVX7[M`GsV]c:3Z@HluM3]mV7pt1"fsl`]B$9`9pF9fbStWcF%%bIH$<Qn'STo?KQ**Gh0s+b/*dj:+qS2o485::r'=>Jde]M66_s'&gU*IV^?]$cPao!I!Gg4m/[`;A$8S!*#2U[`UNrDS9OJW_Ig%L.m'ei)H[dAX&pY^Y^9=,BpK=.h:o*De*TMj)dC3[oo!1R]>/aP>*Pjms7DH$_J`e"KU!9R.oF5q7YP0Ag6fV=o9^"4HbH`e<Oc8%d_)jR>Ztd)(R_8e0$I7.S?**E<6602aCCde\DFdgpIh>8qqd5.d='-$%6S6j$G!7SWpc@S;N&GHA%q6Rr*FMHj-\GE9sVEJjLRld%:3RP3^WHJCVi2mLDC_iU&n;/pDs0R;Ij<;nK[#l614dW]3<[e^%Bn]i"!<s/5LsVpdp>[6%#?0)P9``^>XP74_quu?eM;,KnZOfu%$X[eZJAVd]gQ"KVO7":H)"B2goCMfR1eBI"D+:8PK^\TT&'k\;pAtZ)]u]YUqY(DNWo)uCfD*oRRp@c^$52D2bgRj`r-LI8U[C?H%kANpMSa'4IBcDf/CqcU;%$H'g>(Z_#VQ?L,A@ke6[<7]XR9Hgd1.[-C.<E8gHR$ta3/uD54@-9q(m&[noL?o_AKDp^=SD2Xs1MUU%er^*AJ-=m[!RVG[j]_Vjl#mhB%$ZZ?OrFWnl#L<mEabI:4Uq+@Dp<62=B8%R&(Qb8;\p(l/gO`2%p:L:q_C^:pn!pjqqNn^Htnhc%Y@3VHgXbA2B4Q!\B-am>,_nY9?uE!Tk>6bf-T@Y,!LA?(p=uZ2IQo(!r\ZSW8`QL4q0Y(Q]fNlpk/Qq=f`M7=ZRna-3EL@WOW*+E%02Mo%6?>;<9GQ"MGi\eX4CPKX&'8q%'_Y'@^TI.a[!%-T.f20\DIjmtWHrq'l5EZjF,>";:Jmm!nX<u-d/Yp:(oC!XH(+.fWWDk.%.-Ec7kd"/0[KU#N_m[WC%V^j6X%jsN3)uHG:SeaRT:0su@;4T0^6Ud(YXFn<brQYt!m(!^kL[f(%";dE^de7=U+Psh>]/f[Ye8,=%^G%hA\b+#@Pf/u]:T?OL:(`b_%f:S8P&+b_+mY#d-!Oi`3_oW6ft,?>StLRadq*i1Q!LFjVXh$4TG7dUW`P5bf*S;];^jKdG43Eh%*i&!1_d?W*gcH"fKsXLEcFIC=NnZkN/,/"#%MHNfN]-&O'q\WC[A0YW\h-\.Y[j6'"q/6ZDA8L0^6MZ7.&t9$gq6%&6V835;C`(@%ku:]XGnt__2SL]IP,iG:k=h4q#=gO,A@7)"&N4qpHI]Da#)VCu=grZHEJ!L!5XJ1aM0!4PqUXH@/P`F,UUB%b<h0i'*U@QgD@4b_%ZFW/7b=]h[YAu894RhA?Y(IEc.cF-@(k-KTM0#SsH9H;4k,"sL<ln&YCP-"]H(icOkp@Ur:0R,oVg!]Xo6Z+#0![lH4-H])f(>Bm%*aC9?.5&B8WU,10#tOos9N[H_Ze[&&OT\6[`#'H*HI[5l>]#[W-ms,332BJ6Oh[\uZ%X!To;TCuI's8k)_V,3_59Dk#$dDRl*a%M%Pij\YeVtuh/96p:.7cLH?;"-"C;BdGrHM$lQ"P'5P8s#dU9Oqj%_#%q'K?AmEQ[BM:T\Ti=Dg/C3`kdT';fRhICnH@a:VNYUpHt0%_]0<oD!2/^CLIcT>Og;jRYOXZr/fsARO_U*Xicc.[Y:Y_KY_G]=GjD>6lDf2LiX7@c-sa_p!i%ck;9jSf8L!EqEi9Gi?4t[#t5S"%!>402=n1Y:pM.,K,J)>;:93#-?4aVqKfdO7B'n+XY>L-qP+fs_em1@8dYkoG.(Mf9%#9-P"kEQ/iYFtU8n?5fD=^fj606`V3tnD@%@\uiT.Dep<Q<1_8p*/[:pYqu,Z7(m]@r'';WT644p6kqF9@BAgFol<]9Z8<S@7V[5Hh&_u[Tm&_e,.WV#,e[dG4%@PYN?rta,.Nr%?1uRDe`Wga9T_%IGU17"Xf=_9BT[?(CLm)C.b4KB'NrN!NpOYLW@s,C@uEYf\Js^)aM0XdOU#DL,YTH@Hm\kj#i<"8[Q.()fqFW[%$)'hgNmHX5b`cL"`R=]."g'oN\mgLUVg+h[6R=#K'^k1#.4Jc4m_@1U+<_hk<E5NLXrIJ*bnYKbF)m<EPX9)5:_lRS/\rl,lRVS`%1%<o2bOguH\]d^k@h=pNCMXN!+ff.Wkas=<#q-r0k(_(G*3ElI+[40MU,OkM<,okSg0-4lo4V*`"ps.umYK]=[l.kpV-8$:CQYSH%iG?gj.uB$,?86Y#;n't@nlgGU.\k'.K-=EL@n8A-@f7>STk0b:k"8@C\Sg*28>QbM[aT$6r^HN5VB,,$qZPOXc9Un7Pj$VgT;PY(%X##-mFu.73St4b;1>n1?%g='/4*Y(7=H)3JJ3l6@XiRbkY<Cc)/+`c'>$>+rLTqOL_Nb(P7%k'&p#[`&"Z=/rN?b+%PY)(r5`K9U%@DddDG2XjfISG<QD/<A2AW,uLeAt_"M#Tf=U?YlaF%mI=+9DmO]RJp887Tme6e[HoG9IV*1DG5BWE"Si@u;OK15^p5hj"Dr6]56t%q:',gk2HJ.ERNi'Z0\B`K;@,,$s>R/)(k2PhI/$@G;Vm^;HB3*(h97DRpXpnOch$@$$4AgOqsBhOJo<JhK^.4oW6"&7T@h/I="UF%ZC"?F0Vc/ERTb`EAlL@mU*JR);@WG$2K&R+]n`P(gJKg(K/1XlfF-sr9&suJY_+jQ=Me\'J.'\"A1]C=<XHo&YLK+@:mIYtN/^U5%D2i*WA&MW2`b$j530H.iS]%C"+,](?>l,Di>N4(CGFm&d4-_8bJk1I,WlisXAF#6[iM`l0.T;=n,F20i(cidBQ+Y9[!=!3?YQBZU%@[<u02X-mQ^0.3&/U*JT9#&PUP>(i8f3F'E=n<70/L>""gC#^@HF%Xk@VCY"?@D$8;c['_7C"&*T(FGNJB/iFg,[EmiuP"2Yh.&N%.`Mf1n8d6Z*3-LUY?A<U?EIC1#rpB2707`[h4H)e7b&[tJQ?FTI&0hs"njOVe<_)f'_.On.Rm?tg/Ocmf7`3u!.d%V.-fTf^We_b%.eH?:3f6Cm]9fi4`K-0>/%#dDU<Oeh/McH+M(4ljI4PX:<ROj0B9OD/4_8o$H%GK<"*ROl;B\jt>l1NMFg>V_&,TDADW0)=JT'e<%HkL>$NWR%9</E+UA[C>6qRWVaM/8W,_[3\4+VS)^=d:]oBm4r.ElrR^J`2B#$/+o*USSQ@>uf>KP:6KOS#U`Z#:Q&,7,g)^(mHkO%$It/c<gg5:-ERnaFiK]#E+N75?PjKcOOW?>UeJ`)3GR2@`\Q4^3l*QL,sV&,A;2psn;OALleRXP<VSjoZ4!'VUUKF:mT"=KiCL8Y%";FUD3%0XC6^_n@l9"j61(?9ZVHm$4-8"aNV5]U0jTAng1YAE7&o/6&X$-18$rJ0BX[n(%`sa,Z?@K])>`1+iWoB[(TF6\<mUB`T%iK(p+00kIGj?Ughc=Y_JaDqBEeIh8`E0<pu=n_M]Z(cn<!StW((DUNX#Z-<S<cVE6n/BAMNi?l:V7MZH$pD_/i=mjR=r'#qF(m,k%$GJD_dX5/k5C1JHUuLpOQ][hb2=58g$RBj@%51eH$l%858`s/8OB(6^hj=%U+;r1!Lr5HGU!>9X/rBB<nX%[&OfV>)6itU]1HuX:%<H/C@jU[&Gg'^Z?O#Y^l#KU_&VehQPj)fS>k>_.SepCO/ZgnJMbH8'!LTYVRQGp9()IAV$(/Zi]?)=rU.+LqY7d4V1&<Q+s:o6<+%JH]IP^S\uuMB$W?/:/'[""S`4,'$MNA8\`R6us_3J):XD.f[1C=[f3qFn/W[qq9K3qB[TF52TUZ:-WA]CLiT-^edHd5#@(kbJV)<%3;<=Ejuk:DJ%2igkl8,Yn.V`srL]9A$$&1SrDH;=:QG$DV[]0*ND)f8WOrtE@4KR5E2pB&^bmJ]Z9EGSgMMd(17!8VokE8L,p!0E%6b7EOUZ8/q^pDs"chMd'RAh9!UpEUX.RSp6qR'eLVh3Ip6[^239.C?d6,bDu7[1jQN9L`(0I!P;a\uKC)5J1FhjZ)maY`"aE[D&+%1qs:25(Re<N$7&JpHCI-9cZ7QCmo8ccYk.=RlFt<!:lER$LH*q_*SuF>Bo"L&Sa8'kS,mj/u0>mdV]%iKqHh3RGTNaZh`BW,Ipds%HCClee+l5-j<$lQ,FRGY<_qFik#9fd4g$WTenn#'OOrNTd[]2>[9"[/\ELS$;JZ7QVN7(/n5.!*fUn3<(PhF#($9!T$pS$r2+k;`%cI)<uH-rGbCaeT@[%'b8lbdG:9#^5%\.,fkqCGBV8B+7F&\nUm]Z^+dUtoemAZ<O_,-,7Qp"J/JTiENFXZ?@`q\[:FP%8oTe5YEK%o"]]ML[!Z[D9dONo.<oi3FHeajc+Hmp/07(+Csl\#@mf9,Z.8V?XL8n8I7sdo)u?geW66qOr"HefdL1\;Zp#J@!G\f`q5>[hjaLU%)j*'d35^%t.$k:#?a]s5S)_,+.]AL;c;)V-e*s::U&[/Q3_qmmlpEcFRq)(c+j7W%#`HeiGN'UnWk-PD;Eu''<]"aue&)1)b1!jS%Yt";VCZSY9dY2Q"Hd2*5fGdQk?ko.2T%\k]/ctN#UPkGCZ#<:=/k!js-5\25m1LK>$@m#cqU]enDl[tkBUW=?S0iItF]WlT@+h!6%A?A,Y@+Vuu?OA/!:h;!3XJn1!/D)fJE>h)TrO3\KagQ<rH)o>lJ=t&q?/-u.eK'0A=b)92X`FgpE!^aoP.$'4-QS\i.MH)-lLD7p%ONQ#<GT\a3R0/76P1=5@jd&W1@2ejMeHkWA)@5edZ#M)nS-^8&d3K_YR'JUG'98[dGqWf:<uMpb:"a4YS/.9`ZJ^#`&Z?<f:'Ydj%pklAH\?0BbNE._EC8]D($&H?D>U!0o\+.7#cMs,iEOsr8=.:CerJcn;+J_!og-C1)bLr4T$HRNl*4f-Z"h?4_>1.b>*ZS0o*5T.Y%DJbdHF:':+-tOXb-s6JO\W*h0*46_V4NEh/Pl/Rr%[Ao_Xc@bihBgJ6Yq0O2Pg4Dl1WN4F7.0W6XkAkimGn1_A,ptlIba^_(8lY*%6bj_8(ZX"ObSpQ<]^4<,!Q]hlAMW>YjjCtB%QS$kOF\K6)DQ]d.#Qj-ED%7)Lbn1TBAk1/Q"JhtofuRsh3)pq*)6-0OV]tD778Em%KK;-^1*%udU[DFapsN*u?Wp63]X0UV:7YT5"4q%4gqSM\TF@k$$KRX*lA(3$Au1TQm8PN=OAT=h+ldoJ]`NOP$o8oiR\MfNISP[9%PdRf0reFoJQ*g1D';Y_<Wgs0)bA!^[GX[n8=E3&_aL&!EZ7-d!rlXf3pm6D-Ui)W!]6GIie4-1.]AQPc1eFJZW`g`2HTeSjeL:D(%\l$LDN^P$'jiHYKCdR3%9<p/1"_SC",=uuCL0,"%p*R0K%P:1.Z5;TD$*i\*SH6o=&<9X$3ooLh]<.@=7P-'K1bB$r+\L>eiOO0K%$b]Ys,Q?\M4VVD<MIsZXn&n^q2$Or=Ic,WkmZO4[Wa<J5bQQJtM:)TnW3*,#4/;T#]_#trX/>"\)"2`f/H[V*M6"cEWOA(.&@#lm%fgEY;jjS*"%oTeR%>,"hL&@E4+ug)<4cBt\9)tuR3;j+^K%T5E#<nY^!g[HKdL<$Ce:Q?g4_\o!&QdLU95)&k$'oj;aS#ro9HKf:%nVD38JUAp%pDYb2:C4;K_AgMsW$KU'6COdOR&0f-bn];,q#:DpXO\mY73sU\BbH>Om`#bR4:I;He=WuNdK;$F4r$n\Bom%FXson2%UT=gKa@djM:)mPRg)P)sh6%r7]s@8Id-q9j=V"rDf%/j%(60#Th$b@t[/ac::%-S;3W4pgS46\b!q&S3<#_r/B%Uf02?_R'&Xn'H%a,6nPLb06OGZ_$(3hgIKYZ\MI8Q8mr%AO_p7&b(t5.Ntn\*&=>0<UNRcH^%Oo\tOZU7Xk.nRanESYTrFN)8W-m_O<d'NBg)1jTR@%#74aVgiS?koc`fkV)r8P[MGc^nFt]oWa!Pt5JqKE,QdHIlR6Bg&a(V58/*n]rP^O\)\#qW.Y-!;-$glTTRoE%Zcql"KE0+[?)CFB%(%atTi:<F/$9WEe!\TV[VU?H!0g05>5?W,@P_W^+*cDL@.4SA]j#0tUNbWf6=Uu;sn8TP&&J3r5l12%Hlbb?_Oj><q=]:?F#D$NN%J)&jgJa%uE(W<f:&Q/(75.#Z;1Hl.ScDb?LD9Yr?;$JK]2c(;D2/m@&>h/3lG7anJBL^]hg@6u7#S]6=06<AJq6?\g$'I]<3VW%d%=Tkg]'f`ZJL\%S=TRBpM5JVO^X*oIDA+$u+>.)7R7_ea!AgV_hH79lZb+@WKDhbp)8Xr==FiG1[ilZ:O,<-7u<d(kTkU7DNDHD!'%$Ji2LiFuA"kY'RD)Kuf]VipDhp>OF;fkT$7Y/E4$GdAs4nN_Y#CS3)+]A+?%[s6leG?:ime-3L.2;HZW]rAVJ2n;@PDS!+<'P<=q%LiT/#Ham8!pc#A04Pgbn*'Z4G!-RE%&o0FVq96%Deb=L)',!;tmiQJ6!fD;;:7m>['t'#B*uhQ%&UCrEVioL44I,<W]Z0(sI20d@%cC#Kg:/OEg^K#0`05'2?g7t<c7QorC+L-*i6o`XE+t+tq_qK>pYFrK:cl[f.nuKX+hq+U'#^DTA[+_i3+DgBf"UpV9M#+RJ($l-!%D@gKC?K[FPW'nM9.=uM#3DaEf`*N`2Z%+cMGgHRflL&+QKul;!3OA3F=gAF</*X^7.dVn0ISVD:HN!PFCYDW3lbT,AN$?6;2W'Kn%mP=EV7e]V'/jkFUXas[M7.!ek`i-Eeh9uO&=*']JA-gu1J,Iecog8Oi^Cl#Of^8>*BRgr)`I(b^mRj)kmsP+)<X76EkM)I%hG+l<%^Ib\j$[!pZ?-ZC%^?Afmp!VlYfqSN/m-E]/XH;t4\SnJ-Xp$qX3h4LZaqcp[W_b71,tFeY=>^U*W9`lTo?-Dh:i-<LGQ3Uq&Gjm$%Y-r+c<X'a'i,b't>@H#MM'*:b&Jc[s_1&e07O<adiA!kJbRlqMkhg:B.fkCuZPU$[QISu^fgSnLn9NQi^9-fF_M0HVAaASS=cV9/%gNM2*HJ@0!$C^"-_kf/pl=P5mjR1pL+^_=5KD5G#W,(6sOdgjbHJrg]C(j5E@-R_M<<tcjhY(&Q'I1TNVEKUJS`mT^6^`lS4bZh/%;X?]N+=gG.A?#-ABgd^s8I>;FXX5b4Oqcsu&4_gCi?6UMgS,XI%A42XSl_FDR!+VTG^#Q(A65+E\coXD&'11G(,f$CbSPM"q#b9@%pk:SG'C(`B4Xs!8BWL3(o<2%J@,^b1X/K&Sm7XlrK"a<N6Q0s2*6tML/j$,RBC>HJ(:[JT>Q3Y_"2\Qk?gASlpI<8MSBCL!X8X^F%<I4m>-\lt.GgupcUo(fDLWmm@!ga7roE8s6WOF7HFEa/ZE'O\#H%]PJdHu6L'!4FuhGK$t3HLn^;"7L:URpPY<&9Tn]kK?XN?C47%@P&j[1io$3mjKmCEdfdBX6d<tX<8-5*h9BD#Te5M+hMs79=S(NO43Nos6"IPDS^*tm,raD1aCkD8?n5e?>3&G9!'!FS4HMH2'k>i%:YN0pV>r/DX:H!aI["G,YQ3.VUGt"OKs1nuf0hl4bc^_cg1&")Egq;hUir!!-1gS-!<O`f#aMaZ%W(gjVOJ=(+pa5k)piX;UPba;%$V>m0+*6Vo)Em#<ZG+02aVAW@D%!!aALEY3E2NuhW&U%bY6>n9&BX3=$p&/E7dDM=7FI,Xb\h0GQpls6aoGK^:&^N32aXah#5Vr8%eZ0>6`2]!V19Q9]O-fU+$[^4r]-/13W`J5T=+*(.p/)OT`VDM3pJi]JB6O@Z<%keoK;]#kGb6jN?DLlXeTjT&G=oSh/:mUeP!S9Y%7\Mj`l`9A2/J<L,"kT\2A#7lC@,K&nW5fN-!6d:IqZ(8h+%Es:MfXl&^&%PAC!l4dn]%<+DQIVk(>&H&RmX'-0_A#2Bf4X2fYJ$]%n]SA-7C`GOr7TY\jm>'1k4l?<@hKp['!](&Cq7Z%%U+q=%XtP/D@4I%mlQ4[7UuO1!-<9X>Z<Q-Y:@:RpUs#u:Vd9\ppD-f^Ic,q%T'T4X3HA+`ML2hA6>i+K6L-^3&d\iD)N?9S)aShWjq:Ib`"4u,4lIpAkRE;/M:Wp_#og([\P03,`RY]S>l6Kpp*E7)E-h1BL8e@m%W=M5Liq&(T(Mp^C]cOWV]!ioASWn7P!?0SkN-Xk]GsFusN[?P_i+/k\.u:3i"6++@Pu?RhL.HNO6&HjCl(S4tJQma,@^E0;DC+fL%]Xn*pp:S&lmn6b@[g(5ZZ&X8(Wrt\f6q<`fp7)pjAiYu#3-0kUB*K^Rh+D<4eP/,"Q=r(C?&T8Q@Q*ZW9<+;$m^#D<%7iCG$MBMV%;P92'jm&AE*%oS\RuJC.s1#<!.fWWO*=OEq)/)i\K3IZnjt'P3hK:W_?$%H#5jd%-KN`*gHAd4p]X5+G#B$or>MYKIK+Y(!>pc-M%5.b[2]Kd_l[UVoFZPSM%/%^oNX.]Eo0'd@SOd$#mk%Shi\5cXN2#TbX7lS8.`Bc0t=J?`l$+@Ss<qk4/BaP'+$Q^i:O.V%fO#sGj%Lh&srfiAur'Q%C-MQ+mVrEI_4YF3gZg(E9t^&QpINO)7/)aEN>5PNf(D:Ro\c@W"Xo!G-8OR#tq:8t?HD77@Fht>r[pFiYAfi7YF%PO#Pcn,-7WR!_fN@Bpa?.:3,=RYT#!4@NC%:58$Ao?-$''AUeq.F3]rViKr7%V0*ZW>(Xj%#K*_0Fs#of5su,<>:$GlDD-^VO:AU%A,TR%NT8+Ye`\-X[AlJ,:t*T+BAPu%U!EXpnc6+"P)rqu0K5laJ#[;U8^(19"(&]uB63L*'&?>udh?q-&UT)T%c&)]gJ#H#ZD]hq%M49O8!E%mfBo7BJHfAC:`$3!h0^bd*ED[26pa!FBFo,(6Mo6Ga#cKl%)Q%.^N\O(>gYeW<EQ-eF"eIYZJLD.%qT30GTMM%Qk38,n%PDAhlE)(JM9rpo<d:1(\]e>fM%$^s&9_.@i*teWk%FCBW/9%m-,4[-D7Zg.]E(XA*"\r183,0bdmK)1Of_6Y,+S2iBh@k_t'BsB'%XSR@8.CJW_%PH.oU5eV;%5Vp"LK+tY7F@^(-6i5=(P0!O<8H$GM;1GR0d$jn$HcQq3JZXJHA&G%Vp=%g[1e:eaFi4W@]\RHb!E\!%@Xf-D^l49Sq-bjt\;?'-?&l+jKB44N8TQ;?5i4J>V5QI*LF"R"iL?$XEQ/8%_3WB/?,N3WUU<XQ*[NmG'gfpCG(rQ9B6Q:s:uOjb%1oS$DdL;:@8j^et(:p8I0m*nOK.S&Q<4eDL32^)<$WPE/fR3U,m+>S;onnA7U[/qLNO)*6TZJpN8JB/q2U`,djShqtP_+'m_YK)O%osb>RlK[$Q)P"E4&A8KrX^JE^Q<ZOMmfJeFKTGQ%9fl@YSSNgRA3+\ZF/5:'GW-%m6X+b87.EZAE<ZZh8PTP!=D[SEJCma_ju@\;%gC-\Jp$jXZU9;'gK<&$6`JKLW!T`7!]\B?mT8NIWXI?\e8`7GR-$E)0<W[)aPuqd2']Rn8&rk-bW#U@:\Rdes.-5g/kWG/!rXANH%"I[ndFP"V]KH"ZACpVZPB&7ftckV[0W?9fjVoGdUPAk0BA]#8^*'.u?A<_q7l(!&?c>+D739]UhOTl6u'a:DdTVo*mi9)1`YrX<]%8,F"bD%T[XQRP#&AjU6pe61@D&5o!cKg%ieEM9!<)AgLX9rCD+k3=RtD2<\=POL)sjebIp%+45qg1pl<i=LU/YB3WUG@$9M_o,^-%bqi10)XYHJU.-$Vcd5,m6U=p^mG0:uVL([7<(=FcbRpMDF-a6?-q"Y'V/6Z>=TQ";W&N].bq7k:THX@<[(JKYUaDN9^UTRKb!@r6%l/,*p+Ti"uM9Zl7F'mckQ90DHK$!R4gI]q5:^(:CZ4*YaS#bo4)O3>SHfL92A]SrBo>+;c'%G%1'B^;%_]@o;FUeFp>D;,VJQj=[%,m@"Te*%;s$C`lA\soGF%554ACS+c<GG1_8!5G1t378Ao1#K6MHt^O_+==kSgps@a0HCP<(mJDJ3f$m_;/`kJGakh>]<qCD8=;p)%^7%N(\jU/O?//7#hAYsC(eN,H6+!aF/Vg0k>gt-(HelGL^J=/Y=kpC):gT8$$DjWs)U0B7^eIZk>,s0?!"r/$U@EDHOD"5$Io-h/%/B9N[.2oTj<`-X\[W1"d_!ia](#XhtX5(qR)T?`=N0=i4"]EVsr1O2CeWb*B?tiS'*.=7?*-ZJ6!Z/14^n`t7l"$n=H^;TF+PpD+%056\;&AlFe%V-q$DFY6I$(FZ&8kf`k!aP880;[Dp>;s)+5A*t2HFS5pU)_+L3i<imLn,\50;se&\_D4;WJp;o'HAr4d@i/#A"a.X%Qb/V2GpI6@p0ZBV[N-53:o2$qeX^P^BkhkDFu9H9g/5fp_5CJPb=X"LUW5n#*<$$sWFDGf$nsZAl^gp.I#;H5<C2NN?4Ig7Nm8d\%i2f,Hi1),M_*P&Je>hOdFclRJcN?(&r4+0=.I4Fk7&p>XXfFfGdF4FZ;A3Lto$r1k%OF+(;p[oc&^f"I=-HGOk+>ie^3+>%ff%Au%Mch80C'p\04&\*]G1^o*2skTB\BhoHp[E,,B)WV>24;"dL\![J$Qsd?DE4X*\jNG<]pfu[o:TAb3nY/YMU@el+N>)tTUCM&dt`@2%+?>@9[O/9E-3HMdo7Q_ek]8#khqJ"J.Nkb*KdWr4nB/B,M2G["[$j$2.8VGs+E%%$]#!@:6@>?KN^!]r2A@SG/KceTIIDC'4#(q,%4f[!TWGRfsSAqGO&;@h(+1c+kRLN!r?o:j/HtknNT&q/%cnS%CgSt>@kWu8H1a%`ioC,r>30/c_0#G9N3DVtPE(%:C67F=Xn#LTV%>QgQDD@Z#NmD86hiWI<..:Y&RY0kW5m*E6WJP+=(65WDB#(;!n0WL=8R0P\29;Xg!13+5=)%*p6]-\(.P+`mk0e\p7OR5%JEQ[j!%IV;!KlL_ngBp%!rqsUXqMXZ\GoX4pj>PAI"*?7[d`dm6W\=ir%=p_>FgtP`$O]qC69_p``R"l%b(q5N`ATqK<".n\]k9]n;cnY*j%7J$o2).40iGs\i1CuY)JAPgR`k]jNMNKcTSb6":)7d\nO)0tFf1^D/=e6@#UC5RT5e/OWc$6_>a'",t8IA1N;bf=Ep@l&Xbq1gtd%9@X+LV4#sIQfH\`+B+G<UFpT+ji+AVkAci&$c436c:H'@'C9epFF?]?2to-2O6@2kcOTV@2`f:tC,DukXkd9^i[rET9J>g+'`q1%%H>3!FC;?"s^2:apUeD8VRe=(D?es[mf;Y+L"hUlr?(0V)+CN_$TRn>=.e%"PqfAj1qL_j^(BjRrk^1JAd'6;nS_dk_EWR4YH`KJk%ip]ZfmeJa*Ykf%pX+!s/I7.+(/kJnm1['[,7;1Pt@i(n.[WO,8WsL8T+"3@C68p@8HgMPsY.4M#>7aG6;*o*k;o2L[Zq[4&#1E\3%MaTLDA[L?7CaUV/dJ"i.Uh$b<S[mNe0m/XmWc@![D!'"if=s8gA[c>'*R!&(0TD90-i[5s8>2p[/UE[q$!4BK/3?J%lkHso6<'oG%,m4`P1[=Yg.mKQU!iZAX<!bu+WQkNjeSS4;#D<#'6!:L5TRnQ'T04,1\n3UAML%qsQpH@?8ir5F&q(/R]..4<<\[#d/#*2C#MA%T%1EA"ujCkmR)eB5[RcV5/.<;5+-#nn=#."2ENN:tXMkZPBl;dM+]ji@98[kXfZ5]eq2E14)C>\XbM!DrDQ\0:EoK\<e9Y"1MBJL_+%F)=<RM,$H@!S+ZRW(29/Ub#("m=]7s4%=e+3#BT<eMmhbJM7gpgG\f+3md37q)<N-i,.a"P6dC?6!#eb&+^ep,7&`U%3]<Q(E1p^%+t+YTe^:<I>()8ZC?IJW1e]+-:_09P;&o.9PWN3HF20G%UBq@?h7O.C7\]t/?A8,MI"A=jj8-%*-k02MnOLNDW.SL@hBFl8;;oCK%*^ms*%Mi(20EWPj(AhqQkUuQOKs@E*15.--?<a5Qq)PikMm7e?=Z<>B5rs1a<H-bh$&FgQ6D]o.'5?+U5H;B'31TiZrRF\0I7i\3%Qm8pdPQ]3s,3m[oC;h+ls/UmM2<J8%;\ETVo4fCD;&_tZ/_Ef2!Uhn65ppo^q!6ot5kUc0&YI[>_Zeb(SJnA*dp^"5fo7l#?F)UG%=)3D^<1rW'_:g)R8EmeHeTgo.-ENAoFGf01e[`%)TaYf!CklbM"PQ-e)a]47BThjg7UF!1n4mZK/Le3![Jbj34m`B;1cT[Oq_n=u%W[)h-k<54KVkS<9`F7OQEQb#IDR.rcksINPs)EcGAocg7Paqk49=I8#Vm^VkMI:S]ndW-K?bDTsE)1#r3\Ym\^o9r&e_`/=AmU-9%Z2lY),pZLD^ZB9@MTJU;E`!-@?>eMWRr`1nFDX4FP_E1nQVX0%j+e#L5e6toB8N,_adi6+4sda-,+r0jI90FN"_@,$^bS)]EQq/'%+*9CT'<qBAd3`JC&V`nue`N_g6`&1?4kAC6KesI*r\@C\G:F@F[;Tt\*)m8kfg=<8Zq8o_ap+/f*(1fAVtH4#\;1W:29?RD'2Mkk%ZAR1"UU#]9;T+(m<6\'kpWtWhF=]<kRqPbacd@38N^%Z"jOi[n6ZO%u'1?hIK9Qoh-^mk<DKLLSK`u15^Ho+9.+>'%CGk)tZU7OO%_jeELB^emn7OX!)HXJ.W45,JL^^/e!CO<8G$u8)qP\(9QBpl:#]kLcq?@j7^BR,LE\B1>J.0kQK=`B1_4_4l"Ht2b1XB^PPqIZ?Y%);Lp\IgN#sV\Oo8'dO?NP8tUIe]:T-&Ub;rXkP;>%Lm+0#`$NDgtu"7Tg01=f$teFiGVT]6^B`JOU/+NAEn?Cj#0<P98$g7ClkD9%g.+");/[ZEHt%sl^.#V5NI)?bVs0#.YM"/X%ljNF!.p`4plH[p(Vcun]Wub:A.&mS9uOs[6'[U=XnW5hE=fE(IV]A-3%-N^1C5B.%8N0.#iCWS6,4auIjmd,uN$Kir,YguJ;?RHa@NG1$F;XMLC_@NRcGT6YaQW(DHXf>LH'-fV>=9Q^!V/e"rjV/s:+6cSJIsuI,_laA%a6M0lrR8KC9nRkC/,#n./qA`@eHCk(gD?.-@nMVP71h-mcn+<38I*O?\!.E07$ASlZ/qf\Cm`1-V)QraPU&dD26YmR^C&P=.:2QX%\T3]P,rN-0_uLNT87raTpU^foHV=NL!-:J41C"ZFd&\Q4f#5=rFGDjP2Ik22g-0*[0VWso/OpTc=_n[T"/HTlMNkB6:e;^Q1ek6M%UQg`lp/k*r#\!fh\W3%=B_!KEM;lf<6W)7DBV/:#j#2`3ZuUDR5$_$A&i;[\$rC!223K^raKYp!#r,]cEObOPE#oUNDL5%&fIb!i%8eYa'_p2C*EO2g&*>PDJ_EZfqI6XN7L\!!.4fkMpcjYg"1`7_Z+`pU]o6GUjEu"!p78`c6\?PNbNf56r^FTJlR?4dhCo(p^K(SBj%R0n7uYrd9LWeU!b$3`prm4qFH<S5hHr2,=M3'3Au0TYWm,&:F>&^fp)fUqqgdb_;$6khLRk.SfRFgQ'riRL<D\?O.`CWoke$2'.5%CTdH)p6BMC9_bJ`'8!Q-LQ^8)^FXDKMoj)k!0XETNXN>H'-*Q_&L-"XitrMIP!U\UQ,rj2I1X4qc(<7BNQ>t"&1k^g/Wu+8M):b>%L/<#fojV:2L271MMjd29eAZ:"e)J*"]k9Qu]4m*VM_mA[m%m8DT$OCei<".c'(2i'Ji.OkhtNptjoGXc_g7&fB[c!"OLY*mjaghI%Z-AJRE8KOMKDIeC2;^>38p9hNf((/JWtq``9ii6;,:U&$-pt25?U:7LkCXkuW`j,O.X2kW:[tT73G,cQ6ojDrEnG%k2]&WDDIIUO%s")R=Y9&1##[A#t<t[H(M3^<aJu,>8$cQcZ9iP_:Ypdb^;rkh2U'Zt7i+Y)NF10`67'0HQlf.gV%cM0:&tFM)b/!V]24DWD_;,Q>%EcS0_.D"eS=o#oH9GONg:ME_X^5&fN=62:?n8oPoZ?:goK*"2p&t*?"cjU#%K`K^Q7A\auZFQ"i)HC_>oohn4WFc5;fLBC%90aD*%d&2lS/(PB#b9FrQGht8O8_!]S^h.OdX2#/cEbr4k76Ak$VAtf6WPtm3V\ukpPoenCm%&sAJ\9^rfa&g9&DHPE;ct/'=%F:M!h/,*%C1B#]/M<J7(ofO;*Md/<3e%TP11a`W='@kQ%q:?Sq&06MaXViM<T[J4\!un$mVWe9YP^Z85Pk>b#DXcWh)%B*EI`]\RMR'-EcZOl%'O<[g?)22WVKr(CE!0<IEG"_$PrqEQ8=#'8C@F3(dMQrTJgajF?_q060fI]k.PAY1#.T9V^d^a[IMZWa]A.;dH[+BYT@3X*5.)]i%s(q$Z$RNG&^ZV[?<Njq7&YrCa021Cq*a.\H&/j3rlMf@&NUD&WNcLR@-&I=03=g>(`"Cu+nBo0+e^=+:UJi[ZMW3Ee(dPTmkcp$m%+fmQNVr[V5f>@Ct04BiD/Qe01<c.@2^eDrPXp.n*1[YsdaTF'bih7`XUI+RfMJRQ_@dY7j]7U&\PaB?4\ZMPE'_:PK9\*ZQiKu=2%TfE!t:uZS0Fc+1$^ua\B,fPQoYRDlT,Q^pg*'-o[q/*qbNkl[3D\F]DWnWs>F%680iFn<A%n5P(IZ-#_W>SE^([N71cnKes;0jc!%V[7'(1FBCbEI'I"?3i#Wp`:UGm%33dk+tm#+95HZ&9>f(aXJ0=$JKb[nSU1kLtfN)HXp'?DqNaci%EO!UnDRPQ3d%LZ2qC7>eJh"%#Cei.SMhhh=k3)<<Pbm(_^8;90Y-Z[k=%Mme(j%6lFTch+J!sjAYQCY&k)Z\2+gXnYMS=q@8'N*f8WfN&_CO"LCWQ.U1=?,9bkL&%[e4ap$"s-M&dMRl7<>5kn#!T,8sdd9TH82$-jG;bg=1_KOog_8S4u9W."2HS]>[`NB,^r@A@#"UX;YcP4PK5O$A"bbpYXKG+i6gu%iQ+#8:ail68Yf9f/[f5OG;l.J+J.AAQBQ=5D@;HP@LCo#*4R+^g"TZ)!$\/t]iWd><h::l#,[I8ZG#\oDGn;FnJ68Vr],bCG`\`*%gHMPoX4ahKfYAkfJfqt\[hr\[i0dGVRQ<+rL7i/rolYHV&*Mf*OK#TS3.F%1P57>0_.-bETWQ8ho@7T!dQ/g?ZjLd5mR@^C>2rEH%>?oDUV?ij^2.WC7c0qHWiNgY*iCK]9**5d`+7<%Rht>X_+NHHgIY-K%]"$=ScM=46nJi)_OtGb>p[:Q.J]R,F]%^^KJ^Unr4M*jW%BTa/BkfUJhn<6+Sc674Jo`U-O7^HW_H^G<&];U)#7\tsFq':`&77cujYMaB9CXL='h-(t1EKt@SXM!q6<!o!Z+?F;+G4Z3i#'HLO%(Ti[k>D"Iq@naZr\ph@/LI+`.[i1eY*ib!smR&8`p&a+<%LN[BiF)_6l`_$)6oS^2VP%[jj(S")Fr+)$X)q9q^Y2cieID\'G<@<3%8E44'4tEN67M%8VMqO"!1]r(6\=gX%Kd<HZVC_c4Rb[_84C#,'`bqt,Q,jjGj@,tqW,\:PdDcrPFo5$I=Q)dV/ZP?/G+;'qj]^9O%Ab3#DX0%Wfn#k9A@/4nXAlB)\Q:%Nl?TdOR5\2o?gRaH<Q6XG!Df4plS>OO!D48(sOTNW6X3q8A86q9m%`3Y`Zl@R_-qjoY`)F=S%MtrRd#<[VHa,P)gl8+(E@0O/s7/7F3?FCRn:kdt\TcnC73P%rYiDNCAHoG9&HOgD;jJiJKWe_[sW/C64#cYE;WKNcWgHY_p%MucN%hJak/XdTW_bc5f8b0#abaYA^aY.HS]$V)kd5DL#TU\LLufsV5uKkY.1rj<ZYN9LNd#,ke>L'$KEb"R<,&hAT!eD$!i<!8^RH9*fL%Bhr>`jq0$k!EhQ7J_n"/DAmp[26mlT.eFD;U.P_4=LI_9BsgDcC"d9JSFa`_Cs9p8`iLYiAYE":/nh5;gJ<0[i8'Z/ZXo2(X:e;F%T+XXY"2BJW6aPcck3=3&KLMUE7sa&]7THS*dW4J`gIuHUA(<Vj5WM]3Bh9tGZ.9C%7B2K.`])(.'?pjtQ^J[d9pijrBVNjn$J%a$%;%-mgYW2i;/cbg2UdqU`o78Zmn<u9uS9#SO*!5#L5X>W3:0GhE)YL1,nY(eBOW*jsFS]EJ-+m^lZ]?6sE.=dCnBCp@Y)8'Q8U=7V%[OMO&a3X)Ci;t$dk#8-U!A=VrmCn\\lLLa?;I);Of<-U<7`+Zta4A5@;kJ5m=Ri>#@>VRWa4P-aete#H9c$FcT]sVNBb7n:j!EiN%GOb\GOtT,HhHPrR:i#O2D=KaB0ME1UQ*+'-9<1i^3IKXJCF9k9IrisjH3H6252J3B#F[iHSa,S^le,pd@NktD`XA[-Hg\CN,<hrf%^2Im>dF"(86UZ8$bc)%)qQ502E,qRO(IDrGc_SY)S&GpY:,F_]4IT1!*j_s`R5_+HIK0^W>2a]``#N;]-RlH\*\Vfcn5<L)d3,X;%j-V:WC[cR'bq4:_3@X``VeKXQq^P9%+IJBl=HDG5r+a^#rIgM9bb<HV#dn>XWjE*SA5ccA9/2*rCD(Bg,9km\$Smtqe+XWC>@]p^%"ACOp*X22#UGX$J%aNr07a6@3ee,`/E>J%8\pCb#mkC/cY2iFDd=`dk;@9?s:.S'Z<3JU8AOD"4-fq=M6B>1%n@EjjP:AN@iOXP>%X1(u^Gk1ce4'\ur[5I&[(GD`tJGYMKr4RWOG7>]K6'_t1ZL=p4RbHpj0O;T7Moc):4Ef<1rVFbMl-AP#M7ISJDLi"]@47;S6Nk\_%h*#Kf4]$Nc(^jeKc+)g.P1>D3(@an%]'!\H8:n&144/fh,eFobqANV7m`loDT\.-\;m9//]Se+MbqX<6<"<4,\E^V*K#P$r7CTBb%,3U2CBp!Ogk$)(q`72nhW>V=,]AoTApmN+e'FQjShI(Ce.b\C==7[LjA&h_8%7q2]V-9Jki0h!WRi7[e9[T+keW/XHhU[.)@mBV>%CQo9<[Up>6R;74cC>q9bQG@pJrmB1Yie"=6&,Xe9.;9*r!a=7NflOe//_t[u4'\G'nq+\f.DY&YiEo<%>kXk74>`,O3Qgj<1mj>O%(fr5Z92tWULHa8*=SYl'E1U@;YVP\uR);:d-64W>J/G[^h.XNd/emC+#'oT+Y,(#&87WV5]c=B&Bb)G<eu?EeRRYcVf8`,<&<BRc%os=h5=_#khB*S<H*o,<+1+>7!2RU2u)kNUCS,am+S/7mK$PJ_JokU9aV)+ois4V'0V*Qe5"c^N,XIXMG-p`YW$9`SnSja7_Yc'!A%hDPQBk8mW1b_<W\4@XAEXW4Y5R@)+8Ji5_`9(5#5C%S.A]3LhR%9%"0DP.0^&mQKgSLO$lk7gtt!aX%k_2];p:Ql3fma=7nalb4I%E%?fj07BoRMibEgqr[Q$4eq:)`uE/H\?@<^9jQJ>W#3+?MZo^hBR)=3>(8T:d"`!n>aBVmV@GM`W[Um>_$%j(?fU4b-9)gTmb0th%8N%(^J5mGujA[#?5a"MN8!?d&h7Rok"(b;s4I0h$oA8;U5p_!A6>cs3PAMC+B3*VALpCh6"k:DV%,%V.T!4Y[kJ='ogQj^%&Gte6%-Pj?("%/eWbp6-+PKW>cNL6)#*T[MX8m0a_2+o/6/s)>,oQcJ:(c/D5A!o0Q]SkGd)mQM524^Q.GK)/_$sqpCUEOW?c*a?CAPH0a%\\.R\3+;l/"KcGEe"WAO&kFQ8B&\fkqg$nVZ`!mkET5AalB"H035%biIEXGpFZRSY!G^ToF>38"f%@;Rmsm64e"`j2e?-7^eUKR`%5fV!/L^\n=ZQ39Xa;P89o.PlFpHE0fY^Stk26N]VO*`,]Z:.`ToP@_G]oF0-AnWR(C-S+o.H>2qT7T,>2+o/2jN5+-[Su@V1>`[I%nJ-^SV0(MW;%j<fn-Y3!/upr)q53!Q[#\djo;[/t)YVZSn1:4E.r!d!#\Hj=<GZBLnR6(&(TtRq$JL[8\OHXQ5\K]chV;"]s'DZI%8tDeu8Qh(;o6^CS_7mB9W-^B.E0GUHqbEQ;9UH:=DCDooOa4Oe(q?Gl]FkRa7M2j7Y:Zokc>SRAb(4_n:[/-5a0lk[?;EVX&OqXK%2mj:!-l[.I::g%l3@km%Mk#ItAe_%X!P&8tPp27:3$L6+L4<2*JYEj?;]e/1Wsn9d,>=S/b,>=[<fan'\'&`O08_Ak$EsT3'6C+`%i7f$^-$4WX(<#Oeh#?^2f2\c2/k`(/(l8Hso>X&)'n<74.7a-'hD5mOfZf]4d,UDXNWU>`LAKGFaDG/Z0^_qKSetFgk?n,F!`cIV%7$86^!pK.AgHTh[,s0M/2_&]=[2CsFeiZlpe)]QS.=S'<%;2#dP!X6/Lr6?OReT69H5)-;+:[F+&R?!'U_Y(3\h6pIpFdFc22"K3%+=JDJWu`='N?K]b%[8]uEsBEFYs""HK9\PPVJ&nIk#CCqe;n86@!$NX3'(+"DK-&<c5j!\=[9nfe,?r)1LsM/8*ik:/EMsjTWuu=%YGOn@!iQ0(P.Q%R.))[TIY8u5>ndre#,/]PQ/';TBZc7[U-sT)jY?lY17$)Wlr2EGki&bVAD0[0nT_53d=/OF%[ZA`;q'oQE_]IA%kB09%"\Y31&)!kk"$ltB<0S:@.6>/).)h)F,rMCV@T+[^_PK+A"qW^R<:g\\O]j0GiF:>NM-1;cE',N%:c6(i7<T,r>o"?clV%m(%S01e]@:4s!H7Fg"7*cI270K#g>Ud^`a!'L\5g8uV::`.g]4^L>OP\$@@:7n<Ya$5Hd<>XSWS,Gna#Rj,N/8[Um>=Hffk&teaKPl?%DQqUTG-tn'6WuLL'ulV/TD0U#Y\Kd=<(TC#;c'Y)#YSW.n"9kBi4A?SM?+rp-/gWEH/FVN(O"n:Q^BJDVMtHT`*Tf$HOH3=c%bso%BA+*\ZFXFe_A1X;D=1%.P`h:fYZk)%g'QH[^$;oR^(0rmW?O%7ATd2i!"t&-?rE,(m&^Z<_;fg%E92bK;@iK(Ek&i)R8;,moAR?>%>OO]U=[fhX.6!*1VOV?--<)g*/$'UM1'dW^T;.''Xl6a?(ElCPBVg*Ai5@_dfo*;MI:Oca7@^pm`thCYHqPnB@BZ(aa5`U-N2kb"%SPNQne:_WE"o0'iP[*Tr,S$6TC3G/oY[0`fYdpWc0lY]5F2^s^ER:n?"5_AHI06Z=(XgpVFPsX8VT2E93I0_(GTt^9!gT#bV_FZ?%cG6VFd6nJ'Lt9N;+]o@_YU4o.D%WlW4eR[!!\5a%?"=>Cos8GEDg_1DVLUunJL%EsmosXc&JXCnPONm`5a-d'(-p9t3Aigef,SEW%Jm=FR-,[L:f[pY<"arX\WV!i<,u._,4V,p\Q@%l?1*^>W#e!,KqM+r-&U0,FKnA6]VC@JWBc7U]7<TQNf]j7RS01itp%mT&'\CDs%P@S/+j=YHT*nnL/@>`1^VC4u#!P=qS)OTKE(0+aGdT5m"OXt#KV6'\0"G=fEDI/86&5157j*_7cY,]Oh^XZ8]g4,-q5RiYVAs'u-%kl`46\.1cY^(YdRkY1-`,L7\l^D(NdE(Yug=,N^!BDZ4C@7$EnjYW7,S)6b9FBhC[<qW-'A0Fj6*-d7`FB5u,@8j'_VT%*E9u*$b%LJW15gS]_IRrKn]:D"P`jL+8MhTX+4TQ2&*:cS'GAk+oUZda*;>t'Ook1Q^2JoeeRmfiIn<3,/>D6E^1(C]Y^Y)#=U'f5-<?6@]d%2+DsB5mQI=>2MF3W`UO!M5<_O:D0Y'@YNa@M,#7$KX8E.DM382RK]]l/eLan4Hm+>DmI-tR'6IN2(M5.*eA'L;B,);BO%"hZSZnU%5n:u0gQFGHr#rQj3VK@pX@<?GM^%-ER91.oi1#K3b"N&I@M`UJ`(D7E./<4#NXFi$8;5$)AIU,F/j4;o<inl(Z)$N[,@@RhVAaWW%:KRe8!;dBd84@_\:a+"_O70N_%em@ZUX(N<NaAkY``J-a)Q)^m6;[?hGLp]/^-8`.LC9?l(9s5_RW']uob=aAA(4M%1Ig!+=5Ehp%9G*i*!\Y>N4A+[nSc0sNhfQs&#g?/EjDF"+J(:@N8CQ+(ng_IVPlm9b><,&2nPmct#"tlEiOl$/MB?GgiXZig60?n=XC"]u[85Y&%##ZdCPW9To)tG^)'GtBnSTqa3G3gSec-9cBNpc<Ml,k)6pHidL)0uNI9k/!^0Oo8@MsA-L[$O9_"bUku-?BUo?jWa:6j-_WH"3*/%'ZgFXLi?lL"pSjWK>V])SHu;V#i\^'poAg@B@Oh;qf%)j(hU-2Koh:g.!jc+:?sdWSk5R^556X&LHr0?,9EB)G0$2$'2anNjbrY`%r$)K5[e"l;dV[bG!*r>6om[XuBT1HdE_Yb#S*-j:0Un,)WiN.[/HP=jV_jL#Z%?GD=+lmjkRgEK(eTUJ9k`j9MKmf20+RSEkAcRY%@'W0i$Rq?5HJWTs-:sjQRbQ[.dh.'4\\RW9*/(#D-]]d/@^`Z1B(VIr!T6QR'9sgOO])^Sm$nPN8^_Q"Q!Fs?'rjMbU1^tD1;SX.%%+M[XC^a>02G[V`EFpL5K@\>V2Q<,r#.IRVQm&Jl[`(KQcdY-5nXR6)Z$Q%S5b&/tV^/6<p'LghL4+R+9/PtnT<RReDX)jZL6)WQ%oO,G:j`lti/leNQ!gT2SP^=Z\e2pPoZ)9aCgGG1M)$)Rj@GZ^AP4,^+R#5m$#95AK'adj3:`EhG(Q)YqNG23/$G.l7rg_d.-Jf@<%!`g[m/r7m2.>&CQb(u9;a?*j1XK/j;,ir4Fn;C.hPfuPuWUGti,0;.>=n]Ru)9D`TZ_p93&\2*Hc9Z>a9)2N:BN$8H9#E;jZ_9#_%.*igU2f/ePBR$^a7Y[*u4KV)u!Y\?UYWQ.*#rPEe?Q2<mD0ua+2A=/`RlDlh0pcRAK=;#)HB?GuZ0B7b:t"uRS::d!$f6dI0NmBT%Hp?UC]mj`-'H..QZr&k%KF]&33b<Tu?"6i\%3Y?S]e[*_aooAFpB6Fo)*rqtfQ\a`Wus^4Y#9*YHQoI1:UElcZhff]MBm1\#/O.1%;@FCf>/7:N*lFWTVn<GOelbY5Jj6GX=D=152F[<BA-Knl/N06-)L'7XRk@ni*iQCYeu@C4&iUh+6W=WA([!Ih8qe",WJ,MV!K&Bt%F0HRsk1<.TpYfAT1;fk)>f)7Sf^"8Q1Yh`;2JmAGaF_+:g"/W$#SRE3")s&`]G]-<_eJ'c>uX_J)KIZaNJ3ZO/L*/JlZk?I>bE"h%hW!H4JQ%2"m_0fGAt.Tj%ZP%@@Y?QHjf]iUfBd0%#!!*3Bl6D5MToXE2&(Th]0EO)7E=TJjN;fF]\L@US5JMl+=7V\(ne-%S4T7"%r2SZp9a3:%*Za5m>Fk:tFmAVGBS\O?qn*dKQQtTCTH;H?b$X_L3SYCANXi0C&m/o<8"iB`oOT=/Mm-tL3R_8q!LOEJjQJOY!MsUn%.^oJc_X=)1Bg&R]nF--tc5fFL4m58=VGIj?:jl6hTC+%$-h#>qRa??D.kI?(X@,Jee`+#3mR^Ck^MbYXH;lK[_i>]>cun"j3kA%P%M(H!QfM"q4n_I1Y(=$&]U*UQIW(P33[K&L)RAr%-bo>#(q"\S4G+pn&=q.l!n%`*(m'1a7P7nK?MO,,X;`(qJ=Gl55l7"]-3Z*7_%m&1[NF*2doRttZPdeq6H&9uQPKKom1,G$[GcY-E%R(u5L;V%DWk+Z$%_*E5B[!&2I;a=1?#a/5a4BT4>B>FNggi8)WG+gs!.<"RJ%:ujI^_7BafB`iEHk:)#`>,2=$"/g^h,`>m2)'7<'lDig?cGFs,L`C^d@cf[.^B`Sp^.1u(8(Np5"&MtRUIBuI6>"m=*jnhErF)h"%$/!nJ#$G`A*-V^"1`Oal*&WnhE\VnThb1eE8SO"[1Q7l.J&jKFU>aN`$\,7Dr>n0>K_d]RU,531RLc-ooPN3Id>ijLb^DcsHN_Ij%;J>ML45VbF)aL:ln)/0$Hh#kU-@7R%9`QAd1jBHR+iP,+k700PAr`?>4UqA=3S(CRkT2K7U)R&;WSWpuLliem0pCQGMQVSYR@m`I%#R2&.Zip(gj9qdh.&@jTGgLlN+&lr2qVkmjf5^qe/$THLe<@FKqsf$eHUOj?G>T2WGG[EYl..IaUXp';UdSD&S(mW^ZYq<`7V,B7%QXYo^P$#Ed%#dB>i=Hm$C!:SdX1U`^j1/61\DXdaZ359O_>:;qjo%gR\\!Wk7n`E]e*rNfCdIdY4=H>IM=af0o'L'gqQc%He#=-2%c<P^TCiCW`h.Ih&nRZ"73%,U+!F6cJ<oR7"eJYpn]qt12h;[*J6oIP/WCJh./er;$MDPLoCG)'S8t_'\]([IJOAaat/76L,?aR?H%*8Z$r7!=`S$nXV7$Ci'HZJq=c5Fk!V:+Ac*;]/P`[C]TSHp>^iH%%>6E`?>l_tXq8FCBSq$NtVmie!mF/ci=UE$s1C'EAA*Umr,R%V?p.k>rN&SbH1tJKX4)j0tr&HJd"kP/('#'A<<^IH(o*cfFQ^LkZ]174Wm'j`kGNJ']ta.9F4RWR<TO)g;SfRO8:#[2"3da6F=K/%oiY@_R"2p=Zq)Cm.P</4W6^5,FBk8qAMk;`$Foi\-uUM/g@Gq]oL&tI/?krFkr7Ed1[HA/;%0h:$"#rt`6U`"3nBsR'ag68K?b1m%:NDDcF&H$eB-lKf30[BfkQWT+EBl)b1&B!$K^dg#!P&lSWj].Q)ou+2`JW;B+J[me7R8RkJXZ;CG\-V0P6co]o;"/8]!oFC/pGdl%Z^W7m*eOVnm]>u2H;[74\`BWK!%bB\[5^Do7^dHs^P-\Y7fWNlO?g(5G-.DmW1G#-%;T]"(9?#=1!HUGb`W01)=h)Ch:7UjV0\Ms%&CBWM<;esaV&:ZJq#d"NI9aI_(?[Q"'Pp-APu)s6Zq&h&!u05rKbS(".QEeJhYf9hD3#nk8nY[>EJ[SVgYUUN3H84!DFML5_GR+`%1qEAG)qon3E/UDl.L.SO<u*ahcm@cE[[S&i]d>I`?"k$pZ=ourO]5K$2g4,n>r*@OlL*6_imb7EHW#'L?n)04e7,=X/:1/Al#:P#%*A6!'g7i%n6r@X\Tfr%^A1glbd>0F[HP`g\hF/K3de97IFmU\*9TE>(VKSFf8dGDNLkjN8TG@jS_5&8;#-iu"LA=p1^CkLn/+'#Z%FkX"HMnWP9c#,tDc/#NB-8NP*%'p<i^TE`hqYV'p!4<:lGKgdu'8LIr))3*`b04^spW4`0'q1'@$!4s?.[701q#l@rT5p_INK0q)%O`.YJ+@&fnOAOEP$L=A4eWdkXYQT*phlWL,j!96)FiB<kjHgT+YCVDig"([,cr;/dJJ;rb=9?qr5d2=.'>q$^njb$_<g52-p=8A;%V=0(^Tk(!NF3C09'e?trMkE$EaVf"g4fEHVW7C@,@N@'t2Q7f$!r[k;h<k*6p!Wn85;\-0/0%:o9?E3HgFFVL)Vu=Embl/uZA"DB%Z(f'h4T!d!FD3Vc<!VFWD(F3TDj+[GV[a6*;_Fm$X,)b#'S?lbE?$i>rJf[=jA]e$18umCgF=[2&m`364;B5@8MkbK/rUQTP]&iE%!a*/rdE5cnSeOT)9*NT3nIY>`k$A(uG\9.s8Fn9r]lc];fQmsiB1oES\8_:.pSjsZGL1aV4a]'nVHPodY%#5BDCt0C;88R^:`.j8%\R0VHYYIS^6$LHUMGQ[P2&O-!HZ57(;&(Ick0*+4RFGH>TA-(T;i#DAdu'#dY\Dd)--NcR3D9u`K<>8V9Z&LRL_W/23q$.0i>cAX%>P;a#-6o.hP%\<_);1s&43D&k_j*!.V@f?Ijhh8u/Zl3BlD_43'"([(_&^\1-PR4U31*Z,#.np6.L9aDLDCd:!-6_-FKH<_@gFo5%AMo'E%n9d:175#5JAI7D.M,TKNKDED6J9,W!Eo-`941G(8E@mW&V,^OVU`S`ng:QXa.sbY:kTNq+VINF8F$a_?$@j8lE9?'(<(@_%\-9lJ$;i3/U[pmQ,=1+;(0LPS:Y5=)MEB3YhJm3#V[5EcG[%sB1shKMa7PW$H7Hs),#ot;N<,baY+m.YF,nS\R#6U')@Cl2CD<\B%C[X.WWbH848(UQ0!OTc5>lBbBOn_]C#K7QUQ$8\L1@4ok;6QY\l%rMF4X%*TmY)K!`G<BYG#Z,#%Bufnm5;mZ<f8BFFL^"@B"Y`-%H7]FNjCr:8hKIJR-?YrUgJNc*CRDiFS`6>6MJi<->K*5N?qjFaEbDmOh2!mu5qoQ'C_Oe"T\h1FLPk*I^_uMc2g;E%"HZ"<U7'3K%>;-,XB]h!F`KUG5&0$IO)*7JmT'h"n)?gbM2i2K3)fmLpW_K=<5T;1)V+WO:iVYl(>d3s6&\oR1A1NqNn(SdXL9CW@)+ND]Gh_rU%#<]8k.@Or0*D0(-?7JCF2!jh5eE?[-G"\?<>#_'F;LKb3?EC&GBqom-p*E-LSiY^PKi:`H?d-@*QquaWkgA87->AaO>(_(2SGjSj%0A]K9cZtbj=fG,<0p]Pq/$D5da.?EY]GG6ILM68#+V]Lu6>[+;>8-\;["#W(`hUd!In[W+RA/"S[fnaBUWs7fK#kA7",$;E,bf00%*)?'gg\u#b]MqW]-T9Ren!Ja)"X9DHAQeqm&%qGMGpVr_Z%Z>^M\GjZog.c"q+X/i[iJ)HmWct77%d+se%Til?ro_qAWkQ4,F]_G%K]5U(`O.\C!]iZ>'Wo2SjO2S?8&toJLB&BQjt!IU@VWHZk@):s]K57pq_;-GX:r/5@cTLaf7IEOW'E/lVARoA,,?]N4G)Bc*$7@X%8ZfFoX[p%FZLcQ+.$X"fZ[ZZUf^(Kt)[a5['#L*EDp+i>_lt'\-:LOC_u_^O&nOQ*L+iX0/S^.[34/!8V8:CYqf1bO')CFY^gI9L%T"9m`K:W$iD\hi[H(LHOi2Y#MK=7N\N^$:alcJ)eh/V'`\2Q/B;Y>.ak6)<0F4D*V/LhobCc#(9\[=sig?<"'U(T;rWD3"raj2h'%Fn_+dHP=@]Xq'HE@hc$]4W;anpHGCG\&A-b#]E6(ID:XZ+mot[/OC8I5c,SH4:q^#[7t5(;-,u$hM8_.*QFCh.k]iSI:@=+;k<W_%]5fE^6:IO32\K>!2I8)XA7%,n(4!9CWe6S(BL=\=;mPjtH*A]u5)7iU7?9R(etT#>g7G[P*Z??:E&Z#<W1>GkUlho7n#>c4U1+Y!%0&b-@pK1=N6dO'3[\q2;/pgjL&h,T\fP-YM4-8q(SHrkb_2GV_c!Y0o%^;@AeYjGk_0_1(n_hnH5qj3^>RgHalfMoO[%^P0Y@;eE%a.\g9pSse>#$'UWo@eT%5f9_u20,9\XtNq(^W%1M)bfko8h;`YXgW/qfPOCD73AMQ\F<gt$223*1#<5"_k929IZ!iiP.*SJQ0-M*%HH]Eg"G9o+K0aT-)[t)CXZHul#HC+C`J-aX"fYHQ@i.fVFgcG5/YO0lV8TCbI3:Pg-iZ>=\7O1=QXHoH&C*gR#8_'\!@sA:aD,j.%j8r0'&aDcP@4)^(F%22@&t-?d6LdLK*Wo#\!5,XWek(F=phM+3\cc4iLJ[m9mD5XSpHHB(m8nZCHN[n5$?X<DOfMA:U_d92XCTF#%bn-qp3DDM=TKSn7Yf,<"P(P$>mX&u3)QUYZ/*>4&K-3[@XOW,36qTOp.gm1chC(i+6/1FsInN2bOGC>]5i'&DAMT;d.E2Q$.;Y3A%51Q4KR`po-^sOi=6l_uHSV-$?"@K1-$e/>8,A!A=[Q!NGgD+-UneB=.F=F.1f_9?)DW[,j<$`VaN3.%tnKW%`8Z>q(%QO2,6(gEP%Kl.#F7,DRt.&il\AtR8B;(amij^g=\k34T0"e[r9QQT#IJ.r\WRf$$,C:\"dBRor")),?,PXX`&_DtWDeC:%I98u7\`\\P:kkHX.%BB5L^-.Vcr;9W#&V2&>SngZu/V;4-7rLq#:\:s7]H6"V73@E7dH)ibHF4stM@_gmF-bXdM4$9?YY5";'U:C\4!G@9hSPi8#^hug+%M/r6EDQ3DVK#0C"F#lm%L>sTnM/)0R3>%4j<>Y+qil(2b9*q/0(HM+M!^71k.2g1F`?R(29I5A^Z>>X);Wh<V>k+o<_Jn5]NXFo<%:'><I/A1b]AQ(_U[-3S:52XjQ]Ie(Enk5-/`KnDCL.nWYs2Wj#FNn<cj;4_-drb_e"fi8K^]22&6M<^p+/L\eMBH#+f?,!(+ucH\%QruG$'2)WWJuYAgj+e#L^kdR&DDmXY\:aN-1'Ve:F"<(iY*A*07oTdjnX6''//l>ebWOt^"`d1e?!h!u;?FS&:2BX?l<I:qXHK;T%2.@_SU&p>G)K%kp^O&n:8m:%^AqLpc.Z'gQc5km_Og^Eg+58uooJfg3oWX*;m8FJ9F.1`=HFZW-NuA"Pot'>;dDHZn,eN?>0ZN($%QP/-'>DiQUE<_:>!BI2a#9(FhBEhae.>O[^9e\,DQ[gJ`QkK:\5q$NI4e;F;"\%:=&f/Bk6N"O(75dqf"8"kO2O@!9c$jI`r-aP&%-;B"@`W\XTZB?HT=OVMH5TZ>\N;D\g]m2%t8#\R<L^>6CNq59\:FR6Rm.gC'/g,tGV!CCBZU1=$SX*0E%]c))pf>b0/+Hu91f,V^%-%:6*5r65h1p*Zld'JA>_*Y/.M8['CCS[6@D1TV#?,9QE:AusIQiC2aIOes9RrUKDaMQc"9W<LaDai`Jh-c*aH6>7mFJd%d[nRF,%[K]T5d=JZ$J8=Y?&pl=O+G#kr$qO%Nmn`(^7j@#\L0.Ekkh:&h,\7a,08(#`W"q2%,cc"da2oWTD[AZ:1_0:P'oV=E-cm%m.b:k\%O;j+]ZpYqNVQ<XQmK0I7LrVnr5)mHOm6Prh!F@3"8^?1Ka?/Y1Wu+ec>8g:.97*d,$-8Coc/b'\H@fC]V@Osj[S#h#'T]\jHi*h]%lWeTa8#e!6"o/ZhW<lHqIYR55Ldj^GW>WJgV34f/W!CHp5l<cOCS1+0h3l__40S%-3,p#:m!YC*'rdd>6iJ.\9a\W.On6;`>!q_\%>"Ur=(3.WQ-@NXlM+8ALC&"p.<`][+kB_'hK%/P6L_Vj?F`A&^hTu&]]\e-kTnR_;?g<#X-FpNbT@9TA)_/b/aMl=%KYF37"WOgL%Rr%5Uj=U7mNk2kYD(Fc`;/_Qi>rJ/C@O?$LF-eL)G:i&b>&ES9UX<P,>IVcS#`arD755lQ&V]VE7@B!t@&9dA7Dn6p@W>+rr/-`Z%;6JC(83muBQFb(l2&u*>`VNEibXecH6OZh'VO8/MoW1%SX#VX<'s2)RLJ$kJTd?3>e"*^jW^1+.b4[*bE0R^hBZE1)K51LN=B]%(%b60qn'fO7A[;^?qq\#K`<^2qGNRYpZc"Amu<&gku:Pf`)6`MLR5nMpWbrHQR!We6qW(2BdDOZgFQ<4S'4^Q.)6LA\$'+ds>P=Pq<%r(?-.CeN-di0+RUf53#HPH#n0UV1%Do=FZ=HrXh>>fn7TfRteW:$.Cc-9c?X:ZS#:ojD<[QoCDa@_$<.Qr8!FYiD`@PMkUgP0d:o%FIS1!CBgtfD?U5B.]7WT6:-<j5j=u=8926-.(Q=R#l30*E\>U0&`5EC=fg2"\Qk=fDFZQXRU0Z'CJ,fPk,!`A[2GM$ZNQT&&iIgJ%^ebk(b&&>u.;s_>@fA!<FH'\M7\e8`7I"F!V`.\"'4YY^_Ohbnn7nQ56Tl-q^JUS,r,uSs4\a((KLP<8O&Ri/c1MOsibZ2SVmR57%m_<?a#4C5)L[o!F^7(AEZZeWX:]b*DD\F[Fqu!J'78T-cpF?FF#LW@TSi4+./->K%[u!SM<.8&>)b!<26.bQ8;u1<k@$\<-n\shR%7L2*8AuGWWgFo0cAj/n4]?1>aPQu!edGU;@^t\j!/-q<NMerld+Kb*SR`CR%l1Q5VpBc#Th)M#-$?*7$=r5o,?l9LrVZg8D0^VY9%fnc'UD5=DJC`0VO8M5+3a$V.#GI*1>?t*o*PE-9Tqb/,Sn=&c70$F4:YpL:c;-d@M8Q.@Ts3bh3I`IfOo^M8?[=0`XCO#d?K5=NH%gd).ndJ>jG53]-%Q;buTL/GP<JOd9dL3-g3.OrEjlLu.EX'V*$-e_1-g00%Aft`4QPflh:enrjYO2ViOSS@>/h\p6;(rrm\eM<?4%`/ka2FOYW2/[3Z@cP88)f3r)HM##dgB<#Z2iGEpuMMpXVf`olH8Lb\a7A#TH*^b\(AmiMD,$(7C$g`PG!JVYt#dg:6Xb.r_#&W]H%U;*:NkBCMA:O-9(WR37C324_0ZhbD`RM)E1`D)[&d`*d.dR-lj0#>>IUiAZ_oL?0a4unq[8PB_u$J_%II-VX]\94pk[.-K(iEdDZ%dm8t[X46!0MF;iKRH0-o"VcPH?W,lTrHdK:Sp6W['7cAMXK^?^\a)-?A+79>\WanXdFMb:h,>UuJHOEMO\G>solCETK7Kd]!F\r%%k1H*;+Olk-)6gaa:>Wd$L5XQiR^JO?B.B(A<[@41O]3aXOZM*Y7L;JYRd".2,too3#X'kfn2]m#YLSoSc5Db<=`pN)B2-_,9_L8i%$?NubD\p:^4,Y=kpn;=IVeAJH(3DZMZg@Qq!V08k#;b50QY%P'VX"e)#)ag]WflOLl_p!k?Cp?:h&Z>PT*oc(:uqVuK$EHHk>Wef%S)F,b7J7hI2r3(QV1'.tRh](nPO.10Yae<_:,B5I3OXdYOQdt.LBqIe>=GdMd(>U(&=]r!Q;Y"Vpd!o?`-p;0[Hg53FuD^s?K)Mo%&r1%7c23BF&9?4BmVInuq4,#Yi6mn1nO"Rm*/N[5fh'"5pSUdg8>qV8_uOE:QBhuDhXFr("O[tjn;qupT0E1`E2f/ECqq#W>qF=0%&u1fAEXXA<UjMS;[60@qhk'OJqMIUm^ckBt7sG0[*\;R>MoMWEejB&a&P?:';Fock$kfN864\9$!#[Y25,nl_!)e'n/78U#^3(nU%$G7BBS3eecIn3p<89?rJ=V1"8!0PQE%191OSO]riaEbE%T5sqS*!=1)l\_-/:+3];6LhbFFO0Dl7(28srdDBESRuss=cgr?\EM&j%pT`9g^oX-$D:`;3;h8nu@TlC7ee)(W;rKKeZ"kqE*A2E7i$+H_d6mW@,TPU%g_[IGO2oc1g/k%0k-s?)Nl)`<r-&2IM-A[?\1]F^%1'sksD0'()\;ju!BG^R2:iod!9QchT/T,>QKkfF`Ls.*&6T!n;?0%hA_+@%`p>GUuoUjE,^$jI5)FO`oII++L.l<bW5VX7O1B4eG%P9:Su\Wb;BSmml]pE3n'YOE\+"H=D?*_]JQlPFUO8%LMs,0X^fah2kcm?MHX,$UohduIhE`o:oOcjUgCVWol?$GD%SoIO/[86Y:B%AK*_Q)VGA/>a>O4U6.K-d[F-sq6Do#Kp-r/-7-N&=oDNYD\h[13t%F@4[/j/Y8tc0KFM):&5d`&+NH23NOpL"N.,1V[\sa^:?f?r%qMY!SV9t4c9D@6V`9_?Vk#VkQDIYgGm/Iiaj9JiZ6@6Nl*6E"cQM.m^Nntu5bWi[.mXFRBS#S93:E#fY3(-$_r;)U>^\LEhKth:=%<.Wh'/JW4$fcW#jXd&a?AWP,tG3&9B:$3Si=:5K\pR.V<?@qan\HQ0Y]R#HgAtU%%'PkF0juc#:h;&jbggjigWj)4e_[ZSSrFKA=%X&n]%B7#Ic:7cM]Yq69S[12\sV5dIq`9lc1X\82TF,_Hu.YG`4,)[B4;n`jB6:Pbtn/N@O+LK(C\6dd3\D2:-:0_d?EeV#`''0bZ%n2&<]==L;R;<D^N12s&I>U'O.[dFqsY5iVHT/1I2`O0<o]\,iTg-"S-nRZX:p&-U#j6%IM)Pg[;(ugk92Vd"RB@dQ[JZEU85i'nf%g4]ZL:1^ZgeZG[AG(s_!JBG>,WZ[[<,a*[F@A14bTO]h<O_s9rLR&c=Y=2A0G>9N<k@%:(-gRQf6<i2^H8BkpN#2X*V=F-MKqI8u%#a^B^?-ll%rk-hF$-iU]"Vg,I`tFA%UMBAs"D`Wg`)XH_16`.8MVr(*,ong[!Qd\]AQ)*4"m9[LSX<hWmIkq\I\5d82WR!mc55:d%TbYEkQI)+6It$R/ar^KQ]8$p3rT!b++2@a@Vl0R.]`.E<_hSbPHM[F-kLZV]I!U'dq"X7@5;/'n?bUpdrq-0N?ftc;5JFjZqu69]%jmh*_^]'R^o9Ok$LCZWKr.g(-".#Q[G5~>%AI9_PrivateDataEnd